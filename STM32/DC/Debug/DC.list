
DC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  0800eca0  0800eca0  0001eca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3b8  0800f3b8  000203bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3b8  0800f3b8  0001f3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3c0  0800f3c0  000203bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3c0  0800f3c0  0001f3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3c4  0800f3c4  0001f3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003bc  20000000  0800f3c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021dc  200003c0  0800f784  000203c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000a04  2000259c  0800f784  0002259c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000248da  00000000  00000000  000203ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ed1  00000000  00000000  00044cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  00049b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  0004b370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd54  00000000  00000000  0004c988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f506  00000000  00000000  0006a6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a06db  00000000  00000000  00089be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a2bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075d4  00000000  00000000  0012a310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003c0 	.word	0x200003c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ec88 	.word	0x0800ec88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003c4 	.word	0x200003c4
 80001dc:	0800ec88 	.word	0x0800ec88

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <printHeader>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printHeader() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af02      	add	r7, sp, #8

	USBprintf("sXXX", "Serial Number: ", ID1, ID2, ID3);
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <printHeader+0x58>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <printHeader+0x5c>)
 8000f7c:	6819      	ldr	r1, [r3, #0]
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <printHeader+0x60>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	460b      	mov	r3, r1
 8000f86:	4913      	ldr	r1, [pc, #76]	; (8000fd4 <printHeader+0x64>)
 8000f88:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <printHeader+0x68>)
 8000f8a:	f008 f92d 	bl	80091e8 <USBprintf>

	USBprintf("ss", "Product Type: ", productType);
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <printHeader+0x6c>)
 8000f90:	4913      	ldr	r1, [pc, #76]	; (8000fe0 <printHeader+0x70>)
 8000f92:	4814      	ldr	r0, [pc, #80]	; (8000fe4 <printHeader+0x74>)
 8000f94:	f008 f928 	bl	80091e8 <USBprintf>

	USBprintf("ss", "Software Version: ", softwareVersion);
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <printHeader+0x78>)
 8000f9a:	4914      	ldr	r1, [pc, #80]	; (8000fec <printHeader+0x7c>)
 8000f9c:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <printHeader+0x74>)
 8000f9e:	f008 f923 	bl	80091e8 <USBprintf>

	USBprintf("ss", "Compile Date: ", compileDate);
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <printHeader+0x80>)
 8000fa4:	4913      	ldr	r1, [pc, #76]	; (8000ff4 <printHeader+0x84>)
 8000fa6:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <printHeader+0x74>)
 8000fa8:	f008 f91e 	bl	80091e8 <USBprintf>

	USBprintf("ss", "MCU Family: ", mcuFamily);
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <printHeader+0x88>)
 8000fae:	4913      	ldr	r1, [pc, #76]	; (8000ffc <printHeader+0x8c>)
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <printHeader+0x74>)
 8000fb2:	f008 f919 	bl	80091e8 <USBprintf>

	USBprintf("ss", "PCB Version: ", pcbVersion);
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <printHeader+0x90>)
 8000fb8:	4912      	ldr	r1, [pc, #72]	; (8001004 <printHeader+0x94>)
 8000fba:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <printHeader+0x74>)
 8000fbc:	f008 f914 	bl	80091e8 <USBprintf>
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	1fff7a10 	.word	0x1fff7a10
 8000fcc:	1fff7a14 	.word	0x1fff7a14
 8000fd0:	1fff7a18 	.word	0x1fff7a18
 8000fd4:	0800eca0 	.word	0x0800eca0
 8000fd8:	0800ecb0 	.word	0x0800ecb0
 8000fdc:	20000004 	.word	0x20000004
 8000fe0:	0800ecb8 	.word	0x0800ecb8
 8000fe4:	0800ecc8 	.word	0x0800ecc8
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	0800eccc 	.word	0x0800eccc
 8000ff0:	20000024 	.word	0x20000024
 8000ff4:	0800ece0 	.word	0x0800ece0
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	0800ecf0 	.word	0x0800ecf0
 8001000:	2000001c 	.word	0x2000001c
 8001004:	0800ed00 	.word	0x0800ed00

08001008 <popBuff>:

void popBuff() { // move the ADC_result to the ADC_Buffer. TempSense (PA0) ADC_Buffer[0], P1(PA2) ADC_Buffer[1], P2(PA4) ADC_Buffer[2], P3(PA6) ADC_Buffer[4], P4(PB0) ADC_Buffer[5]
 8001008:	b490      	push	{r4, r7}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

	for (uint8_t var = 0; var < DMA_BUF_SIZE; var++) {
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e013      	b.n	800103c <popBuff+0x34>
		// Subtract calibration of current sensings
		ADC_Buffer[var][dmaBufIndex] = ADC_result[var];
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <popBuff+0x60>)
 8001018:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4a13      	ldr	r2, [pc, #76]	; (800106c <popBuff+0x64>)
 8001020:	8812      	ldrh	r2, [r2, #0]
 8001022:	4614      	mov	r4, r2
 8001024:	b208      	sxth	r0, r1
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <popBuff+0x68>)
 8001028:	2164      	movs	r1, #100	; 0x64
 800102a:	fb01 f303 	mul.w	r3, r1, r3
 800102e:	4423      	add	r3, r4
 8001030:	4601      	mov	r1, r0
 8001032:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t var = 0; var < DMA_BUF_SIZE; var++) {
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	3301      	adds	r3, #1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b05      	cmp	r3, #5
 8001040:	d9e8      	bls.n	8001014 <popBuff+0xc>
	}
	dmaBufIndex++;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <popBuff+0x64>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <popBuff+0x64>)
 800104c:	801a      	strh	r2, [r3, #0]

	if (dmaBufIndex == ADC_CHANNEL_BUF_SIZE) {
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <popBuff+0x64>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d102      	bne.n	800105c <popBuff+0x54>
		dmaBufIndex = 0;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <popBuff+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	801a      	strh	r2, [r3, #0]
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bc90      	pop	{r4, r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000684 	.word	0x20000684
 800106c:	200003dc 	.word	0x200003dc
 8001070:	20000690 	.word	0x20000690

08001074 <ADCtoCurrent>:


double ADCtoCurrent(double adc_val){
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	ed87 0b00 	vstr	d0, [r7]
	return current_scalar*adc_val + current_bias;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <ADCtoCurrent+0x50>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa78 	bl	8000578 <__aeabi_f2d>
 8001088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800108c:	f7ff facc 	bl	8000628 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4614      	mov	r4, r2
 8001096:	461d      	mov	r5, r3
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <ADCtoCurrent+0x54>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa6b 	bl	8000578 <__aeabi_f2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4620      	mov	r0, r4
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff f907 	bl	80002bc <__adddf3>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80010b6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ba:	eef0 0a67 	vmov.f32	s1, s15
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bdb0      	pop	{r4, r5, r7, pc}
 80010c4:	2000003c 	.word	0x2000003c
 80010c8:	20000040 	.word	0x20000040

080010cc <avgCurrent>:

double avgCurrent(uint8_t channel) { // calculate all currents.
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]

	// RMS (current board example)
	uint16_t k = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint64_t sum = 0;
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int16_t val = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	82fb      	strh	r3, [r7, #22]

	for (k = 0; k < ADC_CHANNEL_BUF_SIZE; k++) { // sum squares of values zero to preBuf
 80010ea:	2300      	movs	r3, #0
 80010ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010ee:	e017      	b.n	8001120 <avgCurrent+0x54>
		val = ADC_Buffer[channel][k];
 80010f0:	79fa      	ldrb	r2, [r7, #7]
 80010f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f4:	491c      	ldr	r1, [pc, #112]	; (8001168 <avgCurrent+0x9c>)
 80010f6:	2064      	movs	r0, #100	; 0x64
 80010f8:	fb00 f202 	mul.w	r2, r0, r2
 80010fc:	4413      	add	r3, r2
 80010fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001102:	82fb      	strh	r3, [r7, #22]
		sum = sum + val; // add squared values to sum
 8001104:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001108:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800110c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001110:	1884      	adds	r4, r0, r2
 8001112:	eb41 0503 	adc.w	r5, r1, r3
 8001116:	e9c7 4506 	strd	r4, r5, [r7, #24]
	for (k = 0; k < ADC_CHANNEL_BUF_SIZE; k++) { // sum squares of values zero to preBuf
 800111a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800111c:	3301      	adds	r3, #1
 800111e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001120:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001122:	2b63      	cmp	r3, #99	; 0x63
 8001124:	d9e4      	bls.n	80010f0 <avgCurrent+0x24>
	}
	double avg_port = sum / ADC_CHANNEL_BUF_SIZE;
 8001126:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800112a:	f04f 0264 	mov.w	r2, #100	; 0x64
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	f7ff fda1 	bl	8000c78 <__aeabi_uldivmod>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fa3d 	bl	80005bc <__aeabi_ul2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return ADCtoCurrent(avg_port);
 800114a:	ed97 0b02 	vldr	d0, [r7, #8]
 800114e:	f7ff ff91 	bl	8001074 <ADCtoCurrent>
 8001152:	eeb0 7a40 	vmov.f32	s14, s0
 8001156:	eef0 7a60 	vmov.f32	s15, s1
}
 800115a:	eeb0 0a47 	vmov.f32	s0, s14
 800115e:	eef0 0a67 	vmov.f32	s1, s15
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bdb0      	pop	{r4, r5, r7, pc}
 8001168:	20000690 	.word	0x20000690

0800116c <printCurrentArray>:

void printCurrentArray() {	// calc and print current array.
 800116c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001170:	b094      	sub	sp, #80	; 0x50
 8001172:	af10      	add	r7, sp, #64	; 0x40
	si7051Val = si7051Temp();
 8001174:	f007 ffc8 	bl	8009108 <si7051Temp>
 8001178:	eef0 7a40 	vmov.f32	s15, s0
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <printCurrentArray+0xa4>)
 800117e:	edc3 7a00 	vstr	s15, [r3]
	//fill current array with rmsCurrents.
	for (int i = 0; i < PORTS; i++) {
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	e011      	b.n	80011ac <printCurrentArray+0x40>
		current[i] = avgCurrent(i);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff9d 	bl	80010cc <avgCurrent>
 8001192:	eeb0 7a40 	vmov.f32	s14, s0
 8001196:	eef0 7a60 	vmov.f32	s15, s1
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <printCurrentArray+0xa8>)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4413      	add	r3, r2
 80011a2:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < PORTS; i++) {
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3301      	adds	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b05      	cmp	r3, #5
 80011b0:	ddea      	ble.n	8001188 <printCurrentArray+0x1c>
	}

	USBprintf("fsfsfsfsf", current[0], ", ", current[1], ", ", current[2], ", ",
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <printCurrentArray+0xa8>)
 80011b4:	ed93 7b00 	vldr	d7, [r3]
 80011b8:	ed87 7b00 	vstr	d7, [r7]
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <printCurrentArray+0xa8>)
 80011be:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <printCurrentArray+0xa8>)
 80011c4:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <printCurrentArray+0xa8>)
 80011ca:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <printCurrentArray+0xa4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9d0 	bl	8000578 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <printCurrentArray+0xac>)
 80011e2:	930c      	str	r3, [sp, #48]	; 0x30
 80011e4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <printCurrentArray+0xac>)
 80011ea:	9308      	str	r3, [sp, #32]
 80011ec:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <printCurrentArray+0xac>)
 80011f2:	9304      	str	r3, [sp, #16]
 80011f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <printCurrentArray+0xac>)
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <printCurrentArray+0xb0>)
 8001202:	f007 fff1 	bl	80091e8 <USBprintf>
			current[3], ", ", si7051Val);	//	printCurrent.

}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001210:	20000450 	.word	0x20000450
 8001214:	20000420 	.word	0x20000420
 8001218:	0800ed1c 	.word	0x0800ed1c
 800121c:	0800ed10 	.word	0x0800ed10

08001220 <setPWMPin>:

void setPWMPin(int pinNumber, int pwmState, int duration) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]

	if (pinNumber==0){
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d103      	bne.n	800123a <setPWMPin+0x1a>
		TIM5->CCR1=pwmState;
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <setPWMPin+0x84>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	6353      	str	r3, [r2, #52]	; 0x34
 8001238:	e013      	b.n	8001262 <setPWMPin+0x42>
	} else if (pinNumber==1){
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d103      	bne.n	8001248 <setPWMPin+0x28>
		TIM5->CCR2=pwmState;
 8001240:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <setPWMPin+0x84>)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	6393      	str	r3, [r2, #56]	; 0x38
 8001246:	e00c      	b.n	8001262 <setPWMPin+0x42>
	} else if (pinNumber==2){
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d103      	bne.n	8001256 <setPWMPin+0x36>
		TIM5->CCR3=pwmState;
 800124e:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <setPWMPin+0x84>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001254:	e005      	b.n	8001262 <setPWMPin+0x42>
	} else if (pinNumber==3){
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d102      	bne.n	8001262 <setPWMPin+0x42>
		TIM5->CCR4=pwmState;
 800125c:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <setPWMPin+0x84>)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
	}

	actuationStart[pinNumber] = HAL_GetTick();
 8001262:	f001 f95b 	bl	800251c <HAL_GetTick>
 8001266:	4603      	mov	r3, r0
 8001268:	4619      	mov	r1, r3
 800126a:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <setPWMPin+0x88>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	actuationDuration[pinNumber] = duration;
 8001272:	490e      	ldr	r1, [pc, #56]	; (80012ac <setPWMPin+0x8c>)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	ccr_states[pinNumber] = *(&TIM5->CCR1 + pinNumber);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001284:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4909      	ldr	r1, [pc, #36]	; (80012b0 <setPWMPin+0x90>)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	port_state[pinNumber] = 1;
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <setPWMPin+0x94>)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]

}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40000c00 	.word	0x40000c00
 80012a8:	200003f8 	.word	0x200003f8
 80012ac:	200003e8 	.word	0x200003e8
 80012b0:	2000040c 	.word	0x2000040c
 80012b4:	20000408 	.word	0x20000408

080012b8 <pinWrite>:

void pinWrite(int pinNumber, bool turnOn){
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
	// Normal turn off is done by choosing min PWM value i.e. pin always low.
	if (pinNumber==0){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <pinWrite+0x26>
		TIM5->CCR1 = (turnOn) ? TURNONPWM : TURNOFFPWM;
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <pinWrite+0x1e>
 80012d0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80012d4:	e000      	b.n	80012d8 <pinWrite+0x20>
 80012d6:	2300      	movs	r3, #0
 80012d8:	4a17      	ldr	r2, [pc, #92]	; (8001338 <pinWrite+0x80>)
 80012da:	6353      	str	r3, [r2, #52]	; 0x34
	} else if (pinNumber==2){
		TIM5->CCR3 = (turnOn) ? TURNONPWM : TURNOFFPWM;
	} else if (pinNumber==3){
		TIM5->CCR4 = (turnOn) ? TURNONPWM : TURNOFFPWM;
	}
}
 80012dc:	e025      	b.n	800132a <pinWrite+0x72>
	} else if (pinNumber==1){
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d109      	bne.n	80012f8 <pinWrite+0x40>
		TIM5->CCR2 = (turnOn) ? TURNONPWM : TURNOFFPWM;
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <pinWrite+0x38>
 80012ea:	f240 33e7 	movw	r3, #999	; 0x3e7
 80012ee:	e000      	b.n	80012f2 <pinWrite+0x3a>
 80012f0:	2300      	movs	r3, #0
 80012f2:	4a11      	ldr	r2, [pc, #68]	; (8001338 <pinWrite+0x80>)
 80012f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012f6:	e018      	b.n	800132a <pinWrite+0x72>
	} else if (pinNumber==2){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d109      	bne.n	8001312 <pinWrite+0x5a>
		TIM5->CCR3 = (turnOn) ? TURNONPWM : TURNOFFPWM;
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <pinWrite+0x52>
 8001304:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001308:	e000      	b.n	800130c <pinWrite+0x54>
 800130a:	2300      	movs	r3, #0
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <pinWrite+0x80>)
 800130e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001310:	e00b      	b.n	800132a <pinWrite+0x72>
	} else if (pinNumber==3){
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b03      	cmp	r3, #3
 8001316:	d108      	bne.n	800132a <pinWrite+0x72>
		TIM5->CCR4 = (turnOn) ? TURNONPWM : TURNOFFPWM;
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <pinWrite+0x6c>
 800131e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001322:	e000      	b.n	8001326 <pinWrite+0x6e>
 8001324:	2300      	movs	r3, #0
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <pinWrite+0x80>)
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40000c00 	.word	0x40000c00

0800133c <allOn>:


// Turn on all pins.
void allOn() {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
	for (int pinNumber = 0; pinNumber < 4; pinNumber++) {
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	e01b      	b.n	8001380 <allOn+0x44>
		pinWrite(pinNumber, SET);
 8001348:	2101      	movs	r1, #1
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffb4 	bl	80012b8 <pinWrite>
		actuationDuration[pinNumber] = 0; // actuationDuration=0 since it should be on indefinitely
 8001350:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <allOn+0x54>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2100      	movs	r1, #0
 8001356:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		port_state[pinNumber] = 1;
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <allOn+0x58>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
		ccr_states[pinNumber] = *(&TIM5->CCR1 + pinNumber);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800136c:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4909      	ldr	r1, [pc, #36]	; (8001398 <allOn+0x5c>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int pinNumber = 0; pinNumber < 4; pinNumber++) {
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3301      	adds	r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b03      	cmp	r3, #3
 8001384:	dde0      	ble.n	8001348 <allOn+0xc>
	}
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200003e8 	.word	0x200003e8
 8001394:	20000408 	.word	0x20000408
 8001398:	2000040c 	.word	0x2000040c

0800139c <turnOnPin>:

void turnOnPin(int pinNumber) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	pinWrite(pinNumber, SET);
 80013a4:	2101      	movs	r1, #1
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff86 	bl	80012b8 <pinWrite>
	actuationDuration[pinNumber] = 0; // actuationDuration=0 since it should be on indefinitely
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <turnOnPin+0x44>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2100      	movs	r1, #0
 80013b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	port_state[pinNumber] = 1;
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <turnOnPin+0x48>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
	ccr_states[pinNumber] = *(&TIM5->CCR1 + pinNumber);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013c8:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4906      	ldr	r1, [pc, #24]	; (80013e8 <turnOnPin+0x4c>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200003e8 	.word	0x200003e8
 80013e4:	20000408 	.word	0x20000408
 80013e8:	2000040c 	.word	0x2000040c

080013ec <turnOnPinDuration>:

void turnOnPinDuration(int pinNumber, int duration) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
	pinWrite(pinNumber, SET);
 80013f6:	2101      	movs	r1, #1
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff5d 	bl	80012b8 <pinWrite>
	actuationStart[pinNumber] = HAL_GetTick();
 80013fe:	f001 f88d 	bl	800251c <HAL_GetTick>
 8001402:	4603      	mov	r3, r0
 8001404:	4619      	mov	r1, r3
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <turnOnPinDuration+0x54>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	actuationDuration[pinNumber] = duration;
 800140e:	490d      	ldr	r1, [pc, #52]	; (8001444 <turnOnPinDuration+0x58>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	port_state[pinNumber] = 1;
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <turnOnPinDuration+0x5c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
	ccr_states[pinNumber] = *(&TIM5->CCR1 + pinNumber);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800142a:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4906      	ldr	r1, [pc, #24]	; (800144c <turnOnPinDuration+0x60>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200003f8 	.word	0x200003f8
 8001444:	200003e8 	.word	0x200003e8
 8001448:	20000408 	.word	0x20000408
 800144c:	2000040c 	.word	0x2000040c

08001450 <allOff>:


// Shuts off all pins.
void allOff() {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	for (int pinNumber = 0; pinNumber < 4; pinNumber++) {
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	e01b      	b.n	8001494 <allOff+0x44>
		pinWrite(pinNumber, RESET);
 800145c:	2100      	movs	r1, #0
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff2a 	bl	80012b8 <pinWrite>
		actuationDuration[pinNumber] = 0;
 8001464:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <allOff+0x54>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2100      	movs	r1, #0
 800146a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		port_state[pinNumber]=0;
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <allOff+0x58>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
		ccr_states[pinNumber] = *(&TIM5->CCR1 + pinNumber);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001480:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4909      	ldr	r1, [pc, #36]	; (80014ac <allOff+0x5c>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int pinNumber = 0; pinNumber < 4; pinNumber++) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3301      	adds	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b03      	cmp	r3, #3
 8001498:	dde0      	ble.n	800145c <allOff+0xc>
	}
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200003e8 	.word	0x200003e8
 80014a8:	20000408 	.word	0x20000408
 80014ac:	2000040c 	.word	0x2000040c

080014b0 <turnOffPin>:

void turnOffPin(int pinNumber) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	pinWrite(pinNumber, RESET);
 80014b8:	2100      	movs	r1, #0
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fefc 	bl	80012b8 <pinWrite>
	actuationDuration[pinNumber] = 0;
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <turnOffPin+0x44>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2100      	movs	r1, #0
 80014c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	port_state[pinNumber]=0;
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <turnOffPin+0x48>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4413      	add	r3, r2
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
	ccr_states[pinNumber] = *(&TIM5->CCR1 + pinNumber);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014dc:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4906      	ldr	r1, [pc, #24]	; (80014fc <turnOffPin+0x4c>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200003e8 	.word	0x200003e8
 80014f8:	20000408 	.word	0x20000408
 80014fc:	2000040c 	.word	0x2000040c

08001500 <actuatePins>:


void actuatePins(struct actuationInfo actuationInfo){
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	463c      	mov	r4, r7
 8001508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// all off (pin == -1 means all pins)
	if (actuationInfo.pin == -1 && actuationInfo.pwmDutyCycle==0){
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001512:	d105      	bne.n	8001520 <actuatePins+0x20>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <actuatePins+0x20>
		allOff();
 800151a:	f7ff ff99 	bl	8001450 <allOff>
 800151e:	e051      	b.n	80015c4 <actuatePins+0xc4>
	// all on (pin == -1 means all pins)
	} else if (actuationInfo.pin == -1 && actuationInfo.pwmDutyCycle==100){
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001526:	d105      	bne.n	8001534 <actuatePins+0x34>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d102      	bne.n	8001534 <actuatePins+0x34>
		allOn();
 800152e:	f7ff ff05 	bl	800133c <allOn>
 8001532:	e047      	b.n	80015c4 <actuatePins+0xc4>
	// pX on or pX off (timeOn == -1 means indefinite)
	} else if (actuationInfo.timeOn == -1 && (actuationInfo.pwmDutyCycle==100 || actuationInfo.pwmDutyCycle==0)){
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800153a:	d112      	bne.n	8001562 <actuatePins+0x62>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d002      	beq.n	8001548 <actuatePins+0x48>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10c      	bne.n	8001562 <actuatePins+0x62>
		if (actuationInfo.pwmDutyCycle == 0){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d104      	bne.n	8001558 <actuatePins+0x58>
			turnOffPin(actuationInfo.pin);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ffad 	bl	80014b0 <turnOffPin>
		if (actuationInfo.pwmDutyCycle == 0){
 8001556:	e035      	b.n	80015c4 <actuatePins+0xc4>
		} else {
			turnOnPin(actuationInfo.pin);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff1e 	bl	800139c <turnOnPin>
		if (actuationInfo.pwmDutyCycle == 0){
 8001560:	e030      	b.n	80015c4 <actuatePins+0xc4>
		}
	// pX on YY
	} else if (actuationInfo.timeOn != -1 && actuationInfo.pwmDutyCycle == 100){
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001568:	d009      	beq.n	800157e <actuatePins+0x7e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b64      	cmp	r3, #100	; 0x64
 800156e:	d106      	bne.n	800157e <actuatePins+0x7e>
		turnOnPinDuration(actuationInfo.pin, actuationInfo.timeOn);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff38 	bl	80013ec <turnOnPinDuration>
 800157c:	e022      	b.n	80015c4 <actuatePins+0xc4>
	// pX on ZZZ%
	} else if (actuationInfo.timeOn == -1 && actuationInfo.pwmDutyCycle != 0 && actuationInfo.pwmDutyCycle != 100){
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001584:	d10c      	bne.n	80015a0 <actuatePins+0xa0>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d009      	beq.n	80015a0 <actuatePins+0xa0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d006      	beq.n	80015a0 <actuatePins+0xa0>
		setPWMPin(actuationInfo.pin, actuationInfo.pwmDutyCycle, 0);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fe41 	bl	8001220 <setPWMPin>
 800159e:	e011      	b.n	80015c4 <actuatePins+0xc4>
	// pX on YY ZZZ%
	} else if (actuationInfo.timeOn != -1 && actuationInfo.pwmDutyCycle != 100){
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a6:	d009      	beq.n	80015bc <actuatePins+0xbc>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d006      	beq.n	80015bc <actuatePins+0xbc>
		setPWMPin(actuationInfo.pin, actuationInfo.pwmDutyCycle, actuationInfo.timeOn);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe33 	bl	8001220 <setPWMPin>
 80015ba:	e003      	b.n	80015c4 <actuatePins+0xc4>
	} else {
		handleGenericMessages(inputBuffer); // should never reach this, but is implemented for potentially unknown errors.
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <actuatePins+0xcc>)
 80015be:	f008 f939 	bl	8009834 <handleGenericMessages>
	}
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	20000b40 	.word	0x20000b40

080015d0 <handleUserInputs>:

void handleUserInputs() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0

	// Read user input
	circular_read_command(cbuf, (uint8_t*) inputBuffer);
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <handleUserInputs+0x4c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4911      	ldr	r1, [pc, #68]	; (8001620 <handleUserInputs+0x50>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f007 ffdd 	bl	800959c <circular_read_command>

	// Check if there is new input
	if (inputBuffer[0] == '\0') {
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <handleUserInputs+0x50>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d013      	beq.n	8001612 <handleUserInputs+0x42>
		return;
	}

	struct actuationInfo actuationInfo = parseAndValidateInput(inputBuffer);
 80015ea:	463b      	mov	r3, r7
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <handleUserInputs+0x50>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f007 fb60 	bl	8008cb4 <parseAndValidateInput>

	if (!actuationInfo.isInputValid){
 80015f4:	7b3b      	ldrb	r3, [r7, #12]
 80015f6:	f083 0301 	eor.w	r3, r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <handleUserInputs+0x38>
		handleGenericMessages(inputBuffer);
 8001600:	4807      	ldr	r0, [pc, #28]	; (8001620 <handleUserInputs+0x50>)
 8001602:	f008 f917 	bl	8009834 <handleGenericMessages>
		return;
 8001606:	e005      	b.n	8001614 <handleUserInputs+0x44>
	}
	actuatePins(actuationInfo);
 8001608:	463b      	mov	r3, r7
 800160a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800160c:	f7ff ff78 	bl	8001500 <actuatePins>
 8001610:	e000      	b.n	8001614 <handleUserInputs+0x44>
		return;
 8001612:	bf00      	nop
}
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20001090 	.word	0x20001090
 8001620:	20000b40 	.word	0x20000b40

08001624 <autoOff>:

void autoOff() {
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
	uint64_t now = HAL_GetTick();
 800162a:	f000 ff77 	bl	800251c <HAL_GetTick>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9c7 2300 	strd	r2, r3, [r7]
	for (int i = 0; i < 4; i++) {
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e022      	b.n	8001686 <autoOff+0x62>
		if ((now - actuationStart[i]) > actuationDuration[i]
 8001640:	4a15      	ldr	r2, [pc, #84]	; (8001698 <autoOff+0x74>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	461a      	mov	r2, r3
 800164a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800164e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001652:	1a84      	subs	r4, r0, r2
 8001654:	eb61 0503 	sbc.w	r5, r1, r3
 8001658:	4a10      	ldr	r2, [pc, #64]	; (800169c <autoOff+0x78>)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	461a      	mov	r2, r3
 8001662:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001666:	42ab      	cmp	r3, r5
 8001668:	bf08      	it	eq
 800166a:	42a2      	cmpeq	r2, r4
 800166c:	d208      	bcs.n	8001680 <autoOff+0x5c>
				&& actuationDuration[i] != 0) {
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <autoOff+0x78>)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <autoOff+0x5c>
			turnOffPin(i);
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f7ff ff18 	bl	80014b0 <turnOffPin>
	for (int i = 0; i < 4; i++) {
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3301      	adds	r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b03      	cmp	r3, #3
 800168a:	ddd9      	ble.n	8001640 <autoOff+0x1c>
		}
	}
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bdb0      	pop	{r4, r5, r7, pc}
 8001696:	bf00      	nop
 8001698:	200003f8 	.word	0x200003f8
 800169c:	200003e8 	.word	0x200003e8

080016a0 <handleButtonPress>:

void handleButtonPress(){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++){
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e04b      	b.n	8001744 <handleButtonPress+0xa4>
		if (HAL_GPIO_ReadPin(button_ports[i], buttonPins[i]) == 0){
 80016ac:	4a29      	ldr	r2, [pc, #164]	; (8001754 <handleButtonPress+0xb4>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016b4:	4928      	ldr	r1, [pc, #160]	; (8001758 <handleButtonPress+0xb8>)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	4610      	mov	r0, r2
 80016c2:	f002 f949 	bl	8003958 <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d104      	bne.n	80016d6 <handleButtonPress+0x36>
			pinWrite(i, SET);
 80016cc:	2101      	movs	r1, #1
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff fdf2 	bl	80012b8 <pinWrite>
 80016d4:	e033      	b.n	800173e <handleButtonPress+0x9e>
		} else if (HAL_GPIO_ReadPin(button_ports[i], buttonPins[i]) == 1){
 80016d6:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <handleButtonPress+0xb4>)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016de:	491e      	ldr	r1, [pc, #120]	; (8001758 <handleButtonPress+0xb8>)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4619      	mov	r1, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f002 f934 	bl	8003958 <HAL_GPIO_ReadPin>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d123      	bne.n	800173e <handleButtonPress+0x9e>
			if (port_state[i]==1){
 80016f6:	4a19      	ldr	r2, [pc, #100]	; (800175c <handleButtonPress+0xbc>)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d019      	beq.n	8001736 <handleButtonPress+0x96>
				unsigned long now = HAL_GetTick();
 8001702:	f000 ff0b 	bl	800251c <HAL_GetTick>
 8001706:	60b8      	str	r0, [r7, #8]
				int duration = actuationDuration[i] - (int)(now - actuationStart[i]);
 8001708:	4a15      	ldr	r2, [pc, #84]	; (8001760 <handleButtonPress+0xc0>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	4914      	ldr	r1, [pc, #80]	; (8001764 <handleButtonPress+0xc4>)
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001718:	4611      	mov	r1, r2
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	1a52      	subs	r2, r2, r1
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	607b      	str	r3, [r7, #4]
				setPWMPin(i, ccr_states[i], duration);
 8001722:	4a11      	ldr	r2, [pc, #68]	; (8001768 <handleButtonPress+0xc8>)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4619      	mov	r1, r3
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff fd76 	bl	8001220 <setPWMPin>
 8001734:	e003      	b.n	800173e <handleButtonPress+0x9e>
			} else {
				pinWrite(i, RESET);
 8001736:	2100      	movs	r1, #0
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fdbd 	bl	80012b8 <pinWrite>
	for (int i=0; i<4; i++){
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b03      	cmp	r3, #3
 8001748:	ddb0      	ble.n	80016ac <handleButtonPress+0xc>
			}

		}
	}
}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	0800eebc 	.word	0x0800eebc
 8001758:	20000050 	.word	0x20000050
 800175c:	20000408 	.word	0x20000408
 8001760:	200003e8 	.word	0x200003e8
 8001764:	200003f8 	.word	0x200003f8
 8001768:	2000040c 	.word	0x2000040c

0800176c <checkButtonPress>:


void checkButtonPress(){
 800176c:	b5b0      	push	{r4, r5, r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	uint64_t now = HAL_GetTick();
 8001772:	f000 fed3 	bl	800251c <HAL_GetTick>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	e9c7 2300 	strd	r2, r3, [r7]
	if (now - lastCheckButtonTime > tsButton){
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <checkButtonPress+0x54>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001790:	1a84      	subs	r4, r0, r2
 8001792:	eb61 0503 	sbc.w	r5, r1, r3
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <checkButtonPress+0x58>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017a0:	42ab      	cmp	r3, r5
 80017a2:	bf08      	it	eq
 80017a4:	42a2      	cmpeq	r2, r4
 80017a6:	d206      	bcs.n	80017b6 <checkButtonPress+0x4a>
		handleButtonPress();
 80017a8:	f7ff ff7a 	bl	80016a0 <handleButtonPress>
		lastCheckButtonTime = HAL_GetTick();
 80017ac:	f000 feb6 	bl	800251c <HAL_GetTick>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <checkButtonPress+0x54>)
 80017b4:	6013      	str	r3, [r2, #0]
	}
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdb0      	pop	{r4, r5, r7, pc}
 80017be:	bf00      	nop
 80017c0:	200003e4 	.word	0x200003e4
 80017c4:	20000044 	.word	0x20000044

080017c8 <clearLineAndBuffer>:

void clearLineAndBuffer(){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	// Upon first write print line and reset circular buffer to ensure no faulty misreads occurs.
	USBprintf("s","reconnected");
 80017cc:	4906      	ldr	r1, [pc, #24]	; (80017e8 <clearLineAndBuffer+0x20>)
 80017ce:	4807      	ldr	r0, [pc, #28]	; (80017ec <clearLineAndBuffer+0x24>)
 80017d0:	f007 fd0a 	bl	80091e8 <USBprintf>
	circular_buf_reset(cbuf);
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <clearLineAndBuffer+0x28>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f007 ff5f 	bl	800969c <circular_buf_reset>
	isFirstWrite=false;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <clearLineAndBuffer+0x2c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	0800ed20 	.word	0x0800ed20
 80017ec:	0800ed2c 	.word	0x0800ed2c
 80017f0:	20001090 	.word	0x20001090
 80017f4:	2000004c 	.word	0x2000004c

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fc:	f000 fdf4 	bl	80023e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001800:	f000 f868 	bl	80018d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001804:	f000 fa7c 	bl	8001d00 <MX_GPIO_Init>
  MX_DMA_Init();
 8001808:	f000 fa5a 	bl	8001cc0 <MX_DMA_Init>
  MX_ADC1_Init();
 800180c:	f000 f8cc 	bl	80019a8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001810:	f009 fd04 	bl	800b21c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001814:	f000 f960 	bl	8001ad8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001818:	f000 f98c 	bl	8001b34 <MX_TIM2_Init>
  MX_TIM5_Init();
 800181c:	f000 f9d6 	bl	8001bcc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, ADC_result, DMA_BUF_SIZE);
 8001820:	2206      	movs	r2, #6
 8001822:	4924      	ldr	r1, [pc, #144]	; (80018b4 <main+0xbc>)
 8001824:	4824      	ldr	r0, [pc, #144]	; (80018b8 <main+0xc0>)
 8001826:	f000 feed 	bl	8002604 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 800182a:	4824      	ldr	r0, [pc, #144]	; (80018bc <main+0xc4>)
 800182c:	f004 ff5a 	bl	80066e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001830:	4823      	ldr	r0, [pc, #140]	; (80018c0 <main+0xc8>)
 8001832:	f004 ff57 	bl	80066e4 <HAL_TIM_Base_Start_IT>

  // Turn on PWM on channels with default always off
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 8001836:	2100      	movs	r1, #0
 8001838:	4821      	ldr	r0, [pc, #132]	; (80018c0 <main+0xc8>)
 800183a:	f005 f805 	bl	8006848 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_2);
 800183e:	2104      	movs	r1, #4
 8001840:	481f      	ldr	r0, [pc, #124]	; (80018c0 <main+0xc8>)
 8001842:	f005 f801 	bl	8006848 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_3);
 8001846:	2108      	movs	r1, #8
 8001848:	481d      	ldr	r0, [pc, #116]	; (80018c0 <main+0xc8>)
 800184a:	f004 fffd 	bl	8006848 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_4);
 800184e:	210c      	movs	r1, #12
 8001850:	481b      	ldr	r0, [pc, #108]	; (80018c0 <main+0xc8>)
 8001852:	f004 fff9 	bl	8006848 <HAL_TIM_PWM_Start>


  circularBufferInit();
 8001856:	f009 fd11 	bl	800b27c <circularBufferInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		handleUserInputs();
 800185a:	f7ff feb9 	bl	80015d0 <handleUserInputs>

		// see if 100ms has passed
		if ((HAL_GetTick() - lastPrintTime) > tsUpload && isComPortOpen) {
 800185e:	f000 fe5d 	bl	800251c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <main+0xcc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <main+0xd0>)
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	4293      	cmp	r3, r2
 8001870:	d910      	bls.n	8001894 <main+0x9c>
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <main+0xd4>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00c      	beq.n	8001894 <main+0x9c>
			lastPrintTime = HAL_GetTick();
 800187a:	f000 fe4f 	bl	800251c <HAL_GetTick>
 800187e:	4603      	mov	r3, r0
 8001880:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <main+0xcc>)
 8001882:	6013      	str	r3, [r2, #0]
			// Upon first write print line and reset circular buffer to ensure no faulty misreads occurs.
			if (isFirstWrite){
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <main+0xd8>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <main+0x98>
				clearLineAndBuffer();
 800188c:	f7ff ff9c 	bl	80017c8 <clearLineAndBuffer>
			}

			printCurrentArray(); // calc and print currents ( 100ms check inside here.)
 8001890:	f7ff fc6c 	bl	800116c <printCurrentArray>

		}

		// Turn off pins if they have run for requested time
		autoOff();
 8001894:	f7ff fec6 	bl	8001624 <autoOff>
		checkButtonPress();
 8001898:	f7ff ff68 	bl	800176c <checkButtonPress>

		if (!isComPortOpen){
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <main+0xd4>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	f083 0301 	eor.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0d7      	beq.n	800185a <main+0x62>
			isFirstWrite=true;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <main+0xd8>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
		handleUserInputs();
 80018b0:	e7d3      	b.n	800185a <main+0x62>
 80018b2:	bf00      	nop
 80018b4:	20000684 	.word	0x20000684
 80018b8:	20000fdc 	.word	0x20000fdc
 80018bc:	20001094 	.word	0x20001094
 80018c0:	20000f94 	.word	0x20000f94
 80018c4:	200003e0 	.word	0x200003e0
 80018c8:	20000048 	.word	0x20000048
 80018cc:	20000459 	.word	0x20000459
 80018d0:	2000004c 	.word	0x2000004c

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	; 0x50
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2230      	movs	r2, #48	; 0x30
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00a fac0 	bl	800be68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <SystemClock_Config+0xcc>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <SystemClock_Config+0xcc>)
 8001902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001906:	6413      	str	r3, [r2, #64]	; 0x40
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <SystemClock_Config+0xcc>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <SystemClock_Config+0xd0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <SystemClock_Config+0xd0>)
 8001922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <SystemClock_Config+0xd0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001934:	2301      	movs	r3, #1
 8001936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193e:	2302      	movs	r3, #2
 8001940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001948:	2308      	movs	r3, #8
 800194a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800194c:	2348      	movs	r3, #72	; 0x48
 800194e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001950:	2302      	movs	r3, #2
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001954:	2303      	movs	r3, #3
 8001956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	4618      	mov	r0, r3
 800195e:	f004 f945 	bl	8005bec <HAL_RCC_OscConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001968:	f000 fa68 	bl	8001e3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196c:	230f      	movs	r3, #15
 800196e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001970:	2301      	movs	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f004 fba8 	bl	80060dc <HAL_RCC_ClockConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001992:	f000 fa53 	bl	8001e3c <Error_Handler>
  }
}
 8001996:	bf00      	nop
 8001998:	3750      	adds	r7, #80	; 0x50
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40007000 	.word	0x40007000

080019a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ae:	463b      	mov	r3, r7
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019ba:	4b45      	ldr	r3, [pc, #276]	; (8001ad0 <MX_ADC1_Init+0x128>)
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <MX_ADC1_Init+0x12c>)
 80019be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <MX_ADC1_Init+0x128>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019c6:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <MX_ADC1_Init+0x128>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <MX_ADC1_Init+0x128>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019d2:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <MX_ADC1_Init+0x128>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019d8:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <MX_ADC1_Init+0x128>)
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80019e0:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <MX_ADC1_Init+0x128>)
 80019e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80019e8:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <MX_ADC1_Init+0x128>)
 80019ea:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <MX_ADC1_Init+0x128>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80019f6:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <MX_ADC1_Init+0x128>)
 80019f8:	2206      	movs	r2, #6
 80019fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019fc:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <MX_ADC1_Init+0x128>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a04:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <MX_ADC1_Init+0x128>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a0a:	4831      	ldr	r0, [pc, #196]	; (8001ad0 <MX_ADC1_Init+0x128>)
 8001a0c:	f000 fdb6 	bl	800257c <HAL_ADC_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001a16:	f000 fa11 	bl	8001e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001a22:	2302      	movs	r3, #2
 8001a24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4829      	ldr	r0, [pc, #164]	; (8001ad0 <MX_ADC1_Init+0x128>)
 8001a2c:	f000 feee 	bl	800280c <HAL_ADC_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001a36:	f000 fa01 	bl	8001e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a42:	463b      	mov	r3, r7
 8001a44:	4619      	mov	r1, r3
 8001a46:	4822      	ldr	r0, [pc, #136]	; (8001ad0 <MX_ADC1_Init+0x128>)
 8001a48:	f000 fee0 	bl	800280c <HAL_ADC_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001a52:	f000 f9f3 	bl	8001e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a56:	2306      	movs	r3, #6
 8001a58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	481b      	ldr	r0, [pc, #108]	; (8001ad0 <MX_ADC1_Init+0x128>)
 8001a64:	f000 fed2 	bl	800280c <HAL_ADC_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001a6e:	f000 f9e5 	bl	8001e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a72:	2307      	movs	r3, #7
 8001a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001a76:	2304      	movs	r3, #4
 8001a78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <MX_ADC1_Init+0x128>)
 8001a80:	f000 fec4 	bl	800280c <HAL_ADC_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001a8a:	f000 f9d7 	bl	8001e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001a8e:	2308      	movs	r3, #8
 8001a90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001a92:	2305      	movs	r3, #5
 8001a94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a96:	463b      	mov	r3, r7
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <MX_ADC1_Init+0x128>)
 8001a9c:	f000 feb6 	bl	800280c <HAL_ADC_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001aa6:	f000 f9c9 	bl	8001e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001aaa:	2309      	movs	r3, #9
 8001aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001aae:	2306      	movs	r3, #6
 8001ab0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <MX_ADC1_Init+0x128>)
 8001ab8:	f000 fea8 	bl	800280c <HAL_ADC_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001ac2:	f000 f9bb 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000fdc 	.word	0x20000fdc
 8001ad4:	40012000 	.word	0x40012000

08001ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001ade:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <MX_I2C1_Init+0x54>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001ae4:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <MX_I2C1_Init+0x58>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001afa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001b16:	f001 ff51 	bl	80039bc <HAL_I2C_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b20:	f000 f98c 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000f40 	.word	0x20000f40
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	000186a0 	.word	0x000186a0

08001b34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	463b      	mov	r3, r7
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <MX_TIM2_Init+0x94>)
 8001b52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 399;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_TIM2_Init+0x94>)
 8001b5a:	f240 128f 	movw	r2, #399	; 0x18f
 8001b5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <MX_TIM2_Init+0x94>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_TIM2_Init+0x94>)
 8001b68:	2209      	movs	r2, #9
 8001b6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_TIM2_Init+0x94>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <MX_TIM2_Init+0x94>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b78:	4813      	ldr	r0, [pc, #76]	; (8001bc8 <MX_TIM2_Init+0x94>)
 8001b7a:	f004 fd63 	bl	8006644 <HAL_TIM_Base_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b84:	f000 f95a 	bl	8001e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	4619      	mov	r1, r3
 8001b94:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <MX_TIM2_Init+0x94>)
 8001b96:	f005 f8cd 	bl	8006d34 <HAL_TIM_ConfigClockSource>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ba0:	f000 f94c 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bac:	463b      	mov	r3, r7
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_TIM2_Init+0x94>)
 8001bb2:	f005 fc81 	bl	80074b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bbc:	f000 f93e 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20001094 	.word	0x20001094

08001bcc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd2:	f107 0320 	add.w	r3, r7, #32
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]
 8001bea:	615a      	str	r2, [r3, #20]
 8001bec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bee:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001bf0:	4a32      	ldr	r2, [pc, #200]	; (8001cbc <MX_TIM5_Init+0xf0>)
 8001bf2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001c02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c14:	4828      	ldr	r0, [pc, #160]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001c16:	f004 fdc7 	bl	80067a8 <HAL_TIM_PWM_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001c20:	f000 f90c 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	4619      	mov	r1, r3
 8001c32:	4821      	ldr	r0, [pc, #132]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001c34:	f005 fc40 	bl	80074b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001c3e:	f000 f8fd 	bl	8001e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c42:	2360      	movs	r3, #96	; 0x60
 8001c44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	4817      	ldr	r0, [pc, #92]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001c5a:	f004 ffad 	bl	8006bb8 <HAL_TIM_PWM_ConfigChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001c64:	f000 f8ea 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001c70:	f004 ffa2 	bl	8006bb8 <HAL_TIM_PWM_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001c7a:	f000 f8df 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2208      	movs	r2, #8
 8001c82:	4619      	mov	r1, r3
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001c86:	f004 ff97 	bl	8006bb8 <HAL_TIM_PWM_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8001c90:	f000 f8d4 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	220c      	movs	r2, #12
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001c9c:	f004 ff8c 	bl	8006bb8 <HAL_TIM_PWM_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8001ca6:	f000 f8c9 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <MX_TIM5_Init+0xec>)
 8001cac:	f000 fa18 	bl	80020e0 <HAL_TIM_MspPostInit>

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000f94 	.word	0x20000f94
 8001cbc:	40000c00 	.word	0x40000c00

08001cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_DMA_Init+0x3c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <MX_DMA_Init+0x3c>)
 8001cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_DMA_Init+0x3c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2038      	movs	r0, #56	; 0x38
 8001ce8:	f001 f90b 	bl	8002f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cec:	2038      	movs	r0, #56	; 0x38
 8001cee:	f001 f924 	bl	8002f3a <HAL_NVIC_EnableIRQ>

}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a3e      	ldr	r2, [pc, #248]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a37      	ldr	r2, [pc, #220]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a30      	ldr	r2, [pc, #192]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <MX_GPIO_Init+0x118>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d8c:	4823      	ldr	r0, [pc, #140]	; (8001e1c <MX_GPIO_Init+0x11c>)
 8001d8e:	f001 fdfb 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CounterClkWise_Pin|ClkWise_Pin, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001d98:	4821      	ldr	r0, [pc, #132]	; (8001e20 <MX_GPIO_Init+0x120>)
 8001d9a:	f001 fdf5 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	4819      	ldr	r0, [pc, #100]	; (8001e1c <MX_GPIO_Init+0x11c>)
 8001db8:	f001 fc4a 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : Emerg_Off_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin
                           Btn_5_Pin Btn_6_Pin */
  GPIO_InitStruct.Pin = Emerg_Off_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin
 8001dbc:	f44f 734f 	mov.w	r3, #828	; 0x33c
 8001dc0:	617b      	str	r3, [r7, #20]
                          |Btn_5_Pin|Btn_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4813      	ldr	r0, [pc, #76]	; (8001e20 <MX_GPIO_Init+0x120>)
 8001dd2:	f001 fc3d 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : CounterClkWise_Pin ClkWise_Pin */
  GPIO_InitStruct.Pin = CounterClkWise_Pin|ClkWise_Pin;
 8001dd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4619      	mov	r1, r3
 8001dee:	480c      	ldr	r0, [pc, #48]	; (8001e20 <MX_GPIO_Init+0x120>)
 8001df0:	f001 fc2e 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_1_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin;
 8001df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_1_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4806      	ldr	r0, [pc, #24]	; (8001e24 <MX_GPIO_Init+0x124>)
 8001e0a:	f001 fc21 	bl	8003650 <HAL_GPIO_Init>

}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40020000 	.word	0x40020000

08001e28 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	/* This is called after the conversion is completed */
	popBuff();
 8001e30:	f7ff f8ea 	bl	8001008 <popBuff>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <Error_Handler+0x8>
	...

08001e48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_MspInit+0x4c>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <HAL_ADC_MspInit+0x110>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d171      	bne.n	8001f9e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_ADC_MspInit+0x114>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <HAL_ADC_MspInit+0x114>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_ADC_MspInit+0x114>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b34      	ldr	r3, [pc, #208]	; (8001fac <HAL_ADC_MspInit+0x114>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a33      	ldr	r2, [pc, #204]	; (8001fac <HAL_ADC_MspInit+0x114>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_ADC_MspInit+0x114>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_ADC_MspInit+0x114>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a2c      	ldr	r2, [pc, #176]	; (8001fac <HAL_ADC_MspInit+0x114>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_ADC_MspInit+0x114>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Hall_1_Pin|Hall_2_Pin|Hall_3_Pin|Hall_4_Pin;
 8001f0e:	23f0      	movs	r3, #240	; 0xf0
 8001f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f12:	2303      	movs	r3, #3
 8001f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4823      	ldr	r0, [pc, #140]	; (8001fb0 <HAL_ADC_MspInit+0x118>)
 8001f22:	f001 fb95 	bl	8003650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Hall_5_Pin|pres1_Pin;
 8001f26:	2303      	movs	r3, #3
 8001f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	481e      	ldr	r0, [pc, #120]	; (8001fb4 <HAL_ADC_MspInit+0x11c>)
 8001f3a:	f001 fb89 	bl	8003650 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f40:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <HAL_ADC_MspInit+0x124>)
 8001f42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f44:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f84:	f000 fff4 	bl	8002f70 <HAL_DMA_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001f8e:	f7ff ff55 	bl	8001e3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_ADC_MspInit+0x120>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40012000 	.word	0x40012000
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	20001024 	.word	0x20001024
 8001fbc:	40026410 	.word	0x40026410

08001fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_I2C_MspInit+0x84>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d12b      	bne.n	800203a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8001ffe:	23c0      	movs	r3, #192	; 0xc0
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002002:	2312      	movs	r3, #18
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002006:	2301      	movs	r3, #1
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800200e:	2304      	movs	r3, #4
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <HAL_I2C_MspInit+0x8c>)
 800201a:	f001 fb19 	bl	8003650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8002028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800203a:	bf00      	nop
 800203c:	3728      	adds	r7, #40	; 0x28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40005400 	.word	0x40005400
 8002048:	40023800 	.word	0x40023800
 800204c:	40020400 	.word	0x40020400

08002050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002060:	d115      	bne.n	800208e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <HAL_TIM_Base_MspInit+0x48>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <HAL_TIM_Base_MspInit+0x48>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_TIM_Base_MspInit+0x48>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	201c      	movs	r0, #28
 8002084:	f000 ff3d 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002088:	201c      	movs	r0, #28
 800208a:	f000 ff56 	bl	8002f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800

0800209c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d10d      	bne.n	80020ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_TIM_PWM_MspInit+0x40>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_TIM_PWM_MspInit+0x40>)
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_TIM_PWM_MspInit+0x40>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40023800 	.word	0x40023800

080020e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a12      	ldr	r2, [pc, #72]	; (8002148 <HAL_TIM_MspPostInit+0x68>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d11d      	bne.n	800213e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_TIM_MspPostInit+0x6c>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_TIM_MspPostInit+0x6c>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_TIM_MspPostInit+0x6c>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800211e:	230f      	movs	r3, #15
 8002120:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800212e:	2302      	movs	r3, #2
 8002130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	4619      	mov	r1, r3
 8002138:	4805      	ldr	r0, [pc, #20]	; (8002150 <HAL_TIM_MspPostInit+0x70>)
 800213a:	f001 fa89 	bl	8003650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40000c00 	.word	0x40000c00
 800214c:	40023800 	.word	0x40023800
 8002150:	40020000 	.word	0x40020000

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <NMI_Handler+0x4>

0800215a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <HardFault_Handler+0x4>

08002160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <MemManage_Handler+0x4>

08002166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <UsageFault_Handler+0x4>

08002172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a0:	f000 f9a8 	bl	80024f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <TIM2_IRQHandler+0x10>)
 80021ae:	f004 fbfb 	bl	80069a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20001094 	.word	0x20001094

080021bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <DMA2_Stream0_IRQHandler+0x10>)
 80021c2:	f000 ffdb 	bl	800317c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20001024 	.word	0x20001024

080021d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <OTG_FS_IRQHandler+0x10>)
 80021d6:	f002 fcd6 	bl	8004b86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20002184 	.word	0x20002184

080021e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
	return 1;
 80021e8:	2301      	movs	r3, #1
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_kill>:

int _kill(int pid, int sig)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021fe:	f009 fde1 	bl	800bdc4 <__errno>
 8002202:	4603      	mov	r3, r0
 8002204:	2216      	movs	r2, #22
 8002206:	601a      	str	r2, [r3, #0]
	return -1;
 8002208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_exit>:

void _exit (int status)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800221c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ffe7 	bl	80021f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002226:	e7fe      	b.n	8002226 <_exit+0x12>

08002228 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e00a      	b.n	8002250 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800223a:	f3af 8000 	nop.w
 800223e:	4601      	mov	r1, r0
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60ba      	str	r2, [r7, #8]
 8002246:	b2ca      	uxtb	r2, r1
 8002248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3301      	adds	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	dbf0      	blt.n	800223a <_read+0x12>
	}

return len;
 8002258:	687b      	ldr	r3, [r7, #4]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e009      	b.n	8002288 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	60ba      	str	r2, [r7, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	dbf1      	blt.n	8002274 <_write+0x12>
	}
	return len;
 8002290:	687b      	ldr	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <_close>:

int _close(int file)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
	return -1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022c2:	605a      	str	r2, [r3, #4]
	return 0;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <_isatty>:

int _isatty(int file)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
	return 1;
 80022da:	2301      	movs	r3, #1
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
	return 0;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <_sbrk+0x5c>)
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <_sbrk+0x60>)
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <_sbrk+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <_sbrk+0x64>)
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <_sbrk+0x68>)
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <_sbrk+0x64>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	429a      	cmp	r2, r3
 8002332:	d207      	bcs.n	8002344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002334:	f009 fd46 	bl	800bdc4 <__errno>
 8002338:	4603      	mov	r3, r0
 800233a:	220c      	movs	r2, #12
 800233c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002342:	e009      	b.n	8002358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <_sbrk+0x64>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <_sbrk+0x64>)
 8002354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002356:	68fb      	ldr	r3, [r7, #12]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20010000 	.word	0x20010000
 8002364:	00000400 	.word	0x00000400
 8002368:	20000454 	.word	0x20000454
 800236c:	200025a0 	.word	0x200025a0

08002370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <SystemInit+0x20>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <SystemInit+0x20>)
 800237c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002398:	480d      	ldr	r0, [pc, #52]	; (80023d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800239a:	490e      	ldr	r1, [pc, #56]	; (80023d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a0:	e002      	b.n	80023a8 <LoopCopyDataInit>

080023a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a6:	3304      	adds	r3, #4

080023a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ac:	d3f9      	bcc.n	80023a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023b0:	4c0b      	ldr	r4, [pc, #44]	; (80023e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b4:	e001      	b.n	80023ba <LoopFillZerobss>

080023b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b8:	3204      	adds	r2, #4

080023ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023bc:	d3fb      	bcc.n	80023b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023be:	f7ff ffd7 	bl	8002370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c2:	f009 fd17 	bl	800bdf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c6:	f7ff fa17 	bl	80017f8 <main>
  bx  lr    
 80023ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d4:	200003bc 	.word	0x200003bc
  ldr r2, =_sidata
 80023d8:	0800f3c8 	.word	0x0800f3c8
  ldr r2, =_sbss
 80023dc:	200003c0 	.word	0x200003c0
  ldr r4, =_ebss
 80023e0:	2000259c 	.word	0x2000259c

080023e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC_IRQHandler>
	...

080023e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <HAL_Init+0x40>)
 80023f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_Init+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <HAL_Init+0x40>)
 80023fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_Init+0x40>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_Init+0x40>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002410:	2003      	movs	r0, #3
 8002412:	f000 fd6b 	bl	8002eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002416:	2000      	movs	r0, #0
 8002418:	f000 f83c 	bl	8002494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800241c:	f7ff fd14 	bl	8001e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023c00 	.word	0x40023c00

0800242c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_DeInit+0x54>)
 8002432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002436:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_DeInit+0x54>)
 800243a:	2200      	movs	r2, #0
 800243c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_DeInit+0x54>)
 8002440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002444:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_DeInit+0x54>)
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <HAL_DeInit+0x54>)
 800244e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002452:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_DeInit+0x54>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_DeInit+0x54>)
 800245c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002460:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_DeInit+0x54>)
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_DeInit+0x54>)
 800246a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800246e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_DeInit+0x54>)
 8002472:	2200      	movs	r2, #0
 8002474:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002476:	f000 f805 	bl	8002484 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800

08002484 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x54>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_InitTick+0x58>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fd4f 	bl	8002f56 <HAL_SYSTICK_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00e      	b.n	80024e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b0f      	cmp	r3, #15
 80024c6:	d80a      	bhi.n	80024de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c8:	2200      	movs	r2, #0
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024d0:	f000 fd17 	bl	8002f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <HAL_InitTick+0x5c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000060 	.word	0x20000060
 80024ec:	20000068 	.word	0x20000068
 80024f0:	20000064 	.word	0x20000064

080024f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x20>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x24>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4413      	add	r3, r2
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <HAL_IncTick+0x24>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000068 	.word	0x20000068
 8002518:	200010dc 	.word	0x200010dc

0800251c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return uwTick;
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <HAL_GetTick+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	200010dc 	.word	0x200010dc

08002534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff ffee 	bl	800251c <HAL_GetTick>
 8002540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254c:	d005      	beq.n	800255a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_Delay+0x44>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800255a:	bf00      	nop
 800255c:	f7ff ffde 	bl	800251c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	429a      	cmp	r2, r3
 800256a:	d8f7      	bhi.n	800255c <HAL_Delay+0x28>
  {
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000068 	.word	0x20000068

0800257c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e033      	b.n	80025fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff fc7c 	bl	8001e98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d118      	bne.n	80025ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025c2:	f023 0302 	bic.w	r3, r3, #2
 80025c6:	f043 0202 	orr.w	r2, r3, #2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fa3e 	bl	8002a50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	f043 0201 	orr.w	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ea:	e001      	b.n	80025f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_ADC_Start_DMA+0x1e>
 800261e:	2302      	movs	r3, #2
 8002620:	e0ce      	b.n	80027c0 <HAL_ADC_Start_DMA+0x1bc>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d018      	beq.n	800266a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002648:	4b5f      	ldr	r3, [pc, #380]	; (80027c8 <HAL_ADC_Start_DMA+0x1c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a5f      	ldr	r2, [pc, #380]	; (80027cc <HAL_ADC_Start_DMA+0x1c8>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0c9a      	lsrs	r2, r3, #18
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800265c:	e002      	b.n	8002664 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	3b01      	subs	r3, #1
 8002662:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f9      	bne.n	800265e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002678:	d107      	bne.n	800268a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002688:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	f040 8086 	bne.w	80027a6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d8:	d106      	bne.n	80026e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f023 0206 	bic.w	r2, r3, #6
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
 80026e6:	e002      	b.n	80026ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_ADC_Start_DMA+0x1cc>)
 80026f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	4a35      	ldr	r2, [pc, #212]	; (80027d4 <HAL_ADC_Start_DMA+0x1d0>)
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	4a34      	ldr	r2, [pc, #208]	; (80027d8 <HAL_ADC_Start_DMA+0x1d4>)
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	4a33      	ldr	r2, [pc, #204]	; (80027dc <HAL_ADC_Start_DMA+0x1d8>)
 8002710:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800271a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800272a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800273a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	334c      	adds	r3, #76	; 0x4c
 8002746:	4619      	mov	r1, r3
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f000 fcbe 	bl	80030cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10f      	bne.n	800277c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d129      	bne.n	80027be <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	e020      	b.n	80027be <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <HAL_ADC_Start_DMA+0x1dc>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d11b      	bne.n	80027be <HAL_ADC_Start_DMA+0x1ba>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d114      	bne.n	80027be <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e00b      	b.n	80027be <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0210 	orr.w	r2, r3, #16
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000060 	.word	0x20000060
 80027cc:	431bde83 	.word	0x431bde83
 80027d0:	40012300 	.word	0x40012300
 80027d4:	08002c49 	.word	0x08002c49
 80027d8:	08002d03 	.word	0x08002d03
 80027dc:	08002d1f 	.word	0x08002d1f
 80027e0:	40012000 	.word	0x40012000

080027e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1c>
 8002824:	2302      	movs	r3, #2
 8002826:	e105      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x228>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b09      	cmp	r3, #9
 8002836:	d925      	bls.n	8002884 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68d9      	ldr	r1, [r3, #12]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	3b1e      	subs	r3, #30
 800284e:	2207      	movs	r2, #7
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43da      	mvns	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	400a      	ands	r2, r1
 800285c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68d9      	ldr	r1, [r3, #12]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	4618      	mov	r0, r3
 8002870:	4603      	mov	r3, r0
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4403      	add	r3, r0
 8002876:	3b1e      	subs	r3, #30
 8002878:	409a      	lsls	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	e022      	b.n	80028ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6919      	ldr	r1, [r3, #16]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	2207      	movs	r2, #7
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	400a      	ands	r2, r1
 80028a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6919      	ldr	r1, [r3, #16]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4618      	mov	r0, r3
 80028ba:	4603      	mov	r3, r0
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4403      	add	r3, r0
 80028c0:	409a      	lsls	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b06      	cmp	r3, #6
 80028d0:	d824      	bhi.n	800291c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	3b05      	subs	r3, #5
 80028e4:	221f      	movs	r2, #31
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43da      	mvns	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	400a      	ands	r2, r1
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4618      	mov	r0, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	3b05      	subs	r3, #5
 800290e:	fa00 f203 	lsl.w	r2, r0, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	635a      	str	r2, [r3, #52]	; 0x34
 800291a:	e04c      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b0c      	cmp	r3, #12
 8002922:	d824      	bhi.n	800296e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b23      	subs	r3, #35	; 0x23
 8002936:	221f      	movs	r2, #31
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43da      	mvns	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	400a      	ands	r2, r1
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	4618      	mov	r0, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	3b23      	subs	r3, #35	; 0x23
 8002960:	fa00 f203 	lsl.w	r2, r0, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
 800296c:	e023      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	3b41      	subs	r3, #65	; 0x41
 8002980:	221f      	movs	r2, #31
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	400a      	ands	r2, r1
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	4618      	mov	r0, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	3b41      	subs	r3, #65	; 0x41
 80029aa:	fa00 f203 	lsl.w	r2, r0, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029b6:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <HAL_ADC_ConfigChannel+0x234>)
 80029b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <HAL_ADC_ConfigChannel+0x238>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d109      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x1cc>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b12      	cmp	r3, #18
 80029ca:	d105      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_ADC_ConfigChannel+0x238>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d123      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x21e>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d003      	beq.n	80029f2 <HAL_ADC_ConfigChannel+0x1e6>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b11      	cmp	r3, #17
 80029f0:	d11b      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d111      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <HAL_ADC_ConfigChannel+0x23c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <HAL_ADC_ConfigChannel+0x240>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	0c9a      	lsrs	r2, r3, #18
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a1c:	e002      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f9      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40012300 	.word	0x40012300
 8002a44:	40012000 	.word	0x40012000
 8002a48:	20000060 	.word	0x20000060
 8002a4c:	431bde83 	.word	0x431bde83

08002a50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a58:	4b79      	ldr	r3, [pc, #484]	; (8002c40 <ADC_Init+0x1f0>)
 8002a5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	021a      	lsls	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	4a58      	ldr	r2, [pc, #352]	; (8002c44 <ADC_Init+0x1f4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d022      	beq.n	8002b2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002af6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6899      	ldr	r1, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6899      	ldr	r1, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	e00f      	b.n	8002b4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0202 	bic.w	r2, r2, #2
 8002b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6899      	ldr	r1, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7e1b      	ldrb	r3, [r3, #24]
 8002b68:	005a      	lsls	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01b      	beq.n	8002bb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6859      	ldr	r1, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	035a      	lsls	r2, r3, #13
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	e007      	b.n	8002bc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	051a      	lsls	r2, r3, #20
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c06:	025a      	lsls	r2, r3, #9
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6899      	ldr	r1, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	029a      	lsls	r2, r3, #10
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40012300 	.word	0x40012300
 8002c44:	0f000001 	.word	0x0f000001

08002c48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d13c      	bne.n	8002cdc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d12b      	bne.n	8002cd4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d127      	bne.n	8002cd4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d119      	bne.n	8002cd4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0220 	bic.w	r2, r2, #32
 8002cae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f043 0201 	orr.w	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff f8a7 	bl	8001e28 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cda:	e00e      	b.n	8002cfa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7ff fd85 	bl	80027f8 <HAL_ADC_ErrorCallback>
}
 8002cee:	e004      	b.n	8002cfa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f7ff fd67 	bl	80027e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2240      	movs	r2, #64	; 0x40
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f043 0204 	orr.w	r2, r3, #4
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7ff fd5a 	bl	80027f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7e:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	60d3      	str	r3, [r2, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <__NVIC_GetPriorityGrouping+0x18>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	f003 0307 	and.w	r3, r3, #7
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db0b      	blt.n	8002dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4907      	ldr	r1, [pc, #28]	; (8002de8 <__NVIC_EnableIRQ+0x38>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000e100 	.word	0xe000e100

08002dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db0a      	blt.n	8002e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	490c      	ldr	r1, [pc, #48]	; (8002e38 <__NVIC_SetPriority+0x4c>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e14:	e00a      	b.n	8002e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4908      	ldr	r1, [pc, #32]	; (8002e3c <__NVIC_SetPriority+0x50>)
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3b04      	subs	r3, #4
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	440b      	add	r3, r1
 8002e2a:	761a      	strb	r2, [r3, #24]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000e100 	.word	0xe000e100
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f1c3 0307 	rsb	r3, r3, #7
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	bf28      	it	cs
 8002e5e:	2304      	movcs	r3, #4
 8002e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d902      	bls.n	8002e70 <NVIC_EncodePriority+0x30>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3b03      	subs	r3, #3
 8002e6e:	e000      	b.n	8002e72 <NVIC_EncodePriority+0x32>
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	401a      	ands	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	4313      	orrs	r3, r2
         );
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb8:	d301      	bcc.n	8002ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00f      	b.n	8002ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <SysTick_Config+0x40>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ecc:	f7ff ff8e 	bl	8002dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000e010 	.word	0xe000e010

08002eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff29 	bl	8002d4c <__NVIC_SetPriorityGrouping>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f14:	f7ff ff3e 	bl	8002d94 <__NVIC_GetPriorityGrouping>
 8002f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f7ff ff8e 	bl	8002e40 <NVIC_EncodePriority>
 8002f24:	4602      	mov	r2, r0
 8002f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff5d 	bl	8002dec <__NVIC_SetPriority>
}
 8002f32:	bf00      	nop
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff31 	bl	8002db0 <__NVIC_EnableIRQ>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ffa2 	bl	8002ea8 <SysTick_Config>
 8002f64:	4603      	mov	r3, r0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7ff face 	bl	800251c <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e099      	b.n	80030c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fac:	e00f      	b.n	8002fce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fae:	f7ff fab5 	bl	800251c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d908      	bls.n	8002fce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e078      	b.n	80030c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e8      	bne.n	8002fae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <HAL_DMA_Init+0x158>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	2b04      	cmp	r3, #4
 8003026:	d107      	bne.n	8003038 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	4313      	orrs	r3, r2
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f023 0307 	bic.w	r3, r3, #7
 800304e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b04      	cmp	r3, #4
 8003060:	d117      	bne.n	8003092 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00e      	beq.n	8003092 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fa6f 	bl	8003558 <DMA_CheckFifoParam>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2240      	movs	r2, #64	; 0x40
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800308e:	2301      	movs	r3, #1
 8003090:	e016      	b.n	80030c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fa26 	bl	80034ec <DMA_CalcBaseAndBitshift>
 80030a0:	4603      	mov	r3, r0
 80030a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	223f      	movs	r2, #63	; 0x3f
 80030aa:	409a      	lsls	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	f010803f 	.word	0xf010803f

080030cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_DMA_Start_IT+0x26>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e040      	b.n	8003174 <HAL_DMA_Start_IT+0xa8>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d12f      	bne.n	8003166 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f9b8 	bl	8003490 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003124:	223f      	movs	r2, #63	; 0x3f
 8003126:	409a      	lsls	r2, r3
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0216 	orr.w	r2, r2, #22
 800313a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0208 	orr.w	r2, r2, #8
 8003152:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	e005      	b.n	8003172 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800316e:	2302      	movs	r3, #2
 8003170:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003172:	7dfb      	ldrb	r3, [r7, #23]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003188:	4b92      	ldr	r3, [pc, #584]	; (80033d4 <HAL_DMA_IRQHandler+0x258>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a92      	ldr	r2, [pc, #584]	; (80033d8 <HAL_DMA_IRQHandler+0x25c>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	0a9b      	lsrs	r3, r3, #10
 8003194:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	2208      	movs	r2, #8
 80031a8:	409a      	lsls	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01a      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0204 	bic.w	r2, r2, #4
 80031ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	2208      	movs	r2, #8
 80031d6:	409a      	lsls	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	f043 0201 	orr.w	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	2201      	movs	r2, #1
 80031ee:	409a      	lsls	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d012      	beq.n	800321e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	2201      	movs	r2, #1
 800320c:	409a      	lsls	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	f043 0202 	orr.w	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	2204      	movs	r2, #4
 8003224:	409a      	lsls	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d012      	beq.n	8003254 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	2204      	movs	r2, #4
 8003242:	409a      	lsls	r2, r3
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	f043 0204 	orr.w	r2, r3, #4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	2210      	movs	r2, #16
 800325a:	409a      	lsls	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d043      	beq.n	80032ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d03c      	beq.n	80032ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	2210      	movs	r2, #16
 8003278:	409a      	lsls	r2, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d018      	beq.n	80032be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d108      	bne.n	80032ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d024      	beq.n	80032ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
 80032aa:	e01f      	b.n	80032ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01b      	beq.n	80032ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
 80032bc:	e016      	b.n	80032ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0208 	bic.w	r2, r2, #8
 80032da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	2220      	movs	r2, #32
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 808e 	beq.w	800341a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8086 	beq.w	800341a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	2220      	movs	r2, #32
 8003314:	409a      	lsls	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b05      	cmp	r3, #5
 8003324:	d136      	bne.n	8003394 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0216 	bic.w	r2, r2, #22
 8003334:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003344:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d103      	bne.n	8003356 <HAL_DMA_IRQHandler+0x1da>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0208 	bic.w	r2, r2, #8
 8003364:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	223f      	movs	r2, #63	; 0x3f
 800336c:	409a      	lsls	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003386:	2b00      	cmp	r3, #0
 8003388:	d07d      	beq.n	8003486 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
        }
        return;
 8003392:	e078      	b.n	8003486 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01c      	beq.n	80033dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d108      	bne.n	80033c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d030      	beq.n	800341a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
 80033c0:	e02b      	b.n	800341a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d027      	beq.n	800341a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
 80033d2:	e022      	b.n	800341a <HAL_DMA_IRQHandler+0x29e>
 80033d4:	20000060 	.word	0x20000060
 80033d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0210 	bic.w	r2, r2, #16
 80033f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	2b00      	cmp	r3, #0
 8003420:	d032      	beq.n	8003488 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d022      	beq.n	8003474 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2205      	movs	r2, #5
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0201 	bic.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3301      	adds	r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	429a      	cmp	r2, r3
 8003450:	d307      	bcc.n	8003462 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f2      	bne.n	8003446 <HAL_DMA_IRQHandler+0x2ca>
 8003460:	e000      	b.n	8003464 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003462:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
 8003484:	e000      	b.n	8003488 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003486:	bf00      	nop
    }
  }
}
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop

08003490 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d108      	bne.n	80034d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034ce:	e007      	b.n	80034e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	3b10      	subs	r3, #16
 80034fc:	4a14      	ldr	r2, [pc, #80]	; (8003550 <DMA_CalcBaseAndBitshift+0x64>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <DMA_CalcBaseAndBitshift+0x68>)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4413      	add	r3, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b03      	cmp	r3, #3
 8003518:	d909      	bls.n	800352e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	1d1a      	adds	r2, r3, #4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	659a      	str	r2, [r3, #88]	; 0x58
 800352c:	e007      	b.n	800353e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003536:	f023 0303 	bic.w	r3, r3, #3
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	aaaaaaab 	.word	0xaaaaaaab
 8003554:	0800eee4 	.word	0x0800eee4

08003558 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d11f      	bne.n	80035b2 <DMA_CheckFifoParam+0x5a>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d856      	bhi.n	8003626 <DMA_CheckFifoParam+0xce>
 8003578:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <DMA_CheckFifoParam+0x28>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	08003591 	.word	0x08003591
 8003584:	080035a3 	.word	0x080035a3
 8003588:	08003591 	.word	0x08003591
 800358c:	08003627 	.word	0x08003627
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d046      	beq.n	800362a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a0:	e043      	b.n	800362a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035aa:	d140      	bne.n	800362e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b0:	e03d      	b.n	800362e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ba:	d121      	bne.n	8003600 <DMA_CheckFifoParam+0xa8>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d837      	bhi.n	8003632 <DMA_CheckFifoParam+0xda>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <DMA_CheckFifoParam+0x70>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080035df 	.word	0x080035df
 80035d0:	080035d9 	.word	0x080035d9
 80035d4:	080035f1 	.word	0x080035f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
      break;
 80035dc:	e030      	b.n	8003640 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d025      	beq.n	8003636 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ee:	e022      	b.n	8003636 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035f8:	d11f      	bne.n	800363a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035fe:	e01c      	b.n	800363a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d903      	bls.n	800360e <DMA_CheckFifoParam+0xb6>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d003      	beq.n	8003614 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800360c:	e018      	b.n	8003640 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
      break;
 8003612:	e015      	b.n	8003640 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00e      	beq.n	800363e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      break;
 8003624:	e00b      	b.n	800363e <DMA_CheckFifoParam+0xe6>
      break;
 8003626:	bf00      	nop
 8003628:	e00a      	b.n	8003640 <DMA_CheckFifoParam+0xe8>
      break;
 800362a:	bf00      	nop
 800362c:	e008      	b.n	8003640 <DMA_CheckFifoParam+0xe8>
      break;
 800362e:	bf00      	nop
 8003630:	e006      	b.n	8003640 <DMA_CheckFifoParam+0xe8>
      break;
 8003632:	bf00      	nop
 8003634:	e004      	b.n	8003640 <DMA_CheckFifoParam+0xe8>
      break;
 8003636:	bf00      	nop
 8003638:	e002      	b.n	8003640 <DMA_CheckFifoParam+0xe8>
      break;   
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <DMA_CheckFifoParam+0xe8>
      break;
 800363e:	bf00      	nop
    }
  } 
  
  return status; 
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop

08003650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	e159      	b.n	8003920 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800366c:	2201      	movs	r2, #1
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	429a      	cmp	r2, r3
 8003686:	f040 8148 	bne.w	800391a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d005      	beq.n	80036a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d130      	bne.n	8003704 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2203      	movs	r2, #3
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d8:	2201      	movs	r2, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 0201 	and.w	r2, r3, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b03      	cmp	r3, #3
 800370e:	d017      	beq.n	8003740 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	2203      	movs	r2, #3
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d123      	bne.n	8003794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	08da      	lsrs	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3208      	adds	r2, #8
 8003754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	220f      	movs	r2, #15
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	08da      	lsrs	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3208      	adds	r2, #8
 800378e:	69b9      	ldr	r1, [r7, #24]
 8003790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0203 	and.w	r2, r3, #3
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80a2 	beq.w	800391a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b57      	ldr	r3, [pc, #348]	; (8003938 <HAL_GPIO_Init+0x2e8>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	4a56      	ldr	r2, [pc, #344]	; (8003938 <HAL_GPIO_Init+0x2e8>)
 80037e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e4:	6453      	str	r3, [r2, #68]	; 0x44
 80037e6:	4b54      	ldr	r3, [pc, #336]	; (8003938 <HAL_GPIO_Init+0x2e8>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037f2:	4a52      	ldr	r2, [pc, #328]	; (800393c <HAL_GPIO_Init+0x2ec>)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	3302      	adds	r3, #2
 80037fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	220f      	movs	r2, #15
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a49      	ldr	r2, [pc, #292]	; (8003940 <HAL_GPIO_Init+0x2f0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d019      	beq.n	8003852 <HAL_GPIO_Init+0x202>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a48      	ldr	r2, [pc, #288]	; (8003944 <HAL_GPIO_Init+0x2f4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_GPIO_Init+0x1fe>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a47      	ldr	r2, [pc, #284]	; (8003948 <HAL_GPIO_Init+0x2f8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00d      	beq.n	800384a <HAL_GPIO_Init+0x1fa>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a46      	ldr	r2, [pc, #280]	; (800394c <HAL_GPIO_Init+0x2fc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d007      	beq.n	8003846 <HAL_GPIO_Init+0x1f6>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a45      	ldr	r2, [pc, #276]	; (8003950 <HAL_GPIO_Init+0x300>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_GPIO_Init+0x1f2>
 800383e:	2304      	movs	r3, #4
 8003840:	e008      	b.n	8003854 <HAL_GPIO_Init+0x204>
 8003842:	2307      	movs	r3, #7
 8003844:	e006      	b.n	8003854 <HAL_GPIO_Init+0x204>
 8003846:	2303      	movs	r3, #3
 8003848:	e004      	b.n	8003854 <HAL_GPIO_Init+0x204>
 800384a:	2302      	movs	r3, #2
 800384c:	e002      	b.n	8003854 <HAL_GPIO_Init+0x204>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_GPIO_Init+0x204>
 8003852:	2300      	movs	r3, #0
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	f002 0203 	and.w	r2, r2, #3
 800385a:	0092      	lsls	r2, r2, #2
 800385c:	4093      	lsls	r3, r2
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003864:	4935      	ldr	r1, [pc, #212]	; (800393c <HAL_GPIO_Init+0x2ec>)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	3302      	adds	r3, #2
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003872:	4b38      	ldr	r3, [pc, #224]	; (8003954 <HAL_GPIO_Init+0x304>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003896:	4a2f      	ldr	r2, [pc, #188]	; (8003954 <HAL_GPIO_Init+0x304>)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800389c:	4b2d      	ldr	r3, [pc, #180]	; (8003954 <HAL_GPIO_Init+0x304>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038c0:	4a24      	ldr	r2, [pc, #144]	; (8003954 <HAL_GPIO_Init+0x304>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c6:	4b23      	ldr	r3, [pc, #140]	; (8003954 <HAL_GPIO_Init+0x304>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ea:	4a1a      	ldr	r2, [pc, #104]	; (8003954 <HAL_GPIO_Init+0x304>)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f0:	4b18      	ldr	r3, [pc, #96]	; (8003954 <HAL_GPIO_Init+0x304>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003914:	4a0f      	ldr	r2, [pc, #60]	; (8003954 <HAL_GPIO_Init+0x304>)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3301      	adds	r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b0f      	cmp	r3, #15
 8003924:	f67f aea2 	bls.w	800366c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3724      	adds	r7, #36	; 0x24
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800
 800393c:	40013800 	.word	0x40013800
 8003940:	40020000 	.word	0x40020000
 8003944:	40020400 	.word	0x40020400
 8003948:	40020800 	.word	0x40020800
 800394c:	40020c00 	.word	0x40020c00
 8003950:	40021000 	.word	0x40021000
 8003954:	40013c00 	.word	0x40013c00

08003958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
 8003974:	e001      	b.n	800397a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
 8003994:	4613      	mov	r3, r2
 8003996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003998:	787b      	ldrb	r3, [r7, #1]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a4:	e003      	b.n	80039ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	041a      	lsls	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	619a      	str	r2, [r3, #24]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e12b      	b.n	8003c26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fe faec 	bl	8001fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2224      	movs	r2, #36	; 0x24
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a20:	f002 fd2e 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 8003a24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4a81      	ldr	r2, [pc, #516]	; (8003c30 <HAL_I2C_Init+0x274>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d807      	bhi.n	8003a40 <HAL_I2C_Init+0x84>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a80      	ldr	r2, [pc, #512]	; (8003c34 <HAL_I2C_Init+0x278>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	bf94      	ite	ls
 8003a38:	2301      	movls	r3, #1
 8003a3a:	2300      	movhi	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e006      	b.n	8003a4e <HAL_I2C_Init+0x92>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a7d      	ldr	r2, [pc, #500]	; (8003c38 <HAL_I2C_Init+0x27c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	bf94      	ite	ls
 8003a48:	2301      	movls	r3, #1
 8003a4a:	2300      	movhi	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0e7      	b.n	8003c26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a78      	ldr	r2, [pc, #480]	; (8003c3c <HAL_I2C_Init+0x280>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	0c9b      	lsrs	r3, r3, #18
 8003a60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a6a      	ldr	r2, [pc, #424]	; (8003c30 <HAL_I2C_Init+0x274>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d802      	bhi.n	8003a90 <HAL_I2C_Init+0xd4>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	e009      	b.n	8003aa4 <HAL_I2C_Init+0xe8>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a96:	fb02 f303 	mul.w	r3, r2, r3
 8003a9a:	4a69      	ldr	r2, [pc, #420]	; (8003c40 <HAL_I2C_Init+0x284>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ab6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	495c      	ldr	r1, [pc, #368]	; (8003c30 <HAL_I2C_Init+0x274>)
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	d819      	bhi.n	8003af8 <HAL_I2C_Init+0x13c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1e59      	subs	r1, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad2:	1c59      	adds	r1, r3, #1
 8003ad4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ad8:	400b      	ands	r3, r1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_I2C_Init+0x138>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1e59      	subs	r1, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aec:	3301      	adds	r3, #1
 8003aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af2:	e051      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003af4:	2304      	movs	r3, #4
 8003af6:	e04f      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d111      	bne.n	8003b24 <HAL_I2C_Init+0x168>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	440b      	add	r3, r1
 8003b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e012      	b.n	8003b4a <HAL_I2C_Init+0x18e>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e58      	subs	r0, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Init+0x196>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e022      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10e      	bne.n	8003b78 <HAL_I2C_Init+0x1bc>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1e58      	subs	r0, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	440b      	add	r3, r1
 8003b68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b76:	e00f      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e58      	subs	r0, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	0099      	lsls	r1, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	6809      	ldr	r1, [r1, #0]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6911      	ldr	r1, [r2, #16]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	000186a0 	.word	0x000186a0
 8003c34:	001e847f 	.word	0x001e847f
 8003c38:	003d08ff 	.word	0x003d08ff
 8003c3c:	431bde83 	.word	0x431bde83
 8003c40:	10624dd3 	.word	0x10624dd3

08003c44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	460b      	mov	r3, r1
 8003c52:	817b      	strh	r3, [r7, #10]
 8003c54:	4613      	mov	r3, r2
 8003c56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c58:	f7fe fc60 	bl	800251c <HAL_GetTick>
 8003c5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	f040 80e0 	bne.w	8003e2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2319      	movs	r3, #25
 8003c72:	2201      	movs	r2, #1
 8003c74:	4970      	ldr	r1, [pc, #448]	; (8003e38 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fc58 	bl	800452c <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0d3      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2C_Master_Transmit+0x50>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e0cc      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d007      	beq.n	8003cba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2221      	movs	r2, #33	; 0x21
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	893a      	ldrh	r2, [r7, #8]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a50      	ldr	r2, [pc, #320]	; (8003e3c <HAL_I2C_Master_Transmit+0x1f8>)
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cfc:	8979      	ldrh	r1, [r7, #10]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fac2 	bl	800428c <I2C_MasterRequestWrite>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e08d      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d28:	e066      	b.n	8003df8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	6a39      	ldr	r1, [r7, #32]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fcd2 	bl	80046d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d107      	bne.n	8003d52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e06b      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	781a      	ldrb	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d11b      	bne.n	8003dcc <HAL_I2C_Master_Transmit+0x188>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d017      	beq.n	8003dcc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	6a39      	ldr	r1, [r7, #32]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fcc2 	bl	800475a <I2C_WaitOnBTFFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00d      	beq.n	8003df8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d107      	bne.n	8003df4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e01a      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d194      	bne.n	8003d2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e000      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	00100002 	.word	0x00100002
 8003e3c:	ffff0000 	.word	0xffff0000

08003e40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08c      	sub	sp, #48	; 0x30
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	817b      	strh	r3, [r7, #10]
 8003e50:	4613      	mov	r3, r2
 8003e52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e54:	f7fe fb62 	bl	800251c <HAL_GetTick>
 8003e58:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	f040 820b 	bne.w	800427e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2319      	movs	r3, #25
 8003e6e:	2201      	movs	r2, #1
 8003e70:	497c      	ldr	r1, [pc, #496]	; (8004064 <HAL_I2C_Master_Receive+0x224>)
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fb5a 	bl	800452c <I2C_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e1fe      	b.n	8004280 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_I2C_Master_Receive+0x50>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e1f7      	b.n	8004280 <HAL_I2C_Master_Receive+0x440>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d007      	beq.n	8003eb6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2222      	movs	r2, #34	; 0x22
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	893a      	ldrh	r2, [r7, #8]
 8003ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a5c      	ldr	r2, [pc, #368]	; (8004068 <HAL_I2C_Master_Receive+0x228>)
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ef8:	8979      	ldrh	r1, [r7, #10]
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fa46 	bl	8004390 <I2C_MasterRequestRead>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e1b8      	b.n	8004280 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d113      	bne.n	8003f3e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	623b      	str	r3, [r7, #32]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	623b      	str	r3, [r7, #32]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e18c      	b.n	8004258 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d11b      	bne.n	8003f7e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e16c      	b.n	8004258 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d11b      	bne.n	8003fbe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	e14c      	b.n	8004258 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fe4:	e138      	b.n	8004258 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	f200 80f1 	bhi.w	80041d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d123      	bne.n	8004040 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fbed 	bl	80047dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e139      	b.n	8004280 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800403e:	e10b      	b.n	8004258 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004044:	2b02      	cmp	r3, #2
 8004046:	d14e      	bne.n	80040e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	2200      	movs	r2, #0
 8004050:	4906      	ldr	r1, [pc, #24]	; (800406c <HAL_I2C_Master_Receive+0x22c>)
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fa6a 	bl	800452c <I2C_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d008      	beq.n	8004070 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e10e      	b.n	8004280 <HAL_I2C_Master_Receive+0x440>
 8004062:	bf00      	nop
 8004064:	00100002 	.word	0x00100002
 8004068:	ffff0000 	.word	0xffff0000
 800406c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040e4:	e0b8      	b.n	8004258 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	2200      	movs	r2, #0
 80040ee:	4966      	ldr	r1, [pc, #408]	; (8004288 <HAL_I2C_Master_Receive+0x448>)
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fa1b 	bl	800452c <I2C_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0bf      	b.n	8004280 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	2200      	movs	r2, #0
 800414a:	494f      	ldr	r1, [pc, #316]	; (8004288 <HAL_I2C_Master_Receive+0x448>)
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f9ed 	bl	800452c <I2C_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e091      	b.n	8004280 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041d0:	e042      	b.n	8004258 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fb00 	bl	80047dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e04c      	b.n	8004280 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b04      	cmp	r3, #4
 8004224:	d118      	bne.n	8004258 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	f47f aec2 	bne.w	8003fe6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800427e:	2302      	movs	r3, #2
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3728      	adds	r7, #40	; 0x28
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	00010004 	.word	0x00010004

0800428c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	460b      	mov	r3, r1
 800429a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d006      	beq.n	80042b6 <I2C_MasterRequestWrite+0x2a>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d003      	beq.n	80042b6 <I2C_MasterRequestWrite+0x2a>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042b4:	d108      	bne.n	80042c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e00b      	b.n	80042e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	2b12      	cmp	r3, #18
 80042ce:	d107      	bne.n	80042e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f91d 	bl	800452c <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004306:	d103      	bne.n	8004310 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e035      	b.n	8004380 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431c:	d108      	bne.n	8004330 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800432c:	611a      	str	r2, [r3, #16]
 800432e:	e01b      	b.n	8004368 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004330:	897b      	ldrh	r3, [r7, #10]
 8004332:	11db      	asrs	r3, r3, #7
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 0306 	and.w	r3, r3, #6
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f063 030f 	orn	r3, r3, #15
 8004340:	b2da      	uxtb	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	490e      	ldr	r1, [pc, #56]	; (8004388 <I2C_MasterRequestWrite+0xfc>)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f943 	bl	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e010      	b.n	8004380 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800435e:	897b      	ldrh	r3, [r7, #10]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4907      	ldr	r1, [pc, #28]	; (800438c <I2C_MasterRequestWrite+0x100>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f933 	bl	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	00010008 	.word	0x00010008
 800438c:	00010002 	.word	0x00010002

08004390 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	460b      	mov	r3, r1
 800439e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d006      	beq.n	80043ca <I2C_MasterRequestRead+0x3a>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d003      	beq.n	80043ca <I2C_MasterRequestRead+0x3a>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043c8:	d108      	bne.n	80043dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	e00b      	b.n	80043f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	2b11      	cmp	r3, #17
 80043e2:	d107      	bne.n	80043f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f893 	bl	800452c <I2C_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00d      	beq.n	8004428 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441a:	d103      	bne.n	8004424 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e079      	b.n	800451c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004430:	d108      	bne.n	8004444 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004432:	897b      	ldrh	r3, [r7, #10]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	b2da      	uxtb	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	611a      	str	r2, [r3, #16]
 8004442:	e05f      	b.n	8004504 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004444:	897b      	ldrh	r3, [r7, #10]
 8004446:	11db      	asrs	r3, r3, #7
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f003 0306 	and.w	r3, r3, #6
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f063 030f 	orn	r3, r3, #15
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	4930      	ldr	r1, [pc, #192]	; (8004524 <I2C_MasterRequestRead+0x194>)
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f8b9 	bl	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e054      	b.n	800451c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004472:	897b      	ldrh	r3, [r7, #10]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4929      	ldr	r1, [pc, #164]	; (8004528 <I2C_MasterRequestRead+0x198>)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f8a9 	bl	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e044      	b.n	800451c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f831 	bl	800452c <I2C_WaitOnFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00d      	beq.n	80044ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044de:	d103      	bne.n	80044e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e017      	b.n	800451c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80044ec:	897b      	ldrh	r3, [r7, #10]
 80044ee:	11db      	asrs	r3, r3, #7
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f003 0306 	and.w	r3, r3, #6
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f063 030e 	orn	r3, r3, #14
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	4907      	ldr	r1, [pc, #28]	; (8004528 <I2C_MasterRequestRead+0x198>)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f865 	bl	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	00010008 	.word	0x00010008
 8004528:	00010002 	.word	0x00010002

0800452c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800453c:	e025      	b.n	800458a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004544:	d021      	beq.n	800458a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7fd ffe9 	bl	800251c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d116      	bne.n	800458a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e023      	b.n	80045d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d10d      	bne.n	80045b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	43da      	mvns	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	e00c      	b.n	80045ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	43da      	mvns	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4013      	ands	r3, r2
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d0b6      	beq.n	800453e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
 80045e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045e8:	e051      	b.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f8:	d123      	bne.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004608:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004612:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0204 	orr.w	r2, r3, #4
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e046      	b.n	80046d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004648:	d021      	beq.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464a:	f7fd ff67 	bl	800251c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d302      	bcc.n	8004660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d116      	bne.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f043 0220 	orr.w	r2, r3, #32
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e020      	b.n	80046d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d10c      	bne.n	80046b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4013      	ands	r3, r2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bf14      	ite	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	2300      	moveq	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	e00b      	b.n	80046ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	43da      	mvns	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4013      	ands	r3, r2
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf14      	ite	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	2300      	moveq	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d18d      	bne.n	80045ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e4:	e02d      	b.n	8004742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f8ce 	bl	8004888 <I2C_IsAcknowledgeFailed>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e02d      	b.n	8004752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046fc:	d021      	beq.n	8004742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7fd ff0d 	bl	800251c <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d116      	bne.n	8004742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e007      	b.n	8004752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474c:	2b80      	cmp	r3, #128	; 0x80
 800474e:	d1ca      	bne.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004766:	e02d      	b.n	80047c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f88d 	bl	8004888 <I2C_IsAcknowledgeFailed>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e02d      	b.n	80047d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800477e:	d021      	beq.n	80047c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004780:	f7fd fecc 	bl	800251c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	429a      	cmp	r2, r3
 800478e:	d302      	bcc.n	8004796 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d116      	bne.n	80047c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f043 0220 	orr.w	r2, r3, #32
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e007      	b.n	80047d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d1ca      	bne.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047e8:	e042      	b.n	8004870 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d119      	bne.n	800482c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0210 	mvn.w	r2, #16
 8004800:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e029      	b.n	8004880 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482c:	f7fd fe76 	bl	800251c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d116      	bne.n	8004870 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e007      	b.n	8004880 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d1b5      	bne.n	80047ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489e:	d11b      	bne.n	80048d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	f043 0204 	orr.w	r2, r3, #4
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e8:	b08f      	sub	sp, #60	; 0x3c
 80048ea:	af0a      	add	r7, sp, #40	; 0x28
 80048ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e10f      	b.n	8004b18 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f006 ff2a 	bl	800b76c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2203      	movs	r2, #3
 800491c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f002 ff55 	bl	80077e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	687e      	ldr	r6, [r7, #4]
 8004944:	466d      	mov	r5, sp
 8004946:	f106 0410 	add.w	r4, r6, #16
 800494a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800494c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800494e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004952:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004956:	e885 0003 	stmia.w	r5, {r0, r1}
 800495a:	1d33      	adds	r3, r6, #4
 800495c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800495e:	6838      	ldr	r0, [r7, #0]
 8004960:	f002 fe2c 	bl	80075bc <USB_CoreInit>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e0d0      	b.n	8004b18 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f002 ff43 	bl	8007808 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]
 8004986:	e04a      	b.n	8004a1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004988:	7bfa      	ldrb	r2, [r7, #15]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	333d      	adds	r3, #61	; 0x3d
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800499c:	7bfa      	ldrb	r2, [r7, #15]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	333c      	adds	r3, #60	; 0x3c
 80049ac:	7bfa      	ldrb	r2, [r7, #15]
 80049ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049b0:	7bfa      	ldrb	r2, [r7, #15]
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	b298      	uxth	r0, r3
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	4613      	mov	r3, r2
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	3342      	adds	r3, #66	; 0x42
 80049c4:	4602      	mov	r2, r0
 80049c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049c8:	7bfa      	ldrb	r2, [r7, #15]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	333f      	adds	r3, #63	; 0x3f
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049dc:	7bfa      	ldrb	r2, [r7, #15]
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	3344      	adds	r3, #68	; 0x44
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049f0:	7bfa      	ldrb	r2, [r7, #15]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	3348      	adds	r3, #72	; 0x48
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a04:	7bfa      	ldrb	r2, [r7, #15]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	3350      	adds	r3, #80	; 0x50
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
 8004a1e:	7bfa      	ldrb	r2, [r7, #15]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d3af      	bcc.n	8004988 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]
 8004a2c:	e044      	b.n	8004ab8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a2e:	7bfa      	ldrb	r2, [r7, #15]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a44:	7bfa      	ldrb	r2, [r7, #15]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004a56:	7bfa      	ldrb	r2, [r7, #15]
 8004a58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a70:	7bfa      	ldrb	r2, [r7, #15]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a9c:	7bfa      	ldrb	r2, [r7, #15]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	7bfa      	ldrb	r2, [r7, #15]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d3b5      	bcc.n	8004a2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	687e      	ldr	r6, [r7, #4]
 8004aca:	466d      	mov	r5, sp
 8004acc:	f106 0410 	add.w	r4, r6, #16
 8004ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ad8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004adc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ae0:	1d33      	adds	r3, r6, #4
 8004ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ae4:	6838      	ldr	r0, [r7, #0]
 8004ae6:	f002 feb9 	bl	800785c <USB_DevInit>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e00d      	b.n	8004b18 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f003 ff01 	bl	8008918 <USB_DevDisconnect>

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_PCD_Start+0x1c>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e020      	b.n	8004b7e <HAL_PCD_Start+0x5e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d109      	bne.n	8004b60 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d005      	beq.n	8004b60 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f002 fe2d 	bl	80077c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f003 feb1 	bl	80088d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b86:	b590      	push	{r4, r7, lr}
 8004b88:	b08d      	sub	sp, #52	; 0x34
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f003 ff6f 	bl	8008a80 <USB_GetMode>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 839d 	bne.w	80052e4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f003 fed3 	bl	800895a <USB_ReadInterrupts>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8393 	beq.w	80052e2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f003 feca 	bl	800895a <USB_ReadInterrupts>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d107      	bne.n	8004be0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f002 0202 	and.w	r2, r2, #2
 8004bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f003 feb8 	bl	800895a <USB_ReadInterrupts>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d161      	bne.n	8004cb8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0210 	bic.w	r2, r2, #16
 8004c02:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f003 020f 	and.w	r2, r3, #15
 8004c10:	4613      	mov	r3, r2
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	4413      	add	r3, r2
 8004c20:	3304      	adds	r3, #4
 8004c22:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	0c5b      	lsrs	r3, r3, #17
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d124      	bne.n	8004c7a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d035      	beq.n	8004ca8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	6a38      	ldr	r0, [r7, #32]
 8004c50:	f003 fd1e 	bl	8008690 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c60:	441a      	add	r2, r3
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	699a      	ldr	r2, [r3, #24]
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	091b      	lsrs	r3, r3, #4
 8004c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c72:	441a      	add	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	619a      	str	r2, [r3, #24]
 8004c78:	e016      	b.n	8004ca8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	0c5b      	lsrs	r3, r3, #17
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d110      	bne.n	8004ca8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6a38      	ldr	r0, [r7, #32]
 8004c92:	f003 fcfd 	bl	8008690 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	091b      	lsrs	r3, r3, #4
 8004c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ca2:	441a      	add	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0210 	orr.w	r2, r2, #16
 8004cb6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f003 fe4c 	bl	800895a <USB_ReadInterrupts>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ccc:	d16e      	bne.n	8004dac <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f003 fe52 	bl	8008980 <USB_ReadDevAllOutEpInterrupt>
 8004cdc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004cde:	e062      	b.n	8004da6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d057      	beq.n	8004d9a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f003 fe77 	bl	80089e8 <USB_ReadDevOutEPInterrupt>
 8004cfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	461a      	mov	r2, r3
 8004d14:	2301      	movs	r3, #1
 8004d16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fdb0 	bl	8005880 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00c      	beq.n	8004d44 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d36:	461a      	mov	r2, r3
 8004d38:	2308      	movs	r3, #8
 8004d3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 feaa 	bl	8005a98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d008      	beq.n	8004d60 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	461a      	mov	r2, r3
 8004d78:	2320      	movs	r3, #32
 8004d7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	461a      	mov	r2, r3
 8004d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d98:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	085b      	lsrs	r3, r3, #1
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d199      	bne.n	8004ce0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f003 fdd2 	bl	800895a <USB_ReadInterrupts>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dc0:	f040 80c0 	bne.w	8004f44 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f003 fdf3 	bl	80089b4 <USB_ReadDevAllInEpInterrupt>
 8004dce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004dd4:	e0b2      	b.n	8004f3c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80a7 	beq.w	8004f30 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f003 fe19 	bl	8008a24 <USB_ReadDevInEPInterrupt>
 8004df2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d057      	beq.n	8004eae <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	2201      	movs	r2, #1
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69f9      	ldr	r1, [r7, #28]
 8004e1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e1e:	4013      	ands	r3, r2
 8004e20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2301      	movs	r3, #1
 8004e32:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d132      	bne.n	8004ea2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	3348      	adds	r3, #72	; 0x48
 8004e4c:	6819      	ldr	r1, [r3, #0]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4403      	add	r3, r0
 8004e5c:	3344      	adds	r3, #68	; 0x44
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4419      	add	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4403      	add	r3, r0
 8004e70:	3348      	adds	r3, #72	; 0x48
 8004e72:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d113      	bne.n	8004ea2 <HAL_PCD_IRQHandler+0x31c>
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7e:	4613      	mov	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	3350      	adds	r3, #80	; 0x50
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	f003 fe21 	bl	8008ae4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f006 fce0 	bl	800b86e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	2310      	movs	r3, #16
 8004ee4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	461a      	mov	r2, r3
 8004efe:	2340      	movs	r3, #64	; 0x40
 8004f00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fc1b 	bl	8005766 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	3301      	adds	r3, #1
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	085b      	lsrs	r3, r3, #1
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f47f af49 	bne.w	8004dd6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f003 fd06 	bl	800895a <USB_ReadInterrupts>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f58:	d122      	bne.n	8004fa0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d108      	bne.n	8004f8a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f80:	2100      	movs	r1, #0
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fe26 	bl	8005bd4 <HAL_PCDEx_LPM_Callback>
 8004f88:	e002      	b.n	8004f90 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f006 fcdc 	bl	800b948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f003 fcd8 	bl	800895a <USB_ReadInterrupts>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb4:	d112      	bne.n	8004fdc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d102      	bne.n	8004fcc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f006 fc98 	bl	800b8fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004fda:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f003 fcba 	bl	800895a <USB_ReadInterrupts>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff0:	f040 80c7 	bne.w	8005182 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2110      	movs	r1, #16
 800500e:	4618      	mov	r0, r3
 8005010:	f002 fd88 	bl	8007b24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005014:	2300      	movs	r3, #0
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005018:	e056      	b.n	80050c8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005026:	461a      	mov	r2, r3
 8005028:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800502c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	440a      	add	r2, r1
 8005044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005048:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800504c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	440a      	add	r2, r1
 8005064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005068:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800506c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	461a      	mov	r2, r3
 800507c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005080:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800509c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c4:	3301      	adds	r3, #1
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d3a3      	bcc.n	800501a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80050e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d016      	beq.n	800511c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050fe:	f043 030b 	orr.w	r3, r3, #11
 8005102:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005114:	f043 030b 	orr.w	r3, r3, #11
 8005118:	6453      	str	r3, [r2, #68]	; 0x44
 800511a:	e015      	b.n	8005148 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800512e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005132:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005142:	f043 030b 	orr.w	r3, r3, #11
 8005146:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005156:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800515a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800516c:	461a      	mov	r2, r3
 800516e:	f003 fcb9 	bl	8008ae4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f003 fbe7 	bl	800895a <USB_ReadInterrupts>
 800518c:	4603      	mov	r3, r0
 800518e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005196:	d124      	bne.n	80051e2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f003 fc7d 	bl	8008a9c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f002 fd1d 	bl	8007be6 <USB_GetDevSpeed>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681c      	ldr	r4, [r3, #0]
 80051b8:	f001 f956 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80051bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	4620      	mov	r0, r4
 80051c8:	f002 fa5a 	bl	8007680 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f006 fb76 	bl	800b8be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80051e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f003 fbb7 	bl	800895a <USB_ReadInterrupts>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d10a      	bne.n	800520c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f006 fb53 	bl	800b8a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f002 0208 	and.w	r2, r2, #8
 800520a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f003 fba2 	bl	800895a <USB_ReadInterrupts>
 8005216:	4603      	mov	r3, r0
 8005218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005220:	d10f      	bne.n	8005242 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	b2db      	uxtb	r3, r3
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f006 fbab 	bl	800b988 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695a      	ldr	r2, [r3, #20]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005240:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f003 fb87 	bl	800895a <USB_ReadInterrupts>
 800524c:	4603      	mov	r3, r0
 800524e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005256:	d10f      	bne.n	8005278 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	b2db      	uxtb	r3, r3
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f006 fb7e 	bl	800b964 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695a      	ldr	r2, [r3, #20]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005276:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f003 fb6c 	bl	800895a <USB_ReadInterrupts>
 8005282:	4603      	mov	r3, r0
 8005284:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d10a      	bne.n	80052a4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f006 fb8c 	bl	800b9ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80052a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f003 fb56 	bl	800895a <USB_ReadInterrupts>
 80052ae:	4603      	mov	r3, r0
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d115      	bne.n	80052e4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f006 fb7c 	bl	800b9c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6859      	ldr	r1, [r3, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
 80052e0:	e000      	b.n	80052e4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80052e2:	bf00      	nop
    }
  }
}
 80052e4:	3734      	adds	r7, #52	; 0x34
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd90      	pop	{r4, r7, pc}

080052ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_PCD_SetAddress+0x1a>
 8005300:	2302      	movs	r3, #2
 8005302:	e013      	b.n	800532c <HAL_PCD_SetAddress+0x42>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f003 fab4 	bl	800888a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	4608      	mov	r0, r1
 800533e:	4611      	mov	r1, r2
 8005340:	461a      	mov	r2, r3
 8005342:	4603      	mov	r3, r0
 8005344:	70fb      	strb	r3, [r7, #3]
 8005346:	460b      	mov	r3, r1
 8005348:	803b      	strh	r3, [r7, #0]
 800534a:	4613      	mov	r3, r2
 800534c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005356:	2b00      	cmp	r3, #0
 8005358:	da0f      	bge.n	800537a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	3338      	adds	r3, #56	; 0x38
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	3304      	adds	r3, #4
 8005370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	705a      	strb	r2, [r3, #1]
 8005378:	e00f      	b.n	800539a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800537a:	78fb      	ldrb	r3, [r7, #3]
 800537c:	f003 020f 	and.w	r2, r3, #15
 8005380:	4613      	mov	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	4413      	add	r3, r2
 8005390:	3304      	adds	r3, #4
 8005392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80053a6:	883a      	ldrh	r2, [r7, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	78ba      	ldrb	r2, [r7, #2]
 80053b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	785b      	ldrb	r3, [r3, #1]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053c4:	78bb      	ldrb	r3, [r7, #2]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d102      	bne.n	80053d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_PCD_EP_Open+0xaa>
 80053da:	2302      	movs	r3, #2
 80053dc:	e00e      	b.n	80053fc <HAL_PCD_EP_Open+0xc8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68f9      	ldr	r1, [r7, #12]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f002 fc1f 	bl	8007c30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80053fa:	7afb      	ldrb	r3, [r7, #11]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005414:	2b00      	cmp	r3, #0
 8005416:	da0f      	bge.n	8005438 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	f003 020f 	and.w	r2, r3, #15
 800541e:	4613      	mov	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	3338      	adds	r3, #56	; 0x38
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	4413      	add	r3, r2
 800542c:	3304      	adds	r3, #4
 800542e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	705a      	strb	r2, [r3, #1]
 8005436:	e00f      	b.n	8005458 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	f003 020f 	and.w	r2, r3, #15
 800543e:	4613      	mov	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	4413      	add	r3, r2
 800544e:	3304      	adds	r3, #4
 8005450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	b2da      	uxtb	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_PCD_EP_Close+0x6e>
 800546e:	2302      	movs	r3, #2
 8005470:	e00e      	b.n	8005490 <HAL_PCD_EP_Close+0x8c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68f9      	ldr	r1, [r7, #12]
 8005480:	4618      	mov	r0, r3
 8005482:	f002 fc5d 	bl	8007d40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	460b      	mov	r3, r1
 80054a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054a8:	7afb      	ldrb	r3, [r7, #11]
 80054aa:	f003 020f 	and.w	r2, r3, #15
 80054ae:	4613      	mov	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	3304      	adds	r3, #4
 80054c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2200      	movs	r2, #0
 80054d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2200      	movs	r2, #0
 80054d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054da:	7afb      	ldrb	r3, [r7, #11]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d102      	bne.n	80054f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054f4:	7afb      	ldrb	r3, [r7, #11]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	6979      	ldr	r1, [r7, #20]
 800550c:	f002 ff38 	bl	8008380 <USB_EP0StartXfer>
 8005510:	e008      	b.n	8005524 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	6979      	ldr	r1, [r7, #20]
 8005520:	f002 fcea 	bl	8007ef8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	460b      	mov	r3, r1
 8005538:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	f003 020f 	and.w	r2, r3, #15
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005550:	681b      	ldr	r3, [r3, #0]
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b086      	sub	sp, #24
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	460b      	mov	r3, r1
 800556c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800556e:	7afb      	ldrb	r3, [r7, #11]
 8005570:	f003 020f 	and.w	r2, r3, #15
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	3338      	adds	r3, #56	; 0x38
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	3304      	adds	r3, #4
 8005584:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2200      	movs	r2, #0
 8005596:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2201      	movs	r2, #1
 800559c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800559e:	7afb      	ldrb	r3, [r7, #11]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d102      	bne.n	80055b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055b8:	7afb      	ldrb	r3, [r7, #11]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d109      	bne.n	80055d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	6979      	ldr	r1, [r7, #20]
 80055d0:	f002 fed6 	bl	8008380 <USB_EP0StartXfer>
 80055d4:	e008      	b.n	80055e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	6979      	ldr	r1, [r7, #20]
 80055e4:	f002 fc88 	bl	8007ef8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	460b      	mov	r3, r1
 80055fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	f003 020f 	and.w	r2, r3, #15
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d901      	bls.n	8005610 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e050      	b.n	80056b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005614:	2b00      	cmp	r3, #0
 8005616:	da0f      	bge.n	8005638 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	f003 020f 	and.w	r2, r3, #15
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	3338      	adds	r3, #56	; 0x38
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4413      	add	r3, r2
 800562c:	3304      	adds	r3, #4
 800562e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	705a      	strb	r2, [r3, #1]
 8005636:	e00d      	b.n	8005654 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	4613      	mov	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	4413      	add	r3, r2
 800564a:	3304      	adds	r3, #4
 800564c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	b2da      	uxtb	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_PCD_EP_SetStall+0x82>
 8005670:	2302      	movs	r3, #2
 8005672:	e01e      	b.n	80056b2 <HAL_PCD_EP_SetStall+0xc0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68f9      	ldr	r1, [r7, #12]
 8005682:	4618      	mov	r0, r3
 8005684:	f003 f82d 	bl	80086e2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	b2d9      	uxtb	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056a2:	461a      	mov	r2, r3
 80056a4:	f003 fa1e 	bl	8008ae4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	f003 020f 	and.w	r2, r3, #15
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d901      	bls.n	80056d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e042      	b.n	800575e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	da0f      	bge.n	8005700 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	f003 020f 	and.w	r2, r3, #15
 80056e6:	4613      	mov	r3, r2
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	3338      	adds	r3, #56	; 0x38
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	4413      	add	r3, r2
 80056f4:	3304      	adds	r3, #4
 80056f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	705a      	strb	r2, [r3, #1]
 80056fe:	e00f      	b.n	8005720 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	f003 020f 	and.w	r2, r3, #15
 8005706:	4613      	mov	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4413      	add	r3, r2
 8005716:	3304      	adds	r3, #4
 8005718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	b2da      	uxtb	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_PCD_EP_ClrStall+0x86>
 800573c:	2302      	movs	r3, #2
 800573e:	e00e      	b.n	800575e <HAL_PCD_EP_ClrStall+0xa4>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68f9      	ldr	r1, [r7, #12]
 800574e:	4618      	mov	r0, r3
 8005750:	f003 f835 	bl	80087be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b08a      	sub	sp, #40	; 0x28
 800576a:	af02      	add	r7, sp, #8
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	1a9b      	subs	r3, r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	3338      	adds	r3, #56	; 0x38
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	3304      	adds	r3, #4
 800578c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	429a      	cmp	r2, r3
 8005798:	d901      	bls.n	800579e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e06c      	b.n	8005878 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d902      	bls.n	80057ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3303      	adds	r3, #3
 80057be:	089b      	lsrs	r3, r3, #2
 80057c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057c2:	e02b      	b.n	800581c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d902      	bls.n	80057e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	3303      	adds	r3, #3
 80057e4:	089b      	lsrs	r3, r3, #2
 80057e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68d9      	ldr	r1, [r3, #12]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	4603      	mov	r3, r0
 80057fe:	6978      	ldr	r0, [r7, #20]
 8005800:	f002 ff11 	bl	8008626 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	441a      	add	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	441a      	add	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	b29b      	uxth	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	429a      	cmp	r2, r3
 8005830:	d809      	bhi.n	8005846 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800583a:	429a      	cmp	r2, r3
 800583c:	d203      	bcs.n	8005846 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1be      	bne.n	80057c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	695a      	ldr	r2, [r3, #20]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	429a      	cmp	r2, r3
 8005850:	d811      	bhi.n	8005876 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f003 030f 	and.w	r3, r3, #15
 8005858:	2201      	movs	r2, #1
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	43db      	mvns	r3, r3
 800586c:	6939      	ldr	r1, [r7, #16]
 800586e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005872:	4013      	ands	r3, r2
 8005874:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	333c      	adds	r3, #60	; 0x3c
 8005898:	3304      	adds	r3, #4
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	f040 80a0 	bne.w	80059f8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d015      	beq.n	80058ee <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4a72      	ldr	r2, [pc, #456]	; (8005a90 <PCD_EP_OutXfrComplete_int+0x210>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	f240 80dd 	bls.w	8005a86 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80d7 	beq.w	8005a86 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	461a      	mov	r2, r3
 80058e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ea:	6093      	str	r3, [r2, #8]
 80058ec:	e0cb      	b.n	8005a86 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d009      	beq.n	800590c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	461a      	mov	r2, r3
 8005906:	2320      	movs	r3, #32
 8005908:	6093      	str	r3, [r2, #8]
 800590a:	e0bc      	b.n	8005a86 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	f040 80b7 	bne.w	8005a86 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a5d      	ldr	r2, [pc, #372]	; (8005a90 <PCD_EP_OutXfrComplete_int+0x210>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d90f      	bls.n	8005940 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	461a      	mov	r2, r3
 8005938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593c:	6093      	str	r3, [r2, #8]
 800593e:	e0a2      	b.n	8005a86 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005952:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	0159      	lsls	r1, r3, #5
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	440b      	add	r3, r1
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005966:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	4613      	mov	r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4403      	add	r3, r0
 8005976:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800597a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	4613      	mov	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800598e:	6819      	ldr	r1, [r3, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	4613      	mov	r3, r2
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4403      	add	r3, r0
 800599e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4419      	add	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	4613      	mov	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	1a9b      	subs	r3, r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4403      	add	r3, r0
 80059b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80059b8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d114      	bne.n	80059ea <PCD_EP_OutXfrComplete_int+0x16a>
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d108      	bne.n	80059ea <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059e2:	461a      	mov	r2, r3
 80059e4:	2101      	movs	r1, #1
 80059e6:	f003 f87d 	bl	8008ae4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f005 ff21 	bl	800b838 <HAL_PCD_DataOutStageCallback>
 80059f6:	e046      	b.n	8005a86 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <PCD_EP_OutXfrComplete_int+0x214>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d124      	bne.n	8005a4a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	461a      	mov	r2, r3
 8005a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a1c:	6093      	str	r3, [r2, #8]
 8005a1e:	e032      	b.n	8005a86 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a36:	461a      	mov	r2, r3
 8005a38:	2320      	movs	r3, #32
 8005a3a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f005 fef8 	bl	800b838 <HAL_PCD_DataOutStageCallback>
 8005a48:	e01d      	b.n	8005a86 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d114      	bne.n	8005a7a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	4613      	mov	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d108      	bne.n	8005a7a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a72:	461a      	mov	r2, r3
 8005a74:	2100      	movs	r1, #0
 8005a76:	f003 f835 	bl	8008ae4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f005 fed9 	bl	800b838 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	4f54300a 	.word	0x4f54300a
 8005a94:	4f54310a 	.word	0x4f54310a

08005a98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	333c      	adds	r3, #60	; 0x3c
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <PCD_EP_OutSetupPacket_int+0x88>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d90e      	bls.n	8005aec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d009      	beq.n	8005aec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f005 fe91 	bl	800b814 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4a0a      	ldr	r2, [pc, #40]	; (8005b20 <PCD_EP_OutSetupPacket_int+0x88>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d90c      	bls.n	8005b14 <PCD_EP_OutSetupPacket_int+0x7c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d108      	bne.n	8005b14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	2101      	movs	r1, #1
 8005b10:	f002 ffe8 	bl	8008ae4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	4f54300a 	.word	0x4f54300a

08005b24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	70fb      	strb	r3, [r7, #3]
 8005b30:	4613      	mov	r3, r2
 8005b32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d107      	bne.n	8005b52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b42:	883b      	ldrh	r3, [r7, #0]
 8005b44:	0419      	lsls	r1, r3, #16
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b50:	e028      	b.n	8005ba4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	0c1b      	lsrs	r3, r3, #16
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]
 8005b64:	e00d      	b.n	8005b82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	3340      	adds	r3, #64	; 0x40
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	4413      	add	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
 8005b82:	7bfa      	ldrb	r2, [r7, #15]
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d3ec      	bcc.n	8005b66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005b8c:	883b      	ldrh	r3, [r7, #0]
 8005b8e:	0418      	lsls	r0, r3, #16
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6819      	ldr	r1, [r3, #0]
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	4302      	orrs	r2, r0
 8005b9c:	3340      	adds	r3, #64	; 0x40
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	887a      	ldrh	r2, [r7, #2]
 8005bc4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e264      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d075      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c0a:	4ba3      	ldr	r3, [pc, #652]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d00c      	beq.n	8005c30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c16:	4ba0      	ldr	r3, [pc, #640]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d112      	bne.n	8005c48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c22:	4b9d      	ldr	r3, [pc, #628]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c2e:	d10b      	bne.n	8005c48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c30:	4b99      	ldr	r3, [pc, #612]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d05b      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x108>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d157      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e23f      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c50:	d106      	bne.n	8005c60 <HAL_RCC_OscConfig+0x74>
 8005c52:	4b91      	ldr	r3, [pc, #580]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a90      	ldr	r2, [pc, #576]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	e01d      	b.n	8005c9c <HAL_RCC_OscConfig+0xb0>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c68:	d10c      	bne.n	8005c84 <HAL_RCC_OscConfig+0x98>
 8005c6a:	4b8b      	ldr	r3, [pc, #556]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a8a      	ldr	r2, [pc, #552]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	4b88      	ldr	r3, [pc, #544]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a87      	ldr	r2, [pc, #540]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	e00b      	b.n	8005c9c <HAL_RCC_OscConfig+0xb0>
 8005c84:	4b84      	ldr	r3, [pc, #528]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a83      	ldr	r2, [pc, #524]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	4b81      	ldr	r3, [pc, #516]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a80      	ldr	r2, [pc, #512]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d013      	beq.n	8005ccc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca4:	f7fc fc3a 	bl	800251c <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cac:	f7fc fc36 	bl	800251c <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b64      	cmp	r3, #100	; 0x64
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e204      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cbe:	4b76      	ldr	r3, [pc, #472]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCC_OscConfig+0xc0>
 8005cca:	e014      	b.n	8005cf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ccc:	f7fc fc26 	bl	800251c <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cd4:	f7fc fc22 	bl	800251c <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b64      	cmp	r3, #100	; 0x64
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e1f0      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ce6:	4b6c      	ldr	r3, [pc, #432]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0xe8>
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d063      	beq.n	8005dca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d02:	4b65      	ldr	r3, [pc, #404]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 030c 	and.w	r3, r3, #12
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d0e:	4b62      	ldr	r3, [pc, #392]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d11c      	bne.n	8005d54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d1a:	4b5f      	ldr	r3, [pc, #380]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d116      	bne.n	8005d54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d26:	4b5c      	ldr	r3, [pc, #368]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <HAL_RCC_OscConfig+0x152>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d001      	beq.n	8005d3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e1c4      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d3e:	4b56      	ldr	r3, [pc, #344]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	4952      	ldr	r1, [pc, #328]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d52:	e03a      	b.n	8005dca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d020      	beq.n	8005d9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d5c:	4b4f      	ldr	r3, [pc, #316]	; (8005e9c <HAL_RCC_OscConfig+0x2b0>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d62:	f7fc fbdb 	bl	800251c <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d68:	e008      	b.n	8005d7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d6a:	f7fc fbd7 	bl	800251c <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e1a5      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d7c:	4b46      	ldr	r3, [pc, #280]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f0      	beq.n	8005d6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d88:	4b43      	ldr	r3, [pc, #268]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4940      	ldr	r1, [pc, #256]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	600b      	str	r3, [r1, #0]
 8005d9c:	e015      	b.n	8005dca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d9e:	4b3f      	ldr	r3, [pc, #252]	; (8005e9c <HAL_RCC_OscConfig+0x2b0>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da4:	f7fc fbba 	bl	800251c <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dac:	f7fc fbb6 	bl	800251c <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e184      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dbe:	4b36      	ldr	r3, [pc, #216]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1f0      	bne.n	8005dac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d030      	beq.n	8005e38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dde:	4b30      	ldr	r3, [pc, #192]	; (8005ea0 <HAL_RCC_OscConfig+0x2b4>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de4:	f7fc fb9a 	bl	800251c <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dec:	f7fc fb96 	bl	800251c <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e164      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dfe:	4b26      	ldr	r3, [pc, #152]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0f0      	beq.n	8005dec <HAL_RCC_OscConfig+0x200>
 8005e0a:	e015      	b.n	8005e38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e0c:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <HAL_RCC_OscConfig+0x2b4>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e12:	f7fc fb83 	bl	800251c <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e1a:	f7fc fb7f 	bl	800251c <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e14d      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e2c:	4b1a      	ldr	r3, [pc, #104]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f0      	bne.n	8005e1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80a0 	beq.w	8005f86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e46:	2300      	movs	r3, #0
 8005e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10f      	bne.n	8005e76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e56:	2300      	movs	r3, #0
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	4a0e      	ldr	r2, [pc, #56]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e64:	6413      	str	r3, [r2, #64]	; 0x40
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <HAL_RCC_OscConfig+0x2ac>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e76:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_RCC_OscConfig+0x2b8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d121      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e82:	4b08      	ldr	r3, [pc, #32]	; (8005ea4 <HAL_RCC_OscConfig+0x2b8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a07      	ldr	r2, [pc, #28]	; (8005ea4 <HAL_RCC_OscConfig+0x2b8>)
 8005e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e8e:	f7fc fb45 	bl	800251c <HAL_GetTick>
 8005e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e94:	e011      	b.n	8005eba <HAL_RCC_OscConfig+0x2ce>
 8005e96:	bf00      	nop
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	42470000 	.word	0x42470000
 8005ea0:	42470e80 	.word	0x42470e80
 8005ea4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea8:	f7fc fb38 	bl	800251c <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e106      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eba:	4b85      	ldr	r3, [pc, #532]	; (80060d0 <HAL_RCC_OscConfig+0x4e4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d106      	bne.n	8005edc <HAL_RCC_OscConfig+0x2f0>
 8005ece:	4b81      	ldr	r3, [pc, #516]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	4a80      	ldr	r2, [pc, #512]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eda:	e01c      	b.n	8005f16 <HAL_RCC_OscConfig+0x32a>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b05      	cmp	r3, #5
 8005ee2:	d10c      	bne.n	8005efe <HAL_RCC_OscConfig+0x312>
 8005ee4:	4b7b      	ldr	r3, [pc, #492]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	4a7a      	ldr	r2, [pc, #488]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005eea:	f043 0304 	orr.w	r3, r3, #4
 8005eee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef0:	4b78      	ldr	r3, [pc, #480]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	4a77      	ldr	r2, [pc, #476]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	6713      	str	r3, [r2, #112]	; 0x70
 8005efc:	e00b      	b.n	8005f16 <HAL_RCC_OscConfig+0x32a>
 8005efe:	4b75      	ldr	r3, [pc, #468]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f02:	4a74      	ldr	r2, [pc, #464]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	6713      	str	r3, [r2, #112]	; 0x70
 8005f0a:	4b72      	ldr	r3, [pc, #456]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0e:	4a71      	ldr	r2, [pc, #452]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005f10:	f023 0304 	bic.w	r3, r3, #4
 8005f14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d015      	beq.n	8005f4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1e:	f7fc fafd 	bl	800251c <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f24:	e00a      	b.n	8005f3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f26:	f7fc faf9 	bl	800251c <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e0c5      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3c:	4b65      	ldr	r3, [pc, #404]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0ee      	beq.n	8005f26 <HAL_RCC_OscConfig+0x33a>
 8005f48:	e014      	b.n	8005f74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f4a:	f7fc fae7 	bl	800251c <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f50:	e00a      	b.n	8005f68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f52:	f7fc fae3 	bl	800251c <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e0af      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f68:	4b5a      	ldr	r3, [pc, #360]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1ee      	bne.n	8005f52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d105      	bne.n	8005f86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f7a:	4b56      	ldr	r3, [pc, #344]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	4a55      	ldr	r2, [pc, #340]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 809b 	beq.w	80060c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f90:	4b50      	ldr	r3, [pc, #320]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 030c 	and.w	r3, r3, #12
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d05c      	beq.n	8006056 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d141      	bne.n	8006028 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fa4:	4b4c      	ldr	r3, [pc, #304]	; (80060d8 <HAL_RCC_OscConfig+0x4ec>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005faa:	f7fc fab7 	bl	800251c <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb2:	f7fc fab3 	bl	800251c <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e081      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fc4:	4b43      	ldr	r3, [pc, #268]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f0      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	019b      	lsls	r3, r3, #6
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	061b      	lsls	r3, r3, #24
 8005ff4:	4937      	ldr	r1, [pc, #220]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ffa:	4b37      	ldr	r3, [pc, #220]	; (80060d8 <HAL_RCC_OscConfig+0x4ec>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006000:	f7fc fa8c 	bl	800251c <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006008:	f7fc fa88 	bl	800251c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e056      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800601a:	4b2e      	ldr	r3, [pc, #184]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0f0      	beq.n	8006008 <HAL_RCC_OscConfig+0x41c>
 8006026:	e04e      	b.n	80060c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006028:	4b2b      	ldr	r3, [pc, #172]	; (80060d8 <HAL_RCC_OscConfig+0x4ec>)
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602e:	f7fc fa75 	bl	800251c <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006036:	f7fc fa71 	bl	800251c <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e03f      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006048:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f0      	bne.n	8006036 <HAL_RCC_OscConfig+0x44a>
 8006054:	e037      	b.n	80060c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e032      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006062:	4b1c      	ldr	r3, [pc, #112]	; (80060d4 <HAL_RCC_OscConfig+0x4e8>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d028      	beq.n	80060c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800607a:	429a      	cmp	r2, r3
 800607c:	d121      	bne.n	80060c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006088:	429a      	cmp	r2, r3
 800608a:	d11a      	bne.n	80060c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006092:	4013      	ands	r3, r2
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006098:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800609a:	4293      	cmp	r3, r2
 800609c:	d111      	bne.n	80060c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a8:	085b      	lsrs	r3, r3, #1
 80060aa:	3b01      	subs	r3, #1
 80060ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d107      	bne.n	80060c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060be:	429a      	cmp	r2, r3
 80060c0:	d001      	beq.n	80060c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40007000 	.word	0x40007000
 80060d4:	40023800 	.word	0x40023800
 80060d8:	42470060 	.word	0x42470060

080060dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0cc      	b.n	800628a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060f0:	4b68      	ldr	r3, [pc, #416]	; (8006294 <HAL_RCC_ClockConfig+0x1b8>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d90c      	bls.n	8006118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060fe:	4b65      	ldr	r3, [pc, #404]	; (8006294 <HAL_RCC_ClockConfig+0x1b8>)
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006106:	4b63      	ldr	r3, [pc, #396]	; (8006294 <HAL_RCC_ClockConfig+0x1b8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d001      	beq.n	8006118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e0b8      	b.n	800628a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d020      	beq.n	8006166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006130:	4b59      	ldr	r3, [pc, #356]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	4a58      	ldr	r2, [pc, #352]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 8006136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800613a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006148:	4b53      	ldr	r3, [pc, #332]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	4a52      	ldr	r2, [pc, #328]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 800614e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006154:	4b50      	ldr	r3, [pc, #320]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	494d      	ldr	r1, [pc, #308]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 8006162:	4313      	orrs	r3, r2
 8006164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d044      	beq.n	80061fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d107      	bne.n	800618a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800617a:	4b47      	ldr	r3, [pc, #284]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d119      	bne.n	80061ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e07f      	b.n	800628a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d003      	beq.n	800619a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006196:	2b03      	cmp	r3, #3
 8006198:	d107      	bne.n	80061aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800619a:	4b3f      	ldr	r3, [pc, #252]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e06f      	b.n	800628a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061aa:	4b3b      	ldr	r3, [pc, #236]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e067      	b.n	800628a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061ba:	4b37      	ldr	r3, [pc, #220]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f023 0203 	bic.w	r2, r3, #3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	4934      	ldr	r1, [pc, #208]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061cc:	f7fc f9a6 	bl	800251c <HAL_GetTick>
 80061d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d2:	e00a      	b.n	80061ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d4:	f7fc f9a2 	bl	800251c <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e04f      	b.n	800628a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ea:	4b2b      	ldr	r3, [pc, #172]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 020c 	and.w	r2, r3, #12
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d1eb      	bne.n	80061d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061fc:	4b25      	ldr	r3, [pc, #148]	; (8006294 <HAL_RCC_ClockConfig+0x1b8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d20c      	bcs.n	8006224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620a:	4b22      	ldr	r3, [pc, #136]	; (8006294 <HAL_RCC_ClockConfig+0x1b8>)
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006212:	4b20      	ldr	r3, [pc, #128]	; (8006294 <HAL_RCC_ClockConfig+0x1b8>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d001      	beq.n	8006224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e032      	b.n	800628a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006230:	4b19      	ldr	r3, [pc, #100]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4916      	ldr	r1, [pc, #88]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	4313      	orrs	r3, r2
 8006240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	2b00      	cmp	r3, #0
 800624c:	d009      	beq.n	8006262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800624e:	4b12      	ldr	r3, [pc, #72]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	490e      	ldr	r1, [pc, #56]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	4313      	orrs	r3, r2
 8006260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006262:	f000 f821 	bl	80062a8 <HAL_RCC_GetSysClockFreq>
 8006266:	4602      	mov	r2, r0
 8006268:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	091b      	lsrs	r3, r3, #4
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	490a      	ldr	r1, [pc, #40]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006274:	5ccb      	ldrb	r3, [r1, r3]
 8006276:	fa22 f303 	lsr.w	r3, r2, r3
 800627a:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800627c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f7fc f906 	bl	8002494 <HAL_InitTick>

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	40023c00 	.word	0x40023c00
 8006298:	40023800 	.word	0x40023800
 800629c:	0800eecc 	.word	0x0800eecc
 80062a0:	20000060 	.word	0x20000060
 80062a4:	20000064 	.word	0x20000064

080062a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	607b      	str	r3, [r7, #4]
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	2300      	movs	r3, #0
 80062ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062c0:	4b67      	ldr	r3, [pc, #412]	; (8006460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 030c 	and.w	r3, r3, #12
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d00d      	beq.n	80062e8 <HAL_RCC_GetSysClockFreq+0x40>
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	f200 80bd 	bhi.w	800644c <HAL_RCC_GetSysClockFreq+0x1a4>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_RCC_GetSysClockFreq+0x34>
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d003      	beq.n	80062e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80062da:	e0b7      	b.n	800644c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062dc:	4b61      	ldr	r3, [pc, #388]	; (8006464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80062de:	60bb      	str	r3, [r7, #8]
       break;
 80062e0:	e0b7      	b.n	8006452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062e2:	4b60      	ldr	r3, [pc, #384]	; (8006464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80062e4:	60bb      	str	r3, [r7, #8]
      break;
 80062e6:	e0b4      	b.n	8006452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062e8:	4b5d      	ldr	r3, [pc, #372]	; (8006460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062f2:	4b5b      	ldr	r3, [pc, #364]	; (8006460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d04d      	beq.n	800639a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062fe:	4b58      	ldr	r3, [pc, #352]	; (8006460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	099b      	lsrs	r3, r3, #6
 8006304:	461a      	mov	r2, r3
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800630e:	f04f 0100 	mov.w	r1, #0
 8006312:	ea02 0800 	and.w	r8, r2, r0
 8006316:	ea03 0901 	and.w	r9, r3, r1
 800631a:	4640      	mov	r0, r8
 800631c:	4649      	mov	r1, r9
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	014b      	lsls	r3, r1, #5
 8006328:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800632c:	0142      	lsls	r2, r0, #5
 800632e:	4610      	mov	r0, r2
 8006330:	4619      	mov	r1, r3
 8006332:	ebb0 0008 	subs.w	r0, r0, r8
 8006336:	eb61 0109 	sbc.w	r1, r1, r9
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	018b      	lsls	r3, r1, #6
 8006344:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006348:	0182      	lsls	r2, r0, #6
 800634a:	1a12      	subs	r2, r2, r0
 800634c:	eb63 0301 	sbc.w	r3, r3, r1
 8006350:	f04f 0000 	mov.w	r0, #0
 8006354:	f04f 0100 	mov.w	r1, #0
 8006358:	00d9      	lsls	r1, r3, #3
 800635a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800635e:	00d0      	lsls	r0, r2, #3
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	eb12 0208 	adds.w	r2, r2, r8
 8006368:	eb43 0309 	adc.w	r3, r3, r9
 800636c:	f04f 0000 	mov.w	r0, #0
 8006370:	f04f 0100 	mov.w	r1, #0
 8006374:	0299      	lsls	r1, r3, #10
 8006376:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800637a:	0290      	lsls	r0, r2, #10
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4610      	mov	r0, r2
 8006382:	4619      	mov	r1, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	461a      	mov	r2, r3
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	f7fa fc74 	bl	8000c78 <__aeabi_uldivmod>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4613      	mov	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	e04a      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800639a:	4b31      	ldr	r3, [pc, #196]	; (8006460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	099b      	lsrs	r3, r3, #6
 80063a0:	461a      	mov	r2, r3
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063aa:	f04f 0100 	mov.w	r1, #0
 80063ae:	ea02 0400 	and.w	r4, r2, r0
 80063b2:	ea03 0501 	and.w	r5, r3, r1
 80063b6:	4620      	mov	r0, r4
 80063b8:	4629      	mov	r1, r5
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	014b      	lsls	r3, r1, #5
 80063c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80063c8:	0142      	lsls	r2, r0, #5
 80063ca:	4610      	mov	r0, r2
 80063cc:	4619      	mov	r1, r3
 80063ce:	1b00      	subs	r0, r0, r4
 80063d0:	eb61 0105 	sbc.w	r1, r1, r5
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	018b      	lsls	r3, r1, #6
 80063de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80063e2:	0182      	lsls	r2, r0, #6
 80063e4:	1a12      	subs	r2, r2, r0
 80063e6:	eb63 0301 	sbc.w	r3, r3, r1
 80063ea:	f04f 0000 	mov.w	r0, #0
 80063ee:	f04f 0100 	mov.w	r1, #0
 80063f2:	00d9      	lsls	r1, r3, #3
 80063f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063f8:	00d0      	lsls	r0, r2, #3
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	1912      	adds	r2, r2, r4
 8006400:	eb45 0303 	adc.w	r3, r5, r3
 8006404:	f04f 0000 	mov.w	r0, #0
 8006408:	f04f 0100 	mov.w	r1, #0
 800640c:	0299      	lsls	r1, r3, #10
 800640e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006412:	0290      	lsls	r0, r2, #10
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4610      	mov	r0, r2
 800641a:	4619      	mov	r1, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	461a      	mov	r2, r3
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	f7fa fc28 	bl	8000c78 <__aeabi_uldivmod>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4613      	mov	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	0c1b      	lsrs	r3, r3, #16
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	3301      	adds	r3, #1
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	fbb2 f3f3 	udiv	r3, r2, r3
 8006448:	60bb      	str	r3, [r7, #8]
      break;
 800644a:	e002      	b.n	8006452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800644c:	4b05      	ldr	r3, [pc, #20]	; (8006464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800644e:	60bb      	str	r3, [r7, #8]
      break;
 8006450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006452:	68bb      	ldr	r3, [r7, #8]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800645e:	bf00      	nop
 8006460:	40023800 	.word	0x40023800
 8006464:	00f42400 	.word	0x00f42400

08006468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <HAL_RCC_GetHCLKFreq+0x14>)
 800646e:	681b      	ldr	r3, [r3, #0]
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20000060 	.word	0x20000060

08006480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006484:	f7ff fff0 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 8006488:	4602      	mov	r2, r0
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	0a9b      	lsrs	r3, r3, #10
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	4903      	ldr	r1, [pc, #12]	; (80064a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006496:	5ccb      	ldrb	r3, [r1, r3]
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40023800 	.word	0x40023800
 80064a4:	0800eedc 	.word	0x0800eedc

080064a8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80064ae:	f7fc f835 	bl	800251c <HAL_GetTick>
 80064b2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80064b4:	4b5d      	ldr	r3, [pc, #372]	; (800662c <HAL_RCC_DeInit+0x184>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a5c      	ldr	r2, [pc, #368]	; (800662c <HAL_RCC_DeInit+0x184>)
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064c2:	f7fc f82b 	bl	800251c <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e0a7      	b.n	8006624 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80064d4:	4b55      	ldr	r3, [pc, #340]	; (800662c <HAL_RCC_DeInit+0x184>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0f0      	beq.n	80064c2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80064e0:	4b52      	ldr	r3, [pc, #328]	; (800662c <HAL_RCC_DeInit+0x184>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a51      	ldr	r2, [pc, #324]	; (800662c <HAL_RCC_DeInit+0x184>)
 80064e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80064ec:	f7fc f816 	bl	800251c <HAL_GetTick>
 80064f0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80064f2:	4b4e      	ldr	r3, [pc, #312]	; (800662c <HAL_RCC_DeInit+0x184>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80064f8:	e00a      	b.n	8006510 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064fa:	f7fc f80f 	bl	800251c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	f241 3288 	movw	r2, #5000	; 0x1388
 8006508:	4293      	cmp	r3, r2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e089      	b.n	8006624 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8006510:	4b46      	ldr	r3, [pc, #280]	; (800662c <HAL_RCC_DeInit+0x184>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 030c 	and.w	r3, r3, #12
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1ee      	bne.n	80064fa <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800651c:	f7fb fffe 	bl	800251c <HAL_GetTick>
 8006520:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8006522:	4b42      	ldr	r3, [pc, #264]	; (800662c <HAL_RCC_DeInit+0x184>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a41      	ldr	r2, [pc, #260]	; (800662c <HAL_RCC_DeInit+0x184>)
 8006528:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800652c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006530:	f7fb fff4 	bl	800251c <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b64      	cmp	r3, #100	; 0x64
 800653c:	d901      	bls.n	8006542 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e070      	b.n	8006624 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8006542:	4b3a      	ldr	r3, [pc, #232]	; (800662c <HAL_RCC_DeInit+0x184>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800654e:	f7fb ffe5 	bl	800251c <HAL_GetTick>
 8006552:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006554:	4b35      	ldr	r3, [pc, #212]	; (800662c <HAL_RCC_DeInit+0x184>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a34      	ldr	r2, [pc, #208]	; (800662c <HAL_RCC_DeInit+0x184>)
 800655a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800655e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006560:	e008      	b.n	8006574 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006562:	f7fb ffdb 	bl	800251c <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e057      	b.n	8006624 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006574:	4b2d      	ldr	r3, [pc, #180]	; (800662c <HAL_RCC_DeInit+0x184>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1f0      	bne.n	8006562 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006580:	f7fb ffcc 	bl	800251c <HAL_GetTick>
 8006584:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8006586:	4b29      	ldr	r3, [pc, #164]	; (800662c <HAL_RCC_DeInit+0x184>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a28      	ldr	r2, [pc, #160]	; (800662c <HAL_RCC_DeInit+0x184>)
 800658c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006590:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006594:	f7fb ffc2 	bl	800251c <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e03e      	b.n	8006624 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80065a6:	4b21      	ldr	r3, [pc, #132]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80065b2:	4b1e      	ldr	r3, [pc, #120]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065b4:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <HAL_RCC_DeInit+0x188>)
 80065b6:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80065b8:	4b1c      	ldr	r3, [pc, #112]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065ba:	4a1e      	ldr	r2, [pc, #120]	; (8006634 <HAL_RCC_DeInit+0x18c>)
 80065bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80065c0:	4b1a      	ldr	r3, [pc, #104]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	4a19      	ldr	r2, [pc, #100]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065c6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80065ca:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80065cc:	4b17      	ldr	r3, [pc, #92]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	4a16      	ldr	r2, [pc, #88]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065d6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80065d8:	4b14      	ldr	r3, [pc, #80]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4a13      	ldr	r2, [pc, #76]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065de:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80065e2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80065e4:	4b11      	ldr	r3, [pc, #68]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4a10      	ldr	r2, [pc, #64]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065ee:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80065f0:	4b0e      	ldr	r3, [pc, #56]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f4:	4a0d      	ldr	r2, [pc, #52]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065f6:	f023 0301 	bic.w	r3, r3, #1
 80065fa:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <HAL_RCC_DeInit+0x184>)
 80065fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006600:	4a0a      	ldr	r2, [pc, #40]	; (800662c <HAL_RCC_DeInit+0x184>)
 8006602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006606:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8006608:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <HAL_RCC_DeInit+0x190>)
 800660a:	4a0c      	ldr	r2, [pc, #48]	; (800663c <HAL_RCC_DeInit+0x194>)
 800660c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <HAL_RCC_DeInit+0x198>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7fb ff3e 	bl	8002494 <HAL_InitTick>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8006622:	2300      	movs	r3, #0
  }
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40023800 	.word	0x40023800
 8006630:	04003010 	.word	0x04003010
 8006634:	20003000 	.word	0x20003000
 8006638:	20000060 	.word	0x20000060
 800663c:	00f42400 	.word	0x00f42400
 8006640:	20000064 	.word	0x20000064

08006644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e041      	b.n	80066da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7fb fcf0 	bl	8002050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3304      	adds	r3, #4
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f000 fc4c 	bl	8006f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d001      	beq.n	80066fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e044      	b.n	8006786 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1e      	ldr	r2, [pc, #120]	; (8006794 <HAL_TIM_Base_Start_IT+0xb0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d018      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x6c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006726:	d013      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x6c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1a      	ldr	r2, [pc, #104]	; (8006798 <HAL_TIM_Base_Start_IT+0xb4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00e      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x6c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a19      	ldr	r2, [pc, #100]	; (800679c <HAL_TIM_Base_Start_IT+0xb8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d009      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x6c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a17      	ldr	r2, [pc, #92]	; (80067a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d004      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x6c>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a16      	ldr	r2, [pc, #88]	; (80067a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d111      	bne.n	8006774 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b06      	cmp	r3, #6
 8006760:	d010      	beq.n	8006784 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0201 	orr.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006772:	e007      	b.n	8006784 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40010000 	.word	0x40010000
 8006798:	40000400 	.word	0x40000400
 800679c:	40000800 	.word	0x40000800
 80067a0:	40000c00 	.word	0x40000c00
 80067a4:	40014000 	.word	0x40014000

080067a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e041      	b.n	800683e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fb fc64 	bl	800209c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f000 fb9a 	bl	8006f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d109      	bne.n	800686c <HAL_TIM_PWM_Start+0x24>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	bf14      	ite	ne
 8006864:	2301      	movne	r3, #1
 8006866:	2300      	moveq	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	e022      	b.n	80068b2 <HAL_TIM_PWM_Start+0x6a>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b04      	cmp	r3, #4
 8006870:	d109      	bne.n	8006886 <HAL_TIM_PWM_Start+0x3e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b01      	cmp	r3, #1
 800687c:	bf14      	ite	ne
 800687e:	2301      	movne	r3, #1
 8006880:	2300      	moveq	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	e015      	b.n	80068b2 <HAL_TIM_PWM_Start+0x6a>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d109      	bne.n	80068a0 <HAL_TIM_PWM_Start+0x58>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b01      	cmp	r3, #1
 8006896:	bf14      	ite	ne
 8006898:	2301      	movne	r3, #1
 800689a:	2300      	moveq	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	e008      	b.n	80068b2 <HAL_TIM_PWM_Start+0x6a>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	bf14      	ite	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	2300      	moveq	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e068      	b.n	800698c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d104      	bne.n	80068ca <HAL_TIM_PWM_Start+0x82>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c8:	e013      	b.n	80068f2 <HAL_TIM_PWM_Start+0xaa>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d104      	bne.n	80068da <HAL_TIM_PWM_Start+0x92>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d8:	e00b      	b.n	80068f2 <HAL_TIM_PWM_Start+0xaa>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d104      	bne.n	80068ea <HAL_TIM_PWM_Start+0xa2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e8:	e003      	b.n	80068f2 <HAL_TIM_PWM_Start+0xaa>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2201      	movs	r2, #1
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fdb6 	bl	800746c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a23      	ldr	r2, [pc, #140]	; (8006994 <HAL_TIM_PWM_Start+0x14c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d107      	bne.n	800691a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <HAL_TIM_PWM_Start+0x14c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d018      	beq.n	8006956 <HAL_TIM_PWM_Start+0x10e>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692c:	d013      	beq.n	8006956 <HAL_TIM_PWM_Start+0x10e>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a19      	ldr	r2, [pc, #100]	; (8006998 <HAL_TIM_PWM_Start+0x150>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00e      	beq.n	8006956 <HAL_TIM_PWM_Start+0x10e>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a17      	ldr	r2, [pc, #92]	; (800699c <HAL_TIM_PWM_Start+0x154>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d009      	beq.n	8006956 <HAL_TIM_PWM_Start+0x10e>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a16      	ldr	r2, [pc, #88]	; (80069a0 <HAL_TIM_PWM_Start+0x158>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d004      	beq.n	8006956 <HAL_TIM_PWM_Start+0x10e>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a14      	ldr	r2, [pc, #80]	; (80069a4 <HAL_TIM_PWM_Start+0x15c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d111      	bne.n	800697a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b06      	cmp	r3, #6
 8006966:	d010      	beq.n	800698a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006978:	e007      	b.n	800698a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0201 	orr.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40010000 	.word	0x40010000
 8006998:	40000400 	.word	0x40000400
 800699c:	40000800 	.word	0x40000800
 80069a0:	40000c00 	.word	0x40000c00
 80069a4:	40014000 	.word	0x40014000

080069a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d122      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d11b      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0202 	mvn.w	r2, #2
 80069d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa7a 	bl	8006ee4 <HAL_TIM_IC_CaptureCallback>
 80069f0:	e005      	b.n	80069fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fa6c 	bl	8006ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fa7d 	bl	8006ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d122      	bne.n	8006a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d11b      	bne.n	8006a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f06f 0204 	mvn.w	r2, #4
 8006a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa50 	bl	8006ee4 <HAL_TIM_IC_CaptureCallback>
 8006a44:	e005      	b.n	8006a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fa42 	bl	8006ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fa53 	bl	8006ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d122      	bne.n	8006aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d11b      	bne.n	8006aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f06f 0208 	mvn.w	r2, #8
 8006a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2204      	movs	r2, #4
 8006a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa26 	bl	8006ee4 <HAL_TIM_IC_CaptureCallback>
 8006a98:	e005      	b.n	8006aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fa18 	bl	8006ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fa29 	bl	8006ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f003 0310 	and.w	r3, r3, #16
 8006ab6:	2b10      	cmp	r3, #16
 8006ab8:	d122      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f003 0310 	and.w	r3, r3, #16
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d11b      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0210 	mvn.w	r2, #16
 8006ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f9fc 	bl	8006ee4 <HAL_TIM_IC_CaptureCallback>
 8006aec:	e005      	b.n	8006afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f9ee 	bl	8006ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f9ff 	bl	8006ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d10e      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d107      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0201 	mvn.w	r2, #1
 8006b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f9c8 	bl	8006ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b36:	2b80      	cmp	r3, #128	; 0x80
 8006b38:	d10e      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b44:	2b80      	cmp	r3, #128	; 0x80
 8006b46:	d107      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fd28 	bl	80075a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b62:	2b40      	cmp	r3, #64	; 0x40
 8006b64:	d10e      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b40      	cmp	r3, #64	; 0x40
 8006b72:	d107      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f9c4 	bl	8006f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d10e      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f003 0320 	and.w	r3, r3, #32
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	d107      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0220 	mvn.w	r2, #32
 8006ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fcf2 	bl	8007594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e0ac      	b.n	8006d2c <HAL_TIM_PWM_ConfigChannel+0x174>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b0c      	cmp	r3, #12
 8006bde:	f200 809f 	bhi.w	8006d20 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006c1d 	.word	0x08006c1d
 8006bec:	08006d21 	.word	0x08006d21
 8006bf0:	08006d21 	.word	0x08006d21
 8006bf4:	08006d21 	.word	0x08006d21
 8006bf8:	08006c5d 	.word	0x08006c5d
 8006bfc:	08006d21 	.word	0x08006d21
 8006c00:	08006d21 	.word	0x08006d21
 8006c04:	08006d21 	.word	0x08006d21
 8006c08:	08006c9f 	.word	0x08006c9f
 8006c0c:	08006d21 	.word	0x08006d21
 8006c10:	08006d21 	.word	0x08006d21
 8006c14:	08006d21 	.word	0x08006d21
 8006c18:	08006cdf 	.word	0x08006cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f9fc 	bl	8007020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0208 	orr.w	r2, r2, #8
 8006c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699a      	ldr	r2, [r3, #24]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0204 	bic.w	r2, r2, #4
 8006c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6999      	ldr	r1, [r3, #24]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	619a      	str	r2, [r3, #24]
      break;
 8006c5a:	e062      	b.n	8006d22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fa42 	bl	80070ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6999      	ldr	r1, [r3, #24]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	021a      	lsls	r2, r3, #8
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	619a      	str	r2, [r3, #24]
      break;
 8006c9c:	e041      	b.n	8006d22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fa8d 	bl	80071c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f042 0208 	orr.w	r2, r2, #8
 8006cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69da      	ldr	r2, [r3, #28]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0204 	bic.w	r2, r2, #4
 8006cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69d9      	ldr	r1, [r3, #28]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	61da      	str	r2, [r3, #28]
      break;
 8006cdc:	e021      	b.n	8006d22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fad7 	bl	8007298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69da      	ldr	r2, [r3, #28]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69d9      	ldr	r1, [r3, #28]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	021a      	lsls	r2, r3, #8
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	61da      	str	r2, [r3, #28]
      break;
 8006d1e:	e000      	b.n	8006d22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006d20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_TIM_ConfigClockSource+0x18>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e0b3      	b.n	8006eb4 <HAL_TIM_ConfigClockSource+0x180>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d84:	d03e      	beq.n	8006e04 <HAL_TIM_ConfigClockSource+0xd0>
 8006d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8a:	f200 8087 	bhi.w	8006e9c <HAL_TIM_ConfigClockSource+0x168>
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d92:	f000 8085 	beq.w	8006ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8006d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9a:	d87f      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x168>
 8006d9c:	2b70      	cmp	r3, #112	; 0x70
 8006d9e:	d01a      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0xa2>
 8006da0:	2b70      	cmp	r3, #112	; 0x70
 8006da2:	d87b      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x168>
 8006da4:	2b60      	cmp	r3, #96	; 0x60
 8006da6:	d050      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x116>
 8006da8:	2b60      	cmp	r3, #96	; 0x60
 8006daa:	d877      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x168>
 8006dac:	2b50      	cmp	r3, #80	; 0x50
 8006dae:	d03c      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0xf6>
 8006db0:	2b50      	cmp	r3, #80	; 0x50
 8006db2:	d873      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x168>
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	d058      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x136>
 8006db8:	2b40      	cmp	r3, #64	; 0x40
 8006dba:	d86f      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x168>
 8006dbc:	2b30      	cmp	r3, #48	; 0x30
 8006dbe:	d064      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x156>
 8006dc0:	2b30      	cmp	r3, #48	; 0x30
 8006dc2:	d86b      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x168>
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d060      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x156>
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d867      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x168>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d05c      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x156>
 8006dd0:	2b10      	cmp	r3, #16
 8006dd2:	d05a      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006dd4:	e062      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6899      	ldr	r1, [r3, #8]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f000 fb21 	bl	800742c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006df8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	609a      	str	r2, [r3, #8]
      break;
 8006e02:	e04e      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6899      	ldr	r1, [r3, #8]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f000 fb0a 	bl	800742c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e26:	609a      	str	r2, [r3, #8]
      break;
 8006e28:	e03b      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6859      	ldr	r1, [r3, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f000 fa7e 	bl	8007338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2150      	movs	r1, #80	; 0x50
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fad7 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006e48:	e02b      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6859      	ldr	r1, [r3, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f000 fa9d 	bl	8007396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2160      	movs	r1, #96	; 0x60
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fac7 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006e68:	e01b      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6859      	ldr	r1, [r3, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f000 fa5e 	bl	8007338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2140      	movs	r1, #64	; 0x40
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fab7 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006e88:	e00b      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f000 faae 	bl	80073f6 <TIM_ITRx_SetConfig>
        break;
 8006e9a:	e002      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e9c:	bf00      	nop
 8006e9e:	e000      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006ea0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a34      	ldr	r2, [pc, #208]	; (8007004 <TIM_Base_SetConfig+0xe4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00f      	beq.n	8006f58 <TIM_Base_SetConfig+0x38>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3e:	d00b      	beq.n	8006f58 <TIM_Base_SetConfig+0x38>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a31      	ldr	r2, [pc, #196]	; (8007008 <TIM_Base_SetConfig+0xe8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d007      	beq.n	8006f58 <TIM_Base_SetConfig+0x38>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a30      	ldr	r2, [pc, #192]	; (800700c <TIM_Base_SetConfig+0xec>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d003      	beq.n	8006f58 <TIM_Base_SetConfig+0x38>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a2f      	ldr	r2, [pc, #188]	; (8007010 <TIM_Base_SetConfig+0xf0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d108      	bne.n	8006f6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a25      	ldr	r2, [pc, #148]	; (8007004 <TIM_Base_SetConfig+0xe4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d01b      	beq.n	8006faa <TIM_Base_SetConfig+0x8a>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f78:	d017      	beq.n	8006faa <TIM_Base_SetConfig+0x8a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a22      	ldr	r2, [pc, #136]	; (8007008 <TIM_Base_SetConfig+0xe8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d013      	beq.n	8006faa <TIM_Base_SetConfig+0x8a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a21      	ldr	r2, [pc, #132]	; (800700c <TIM_Base_SetConfig+0xec>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00f      	beq.n	8006faa <TIM_Base_SetConfig+0x8a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a20      	ldr	r2, [pc, #128]	; (8007010 <TIM_Base_SetConfig+0xf0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00b      	beq.n	8006faa <TIM_Base_SetConfig+0x8a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a1f      	ldr	r2, [pc, #124]	; (8007014 <TIM_Base_SetConfig+0xf4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d007      	beq.n	8006faa <TIM_Base_SetConfig+0x8a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a1e      	ldr	r2, [pc, #120]	; (8007018 <TIM_Base_SetConfig+0xf8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d003      	beq.n	8006faa <TIM_Base_SetConfig+0x8a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a1d      	ldr	r2, [pc, #116]	; (800701c <TIM_Base_SetConfig+0xfc>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d108      	bne.n	8006fbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a08      	ldr	r2, [pc, #32]	; (8007004 <TIM_Base_SetConfig+0xe4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d103      	bne.n	8006ff0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	615a      	str	r2, [r3, #20]
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40010000 	.word	0x40010000
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800
 8007010:	40000c00 	.word	0x40000c00
 8007014:	40014000 	.word	0x40014000
 8007018:	40014400 	.word	0x40014400
 800701c:	40014800 	.word	0x40014800

08007020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f023 0201 	bic.w	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0303 	bic.w	r3, r3, #3
 8007056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f023 0302 	bic.w	r3, r3, #2
 8007068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <TIM_OC1_SetConfig+0xc8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d10c      	bne.n	8007096 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f023 0308 	bic.w	r3, r3, #8
 8007082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f023 0304 	bic.w	r3, r3, #4
 8007094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a13      	ldr	r2, [pc, #76]	; (80070e8 <TIM_OC1_SetConfig+0xc8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d111      	bne.n	80070c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	621a      	str	r2, [r3, #32]
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	40010000 	.word	0x40010000

080070ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	f023 0210 	bic.w	r2, r3, #16
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f023 0320 	bic.w	r3, r3, #32
 8007136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a1e      	ldr	r2, [pc, #120]	; (80071c0 <TIM_OC2_SetConfig+0xd4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d10d      	bne.n	8007168 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <TIM_OC2_SetConfig+0xd4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d113      	bne.n	8007198 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800717e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	4313      	orrs	r3, r2
 800718a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4313      	orrs	r3, r2
 8007196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	621a      	str	r2, [r3, #32]
}
 80071b2:	bf00      	nop
 80071b4:	371c      	adds	r7, #28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	40010000 	.word	0x40010000

080071c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800720c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	021b      	lsls	r3, r3, #8
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a1d      	ldr	r2, [pc, #116]	; (8007294 <TIM_OC3_SetConfig+0xd0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d10d      	bne.n	800723e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	4313      	orrs	r3, r2
 8007234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800723c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a14      	ldr	r2, [pc, #80]	; (8007294 <TIM_OC3_SetConfig+0xd0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d113      	bne.n	800726e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800724c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	011b      	lsls	r3, r3, #4
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	621a      	str	r2, [r3, #32]
}
 8007288:	bf00      	nop
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	40010000 	.word	0x40010000

08007298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	021b      	lsls	r3, r3, #8
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	031b      	lsls	r3, r3, #12
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a10      	ldr	r2, [pc, #64]	; (8007334 <TIM_OC4_SetConfig+0x9c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d109      	bne.n	800730c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	019b      	lsls	r3, r3, #6
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	621a      	str	r2, [r3, #32]
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	40010000 	.word	0x40010000

08007338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	f023 0201 	bic.w	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f023 030a 	bic.w	r3, r3, #10
 8007374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007396:	b480      	push	{r7}
 8007398:	b087      	sub	sp, #28
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0210 	bic.w	r2, r3, #16
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	031b      	lsls	r3, r3, #12
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	f043 0307 	orr.w	r3, r3, #7
 8007418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	609a      	str	r2, [r3, #8]
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	021a      	lsls	r2, r3, #8
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	431a      	orrs	r2, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4313      	orrs	r3, r2
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4313      	orrs	r3, r2
 8007458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	609a      	str	r2, [r3, #8]
}
 8007460:	bf00      	nop
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f003 031f 	and.w	r3, r3, #31
 800747e:	2201      	movs	r2, #1
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a1a      	ldr	r2, [r3, #32]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	43db      	mvns	r3, r3
 800748e:	401a      	ands	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a1a      	ldr	r2, [r3, #32]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f003 031f 	and.w	r3, r3, #31
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	fa01 f303 	lsl.w	r3, r1, r3
 80074a4:	431a      	orrs	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
	...

080074b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d101      	bne.n	80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074cc:	2302      	movs	r3, #2
 80074ce:	e050      	b.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1c      	ldr	r2, [pc, #112]	; (8007580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d018      	beq.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d013      	beq.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a18      	ldr	r2, [pc, #96]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d00e      	beq.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a16      	ldr	r2, [pc, #88]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d009      	beq.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a15      	ldr	r2, [pc, #84]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d004      	beq.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a13      	ldr	r2, [pc, #76]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d10c      	bne.n	8007560 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800754c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	4313      	orrs	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40010000 	.word	0x40010000
 8007584:	40000400 	.word	0x40000400
 8007588:	40000800 	.word	0x40000800
 800758c:	40000c00 	.word	0x40000c00
 8007590:	40014000 	.word	0x40014000

08007594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075bc:	b084      	sub	sp, #16
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	f107 001c 	add.w	r0, r7, #28
 80075ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d122      	bne.n	800761a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80075e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d105      	bne.n	800760e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 fac6 	bl	8008ba0 <USB_CoreReset>
 8007614:	4603      	mov	r3, r0
 8007616:	73fb      	strb	r3, [r7, #15]
 8007618:	e01a      	b.n	8007650 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 faba 	bl	8008ba0 <USB_CoreReset>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	639a      	str	r2, [r3, #56]	; 0x38
 8007642:	e005      	b.n	8007650 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	2b01      	cmp	r3, #1
 8007654:	d10b      	bne.n	800766e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f043 0206 	orr.w	r2, r3, #6
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f043 0220 	orr.w	r2, r3, #32
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800767a:	b004      	add	sp, #16
 800767c:	4770      	bx	lr
	...

08007680 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	4613      	mov	r3, r2
 800768c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	2b02      	cmp	r3, #2
 8007692:	d165      	bne.n	8007760 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4a41      	ldr	r2, [pc, #260]	; (800779c <USB_SetTurnaroundTime+0x11c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d906      	bls.n	80076aa <USB_SetTurnaroundTime+0x2a>
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4a40      	ldr	r2, [pc, #256]	; (80077a0 <USB_SetTurnaroundTime+0x120>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d202      	bcs.n	80076aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80076a4:	230f      	movs	r3, #15
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	e062      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	4a3c      	ldr	r2, [pc, #240]	; (80077a0 <USB_SetTurnaroundTime+0x120>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d306      	bcc.n	80076c0 <USB_SetTurnaroundTime+0x40>
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	4a3b      	ldr	r2, [pc, #236]	; (80077a4 <USB_SetTurnaroundTime+0x124>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d202      	bcs.n	80076c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80076ba:	230e      	movs	r3, #14
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	e057      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	4a38      	ldr	r2, [pc, #224]	; (80077a4 <USB_SetTurnaroundTime+0x124>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d306      	bcc.n	80076d6 <USB_SetTurnaroundTime+0x56>
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4a37      	ldr	r2, [pc, #220]	; (80077a8 <USB_SetTurnaroundTime+0x128>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d202      	bcs.n	80076d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80076d0:	230d      	movs	r3, #13
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	e04c      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	4a33      	ldr	r2, [pc, #204]	; (80077a8 <USB_SetTurnaroundTime+0x128>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d306      	bcc.n	80076ec <USB_SetTurnaroundTime+0x6c>
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	4a32      	ldr	r2, [pc, #200]	; (80077ac <USB_SetTurnaroundTime+0x12c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d802      	bhi.n	80076ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80076e6:	230c      	movs	r3, #12
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e041      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	4a2f      	ldr	r2, [pc, #188]	; (80077ac <USB_SetTurnaroundTime+0x12c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d906      	bls.n	8007702 <USB_SetTurnaroundTime+0x82>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4a2e      	ldr	r2, [pc, #184]	; (80077b0 <USB_SetTurnaroundTime+0x130>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d802      	bhi.n	8007702 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80076fc:	230b      	movs	r3, #11
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e036      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	4a2a      	ldr	r2, [pc, #168]	; (80077b0 <USB_SetTurnaroundTime+0x130>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d906      	bls.n	8007718 <USB_SetTurnaroundTime+0x98>
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4a29      	ldr	r2, [pc, #164]	; (80077b4 <USB_SetTurnaroundTime+0x134>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d802      	bhi.n	8007718 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007712:	230a      	movs	r3, #10
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	e02b      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4a26      	ldr	r2, [pc, #152]	; (80077b4 <USB_SetTurnaroundTime+0x134>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d906      	bls.n	800772e <USB_SetTurnaroundTime+0xae>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4a25      	ldr	r2, [pc, #148]	; (80077b8 <USB_SetTurnaroundTime+0x138>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d202      	bcs.n	800772e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007728:	2309      	movs	r3, #9
 800772a:	617b      	str	r3, [r7, #20]
 800772c:	e020      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4a21      	ldr	r2, [pc, #132]	; (80077b8 <USB_SetTurnaroundTime+0x138>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d306      	bcc.n	8007744 <USB_SetTurnaroundTime+0xc4>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	4a20      	ldr	r2, [pc, #128]	; (80077bc <USB_SetTurnaroundTime+0x13c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d802      	bhi.n	8007744 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800773e:	2308      	movs	r3, #8
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e015      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4a1d      	ldr	r2, [pc, #116]	; (80077bc <USB_SetTurnaroundTime+0x13c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d906      	bls.n	800775a <USB_SetTurnaroundTime+0xda>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4a1c      	ldr	r2, [pc, #112]	; (80077c0 <USB_SetTurnaroundTime+0x140>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d202      	bcs.n	800775a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007754:	2307      	movs	r3, #7
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e00a      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800775a:	2306      	movs	r3, #6
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	e007      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007766:	2309      	movs	r3, #9
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	e001      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800776c:	2309      	movs	r3, #9
 800776e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	029b      	lsls	r3, r3, #10
 8007784:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007788:	431a      	orrs	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	00d8acbf 	.word	0x00d8acbf
 80077a0:	00e4e1c0 	.word	0x00e4e1c0
 80077a4:	00f42400 	.word	0x00f42400
 80077a8:	01067380 	.word	0x01067380
 80077ac:	011a499f 	.word	0x011a499f
 80077b0:	01312cff 	.word	0x01312cff
 80077b4:	014ca43f 	.word	0x014ca43f
 80077b8:	016e3600 	.word	0x016e3600
 80077bc:	01a6ab1f 	.word	0x01a6ab1f
 80077c0:	01e84800 	.word	0x01e84800

080077c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f043 0201 	orr.w	r2, r3, #1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f023 0201 	bic.w	r2, r3, #1
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d106      	bne.n	8007834 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60da      	str	r2, [r3, #12]
 8007832:	e00b      	b.n	800784c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60da      	str	r2, [r3, #12]
 8007846:	e001      	b.n	800784c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e003      	b.n	8007854 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800784c:	2032      	movs	r0, #50	; 0x32
 800784e:	f7fa fe71 	bl	8002534 <HAL_Delay>

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800785c:	b084      	sub	sp, #16
 800785e:	b580      	push	{r7, lr}
 8007860:	b086      	sub	sp, #24
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800786a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007876:	2300      	movs	r3, #0
 8007878:	613b      	str	r3, [r7, #16]
 800787a:	e009      	b.n	8007890 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	3340      	adds	r3, #64	; 0x40
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	2200      	movs	r2, #0
 8007888:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	3301      	adds	r3, #1
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b0e      	cmp	r3, #14
 8007894:	d9f2      	bls.n	800787c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d11c      	bne.n	80078d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078aa:	f043 0302 	orr.w	r3, r3, #2
 80078ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	639a      	str	r2, [r3, #56]	; 0x38
 80078d4:	e00b      	b.n	80078ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078f4:	461a      	mov	r2, r3
 80078f6:	2300      	movs	r3, #0
 80078f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007900:	4619      	mov	r1, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007908:	461a      	mov	r2, r3
 800790a:	680b      	ldr	r3, [r1, #0]
 800790c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	2b01      	cmp	r3, #1
 8007912:	d10c      	bne.n	800792e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d104      	bne.n	8007924 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800791a:	2100      	movs	r1, #0
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f949 	bl	8007bb4 <USB_SetDevSpeed>
 8007922:	e008      	b.n	8007936 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007924:	2101      	movs	r1, #1
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f944 	bl	8007bb4 <USB_SetDevSpeed>
 800792c:	e003      	b.n	8007936 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800792e:	2103      	movs	r1, #3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f93f 	bl	8007bb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007936:	2110      	movs	r1, #16
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f8f3 	bl	8007b24 <USB_FlushTxFifo>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f911 	bl	8007b70 <USB_FlushRxFifo>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795e:	461a      	mov	r2, r3
 8007960:	2300      	movs	r3, #0
 8007962:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796a:	461a      	mov	r2, r3
 800796c:	2300      	movs	r3, #0
 800796e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007976:	461a      	mov	r2, r3
 8007978:	2300      	movs	r3, #0
 800797a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800797c:	2300      	movs	r3, #0
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	e043      	b.n	8007a0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007998:	d118      	bne.n	80079cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ac:	461a      	mov	r2, r3
 80079ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	e013      	b.n	80079de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c2:	461a      	mov	r2, r3
 80079c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	e008      	b.n	80079de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d8:	461a      	mov	r2, r3
 80079da:	2300      	movs	r3, #0
 80079dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ea:	461a      	mov	r2, r3
 80079ec:	2300      	movs	r3, #0
 80079ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fc:	461a      	mov	r2, r3
 80079fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	3301      	adds	r3, #1
 8007a08:	613b      	str	r3, [r7, #16]
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d3b7      	bcc.n	8007982 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a12:	2300      	movs	r3, #0
 8007a14:	613b      	str	r3, [r7, #16]
 8007a16:	e043      	b.n	8007aa0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a2e:	d118      	bne.n	8007a62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a42:	461a      	mov	r2, r3
 8007a44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	e013      	b.n	8007a74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	e008      	b.n	8007a74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6e:	461a      	mov	r2, r3
 8007a70:	2300      	movs	r3, #0
 8007a72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a80:	461a      	mov	r2, r3
 8007a82:	2300      	movs	r3, #0
 8007a84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a92:	461a      	mov	r2, r3
 8007a94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d3b7      	bcc.n	8007a18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ac8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d105      	bne.n	8007adc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	f043 0210 	orr.w	r2, r3, #16
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699a      	ldr	r2, [r3, #24]
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <USB_DevInit+0x2c4>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	f043 0208 	orr.w	r2, r3, #8
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d107      	bne.n	8007b10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b08:	f043 0304 	orr.w	r3, r3, #4
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b1c:	b004      	add	sp, #16
 8007b1e:	4770      	bx	lr
 8007b20:	803c3800 	.word	0x803c3800

08007b24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	019b      	lsls	r3, r3, #6
 8007b36:	f043 0220 	orr.w	r2, r3, #32
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3301      	adds	r3, #1
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4a09      	ldr	r2, [pc, #36]	; (8007b6c <USB_FlushTxFifo+0x48>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d901      	bls.n	8007b50 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e006      	b.n	8007b5e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f003 0320 	and.w	r3, r3, #32
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d0f0      	beq.n	8007b3e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	00030d40 	.word	0x00030d40

08007b70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2210      	movs	r2, #16
 8007b80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3301      	adds	r3, #1
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <USB_FlushRxFifo+0x40>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d901      	bls.n	8007b94 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e006      	b.n	8007ba2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b10      	cmp	r3, #16
 8007b9e:	d0f0      	beq.n	8007b82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	00030d40 	.word	0x00030d40

08007bb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	68f9      	ldr	r1, [r7, #12]
 8007bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b087      	sub	sp, #28
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f003 0306 	and.w	r3, r3, #6
 8007bfe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007c06:	2300      	movs	r3, #0
 8007c08:	75fb      	strb	r3, [r7, #23]
 8007c0a:	e00a      	b.n	8007c22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d002      	beq.n	8007c18 <USB_GetDevSpeed+0x32>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b06      	cmp	r3, #6
 8007c16:	d102      	bne.n	8007c1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	75fb      	strb	r3, [r7, #23]
 8007c1c:	e001      	b.n	8007c22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007c1e:	230f      	movs	r3, #15
 8007c20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	785b      	ldrb	r3, [r3, #1]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d13a      	bne.n	8007cc2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c52:	69da      	ldr	r2, [r3, #28]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	f003 030f 	and.w	r3, r3, #15
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	68f9      	ldr	r1, [r7, #12]
 8007c66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d155      	bne.n	8007d30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	78db      	ldrb	r3, [r3, #3]
 8007c9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ca0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	059b      	lsls	r3, r3, #22
 8007ca6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	e036      	b.n	8007d30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc8:	69da      	ldr	r2, [r3, #28]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd8:	041b      	lsls	r3, r3, #16
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d11a      	bne.n	8007d30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	78db      	ldrb	r3, [r3, #3]
 8007d14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d16:	430b      	orrs	r3, r1
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	0151      	lsls	r1, r2, #5
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	440a      	add	r2, r1
 8007d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
	...

08007d40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	785b      	ldrb	r3, [r3, #1]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d161      	bne.n	8007e20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d72:	d11f      	bne.n	8007db4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	0151      	lsls	r1, r2, #5
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	440a      	add	r2, r1
 8007daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007db2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	f003 030f 	and.w	r3, r3, #15
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	43db      	mvns	r3, r3
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dde:	69da      	ldr	r2, [r3, #28]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	f003 030f 	and.w	r3, r3, #15
 8007de8:	2101      	movs	r1, #1
 8007dea:	fa01 f303 	lsl.w	r3, r1, r3
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	43db      	mvns	r3, r3
 8007df2:	68f9      	ldr	r1, [r7, #12]
 8007df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007df8:	4013      	ands	r3, r2
 8007dfa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	0159      	lsls	r1, r3, #5
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	440b      	add	r3, r1
 8007e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e16:	4619      	mov	r1, r3
 8007e18:	4b35      	ldr	r3, [pc, #212]	; (8007ef0 <USB_DeactivateEndpoint+0x1b0>)
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	600b      	str	r3, [r1, #0]
 8007e1e:	e060      	b.n	8007ee2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e36:	d11f      	bne.n	8007e78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	0151      	lsls	r1, r2, #5
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	440a      	add	r2, r1
 8007e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	0151      	lsls	r1, r2, #5
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	440a      	add	r2, r1
 8007e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	2101      	movs	r1, #1
 8007e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	43db      	mvns	r3, r3
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e98:	4013      	ands	r3, r2
 8007e9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea2:	69da      	ldr	r2, [r3, #28]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	2101      	movs	r1, #1
 8007eae:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	43db      	mvns	r3, r3
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	0159      	lsls	r1, r3, #5
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	440b      	add	r3, r1
 8007ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eda:	4619      	mov	r1, r3
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <USB_DeactivateEndpoint+0x1b4>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	ec337800 	.word	0xec337800
 8007ef4:	eff37800 	.word	0xeff37800

08007ef8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	785b      	ldrb	r3, [r3, #1]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	f040 815c 	bne.w	80081d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d132      	bne.n	8007f88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	0151      	lsls	r1, r2, #5
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	440a      	add	r2, r1
 8007f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	0151      	lsls	r1, r2, #5
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	440a      	add	r2, r1
 8007f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	0151      	lsls	r1, r2, #5
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	440a      	add	r2, r1
 8007f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f80:	0cdb      	lsrs	r3, r3, #19
 8007f82:	04db      	lsls	r3, r3, #19
 8007f84:	6113      	str	r3, [r2, #16]
 8007f86:	e074      	b.n	8008072 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa2:	0cdb      	lsrs	r3, r3, #19
 8007fa4:	04db      	lsls	r3, r3, #19
 8007fa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	0151      	lsls	r1, r2, #5
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd8:	691a      	ldr	r2, [r3, #16]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6959      	ldr	r1, [r3, #20]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	440b      	add	r3, r1
 8007fe4:	1e59      	subs	r1, r3, #1
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fee:	04d9      	lsls	r1, r3, #19
 8007ff0:	4b9d      	ldr	r3, [pc, #628]	; (8008268 <USB_EPStartXfer+0x370>)
 8007ff2:	400b      	ands	r3, r1
 8007ff4:	69b9      	ldr	r1, [r7, #24]
 8007ff6:	0148      	lsls	r0, r1, #5
 8007ff8:	69f9      	ldr	r1, [r7, #28]
 8007ffa:	4401      	add	r1, r0
 8007ffc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008000:	4313      	orrs	r3, r2
 8008002:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008010:	691a      	ldr	r2, [r3, #16]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800801a:	69b9      	ldr	r1, [r7, #24]
 800801c:	0148      	lsls	r0, r1, #5
 800801e:	69f9      	ldr	r1, [r7, #28]
 8008020:	4401      	add	r1, r0
 8008022:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008026:	4313      	orrs	r3, r2
 8008028:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	78db      	ldrb	r3, [r3, #3]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d11f      	bne.n	8008072 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	69fa      	ldr	r2, [r7, #28]
 8008046:	440a      	add	r2, r1
 8008048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800804c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008050:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	0151      	lsls	r1, r2, #5
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	440a      	add	r2, r1
 8008068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008070:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d14b      	bne.n	8008110 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d009      	beq.n	8008094 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	461a      	mov	r2, r3
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	78db      	ldrb	r3, [r3, #3]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d128      	bne.n	80080ee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d110      	bne.n	80080ce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	e00f      	b.n	80080ee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	0151      	lsls	r1, r2, #5
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	440a      	add	r2, r1
 80080e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	0151      	lsls	r1, r2, #5
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	440a      	add	r2, r1
 8008104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008108:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	e12f      	b.n	8008370 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	0151      	lsls	r1, r2, #5
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	440a      	add	r2, r1
 8008126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800812a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800812e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	78db      	ldrb	r3, [r3, #3]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d015      	beq.n	8008164 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 8117 	beq.w	8008370 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	f003 030f 	and.w	r3, r3, #15
 8008152:	2101      	movs	r1, #1
 8008154:	fa01 f303 	lsl.w	r3, r1, r3
 8008158:	69f9      	ldr	r1, [r7, #28]
 800815a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800815e:	4313      	orrs	r3, r2
 8008160:	634b      	str	r3, [r1, #52]	; 0x34
 8008162:	e105      	b.n	8008370 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008170:	2b00      	cmp	r3, #0
 8008172:	d110      	bne.n	8008196 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	0151      	lsls	r1, r2, #5
 8008186:	69fa      	ldr	r2, [r7, #28]
 8008188:	440a      	add	r2, r1
 800818a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800818e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	e00f      	b.n	80081b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	0151      	lsls	r1, r2, #5
 80081a8:	69fa      	ldr	r2, [r7, #28]
 80081aa:	440a      	add	r2, r1
 80081ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	68d9      	ldr	r1, [r3, #12]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	781a      	ldrb	r2, [r3, #0]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	b298      	uxth	r0, r3
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	4603      	mov	r3, r0
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 fa2b 	bl	8008626 <USB_WritePacket>
 80081d0:	e0ce      	b.n	8008370 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	0151      	lsls	r1, r2, #5
 80081e4:	69fa      	ldr	r2, [r7, #28]
 80081e6:	440a      	add	r2, r1
 80081e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ec:	0cdb      	lsrs	r3, r3, #19
 80081ee:	04db      	lsls	r3, r3, #19
 80081f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	0151      	lsls	r1, r2, #5
 8008204:	69fa      	ldr	r2, [r7, #28]
 8008206:	440a      	add	r2, r1
 8008208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800820c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008210:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008214:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d126      	bne.n	800826c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008234:	69b9      	ldr	r1, [r7, #24]
 8008236:	0148      	lsls	r0, r1, #5
 8008238:	69f9      	ldr	r1, [r7, #28]
 800823a:	4401      	add	r1, r0
 800823c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008240:	4313      	orrs	r3, r2
 8008242:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	69fa      	ldr	r2, [r7, #28]
 8008258:	440a      	add	r2, r1
 800825a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800825e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008262:	6113      	str	r3, [r2, #16]
 8008264:	e036      	b.n	80082d4 <USB_EPStartXfer+0x3dc>
 8008266:	bf00      	nop
 8008268:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	695a      	ldr	r2, [r3, #20]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	4413      	add	r3, r2
 8008276:	1e5a      	subs	r2, r3, #1
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008280:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	8afb      	ldrh	r3, [r7, #22]
 8008292:	04d9      	lsls	r1, r3, #19
 8008294:	4b39      	ldr	r3, [pc, #228]	; (800837c <USB_EPStartXfer+0x484>)
 8008296:	400b      	ands	r3, r1
 8008298:	69b9      	ldr	r1, [r7, #24]
 800829a:	0148      	lsls	r0, r1, #5
 800829c:	69f9      	ldr	r1, [r7, #28]
 800829e:	4401      	add	r1, r0
 80082a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082a4:	4313      	orrs	r3, r2
 80082a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b4:	691a      	ldr	r2, [r3, #16]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	8af9      	ldrh	r1, [r7, #22]
 80082bc:	fb01 f303 	mul.w	r3, r1, r3
 80082c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082c4:	69b9      	ldr	r1, [r7, #24]
 80082c6:	0148      	lsls	r0, r1, #5
 80082c8:	69f9      	ldr	r1, [r7, #28]
 80082ca:	4401      	add	r1, r0
 80082cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082d0:	4313      	orrs	r3, r2
 80082d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d10d      	bne.n	80082f6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d009      	beq.n	80082f6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	68d9      	ldr	r1, [r3, #12]
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f2:	460a      	mov	r2, r1
 80082f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	78db      	ldrb	r3, [r3, #3]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d128      	bne.n	8008350 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830a:	2b00      	cmp	r3, #0
 800830c:	d110      	bne.n	8008330 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	4413      	add	r3, r2
 8008316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	0151      	lsls	r1, r2, #5
 8008320:	69fa      	ldr	r2, [r7, #28]
 8008322:	440a      	add	r2, r1
 8008324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008328:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	e00f      	b.n	8008350 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	0151      	lsls	r1, r2, #5
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	440a      	add	r2, r1
 8008346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800834a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800834e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69ba      	ldr	r2, [r7, #24]
 8008360:	0151      	lsls	r1, r2, #5
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	440a      	add	r2, r1
 8008366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800836a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800836e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	1ff80000 	.word	0x1ff80000

08008380 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	4613      	mov	r3, r2
 800838c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b01      	cmp	r3, #1
 800839e:	f040 80cd 	bne.w	800853c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d132      	bne.n	8008410 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	0151      	lsls	r1, r2, #5
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	440a      	add	r2, r1
 80083c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	0151      	lsls	r1, r2, #5
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	440a      	add	r2, r1
 80083e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	0151      	lsls	r1, r2, #5
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	440a      	add	r2, r1
 8008404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008408:	0cdb      	lsrs	r3, r3, #19
 800840a:	04db      	lsls	r3, r3, #19
 800840c:	6113      	str	r3, [r2, #16]
 800840e:	e04e      	b.n	80084ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	0151      	lsls	r1, r2, #5
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	440a      	add	r2, r1
 8008426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842a:	0cdb      	lsrs	r3, r3, #19
 800842c:	04db      	lsls	r3, r3, #19
 800842e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	440a      	add	r2, r1
 8008446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800844a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800844e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008452:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	695a      	ldr	r2, [r3, #20]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	429a      	cmp	r2, r3
 800845e:	d903      	bls.n	8008468 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	0151      	lsls	r1, r2, #5
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	440a      	add	r2, r1
 800847e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008486:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008494:	691a      	ldr	r2, [r3, #16]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800849e:	6939      	ldr	r1, [r7, #16]
 80084a0:	0148      	lsls	r0, r1, #5
 80084a2:	6979      	ldr	r1, [r7, #20]
 80084a4:	4401      	add	r1, r0
 80084a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80084aa:	4313      	orrs	r3, r2
 80084ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d11e      	bne.n	80084f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d009      	beq.n	80084d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c8:	461a      	mov	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	0151      	lsls	r1, r2, #5
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	440a      	add	r2, r1
 80084e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	e092      	b.n	8008618 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	0151      	lsls	r1, r2, #5
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	440a      	add	r2, r1
 8008508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800850c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008510:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d07e      	beq.n	8008618 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	2101      	movs	r1, #1
 800852c:	fa01 f303 	lsl.w	r3, r1, r3
 8008530:	6979      	ldr	r1, [r7, #20]
 8008532:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008536:	4313      	orrs	r3, r2
 8008538:	634b      	str	r3, [r1, #52]	; 0x34
 800853a:	e06d      	b.n	8008618 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	0151      	lsls	r1, r2, #5
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	440a      	add	r2, r1
 8008552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008556:	0cdb      	lsrs	r3, r3, #19
 8008558:	04db      	lsls	r3, r3, #19
 800855a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	0151      	lsls	r1, r2, #5
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	440a      	add	r2, r1
 8008572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008576:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800857a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800857e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085bc:	691a      	ldr	r2, [r3, #16]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085c6:	6939      	ldr	r1, [r7, #16]
 80085c8:	0148      	lsls	r0, r1, #5
 80085ca:	6979      	ldr	r1, [r7, #20]
 80085cc:	4401      	add	r1, r0
 80085ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085d2:	4313      	orrs	r3, r2
 80085d4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d10d      	bne.n	80085f8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d009      	beq.n	80085f8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	68d9      	ldr	r1, [r3, #12]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f4:	460a      	mov	r2, r1
 80085f6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	0151      	lsls	r1, r2, #5
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	440a      	add	r2, r1
 800860e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008612:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008616:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	371c      	adds	r7, #28
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008626:	b480      	push	{r7}
 8008628:	b089      	sub	sp, #36	; 0x24
 800862a:	af00      	add	r7, sp, #0
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	4611      	mov	r1, r2
 8008632:	461a      	mov	r2, r3
 8008634:	460b      	mov	r3, r1
 8008636:	71fb      	strb	r3, [r7, #7]
 8008638:	4613      	mov	r3, r2
 800863a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008644:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008648:	2b00      	cmp	r3, #0
 800864a:	d11a      	bne.n	8008682 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800864c:	88bb      	ldrh	r3, [r7, #4]
 800864e:	3303      	adds	r3, #3
 8008650:	089b      	lsrs	r3, r3, #2
 8008652:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008654:	2300      	movs	r3, #0
 8008656:	61bb      	str	r3, [r7, #24]
 8008658:	e00f      	b.n	800867a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	031a      	lsls	r2, r3, #12
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	4413      	add	r3, r2
 8008662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008666:	461a      	mov	r2, r3
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	3304      	adds	r3, #4
 8008672:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	3301      	adds	r3, #1
 8008678:	61bb      	str	r3, [r7, #24]
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	429a      	cmp	r2, r3
 8008680:	d3eb      	bcc.n	800865a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3724      	adds	r7, #36	; 0x24
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008690:	b480      	push	{r7}
 8008692:	b089      	sub	sp, #36	; 0x24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	4613      	mov	r3, r2
 800869c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80086a6:	88fb      	ldrh	r3, [r7, #6]
 80086a8:	3303      	adds	r3, #3
 80086aa:	089b      	lsrs	r3, r3, #2
 80086ac:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80086ae:	2300      	movs	r3, #0
 80086b0:	61bb      	str	r3, [r7, #24]
 80086b2:	e00b      	b.n	80086cc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	601a      	str	r2, [r3, #0]
    pDest++;
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	3304      	adds	r3, #4
 80086c4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	3301      	adds	r3, #1
 80086ca:	61bb      	str	r3, [r7, #24]
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d3ef      	bcc.n	80086b4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80086d4:	69fb      	ldr	r3, [r7, #28]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3724      	adds	r7, #36	; 0x24
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	785b      	ldrb	r3, [r3, #1]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d12c      	bne.n	8008758 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	4413      	add	r3, r2
 8008706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	db12      	blt.n	8008736 <USB_EPSetStall+0x54>
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00f      	beq.n	8008736 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	0151      	lsls	r1, r2, #5
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	440a      	add	r2, r1
 800872c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008730:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008734:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4413      	add	r3, r2
 800873e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	0151      	lsls	r1, r2, #5
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	440a      	add	r2, r1
 800874c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	e02b      	b.n	80087b0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	015a      	lsls	r2, r3, #5
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4413      	add	r3, r2
 8008760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	db12      	blt.n	8008790 <USB_EPSetStall+0xae>
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00f      	beq.n	8008790 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	0151      	lsls	r1, r2, #5
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	440a      	add	r2, r1
 8008786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800878a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800878e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087be:	b480      	push	{r7}
 80087c0:	b085      	sub	sp, #20
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d128      	bne.n	800882c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	0151      	lsls	r1, r2, #5
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	440a      	add	r2, r1
 80087f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	78db      	ldrb	r3, [r3, #3]
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d003      	beq.n	800880a <USB_EPClearStall+0x4c>
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	78db      	ldrb	r3, [r3, #3]
 8008806:	2b02      	cmp	r3, #2
 8008808:	d138      	bne.n	800887c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	0151      	lsls	r1, r2, #5
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	440a      	add	r2, r1
 8008820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	e027      	b.n	800887c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	0151      	lsls	r1, r2, #5
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	440a      	add	r2, r1
 8008842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800884a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	78db      	ldrb	r3, [r3, #3]
 8008850:	2b03      	cmp	r3, #3
 8008852:	d003      	beq.n	800885c <USB_EPClearStall+0x9e>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	78db      	ldrb	r3, [r3, #3]
 8008858:	2b02      	cmp	r3, #2
 800885a:	d10f      	bne.n	800887c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	440a      	add	r2, r1
 8008872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800887a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800888a:	b480      	push	{r7}
 800888c:	b085      	sub	sp, #20
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	460b      	mov	r3, r1
 8008894:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80088ac:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80088be:	68f9      	ldr	r1, [r7, #12]
 80088c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088c4:	4313      	orrs	r3, r2
 80088c6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088f0:	f023 0303 	bic.w	r3, r3, #3
 80088f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008904:	f023 0302 	bic.w	r3, r3, #2
 8008908:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008932:	f023 0303 	bic.w	r3, r3, #3
 8008936:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008946:	f043 0302 	orr.w	r3, r3, #2
 800894a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800895a:	b480      	push	{r7}
 800895c:	b085      	sub	sp, #20
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4013      	ands	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008972:	68fb      	ldr	r3, [r7, #12]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	4013      	ands	r3, r2
 80089a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	0c1b      	lsrs	r3, r3, #16
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	4013      	ands	r3, r2
 80089d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	b29b      	uxth	r3, r3
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	4013      	ands	r3, r2
 8008a14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a16:	68bb      	ldr	r3, [r7, #8]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a46:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	f003 030f 	and.w	r3, r3, #15
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	fa22 f303 	lsr.w	r3, r2, r3
 8008a54:	01db      	lsls	r3, r3, #7
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a72:	68bb      	ldr	r3, [r7, #8]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	371c      	adds	r7, #28
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	f003 0301 	and.w	r3, r3, #1
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008aba:	f023 0307 	bic.w	r3, r3, #7
 8008abe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ad2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
	...

08008ae4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	460b      	mov	r3, r1
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	333c      	adds	r3, #60	; 0x3c
 8008afa:	3304      	adds	r3, #4
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	4a26      	ldr	r2, [pc, #152]	; (8008b9c <USB_EP0_OutStart+0xb8>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d90a      	bls.n	8008b1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b18:	d101      	bne.n	8008b1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e037      	b.n	8008b8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b24:	461a      	mov	r2, r3
 8008b26:	2300      	movs	r3, #0
 8008b28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b4c:	f043 0318 	orr.w	r3, r3, #24
 8008b50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008b64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b66:	7afb      	ldrb	r3, [r7, #11]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d10f      	bne.n	8008b8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008b8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	4f54300a 	.word	0x4f54300a

08008ba0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4a13      	ldr	r2, [pc, #76]	; (8008c04 <USB_CoreReset+0x64>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d901      	bls.n	8008bbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e01b      	b.n	8008bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	daf2      	bge.n	8008bac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	f043 0201 	orr.w	r2, r3, #1
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4a09      	ldr	r2, [pc, #36]	; (8008c04 <USB_CoreReset+0x64>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d901      	bls.n	8008be8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e006      	b.n	8008bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d0f0      	beq.n	8008bd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	00030d40 	.word	0x00030d40

08008c08 <getNumberDigits>:
	int pwmDutyCycle;
	int timeOn; // time on is in seconds - timeOn '-1' is interpreted as indefinitely
	bool isInputValid;
};

int getNumberDigits(int inputNumber){
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
	int numberOfDigits = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]

	if (inputNumber==0){
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10c      	bne.n	8008c34 <getNumberDigits+0x2c>
		return 1;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e00e      	b.n	8008c3c <getNumberDigits+0x34>
	}

	while(inputNumber!=0) {
	    inputNumber=inputNumber/10;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a09      	ldr	r2, [pc, #36]	; (8008c48 <getNumberDigits+0x40>)
 8008c22:	fb82 1203 	smull	r1, r2, r2, r3
 8008c26:	1092      	asrs	r2, r2, #2
 8008c28:	17db      	asrs	r3, r3, #31
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	607b      	str	r3, [r7, #4]
	    numberOfDigits++;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3301      	adds	r3, #1
 8008c32:	60fb      	str	r3, [r7, #12]
	while(inputNumber!=0) {
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1f1      	bne.n	8008c1e <getNumberDigits+0x16>
	}
	return numberOfDigits;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	66666667 	.word	0x66666667

08008c4c <isInputInt>:


bool isInputInt(char * inputBuffer, int startIdx, int endIdx) {
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
	int idx = startIdx;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	617b      	str	r3, [r7, #20]
	while (idx <= endIdx) {
 8008c5c:	e01a      	b.n	8008c94 <isInputInt+0x48>
		if (!isdigit(inputBuffer[idx])) {
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	3301      	adds	r3, #1
 8008c68:	4a11      	ldr	r2, [pc, #68]	; (8008cb0 <isInputInt+0x64>)
 8008c6a:	4413      	add	r3, r2
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	f003 0304 	and.w	r3, r3, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10b      	bne.n	8008c8e <isInputInt+0x42>
			if (inputBuffer[idx] == ' ' && idx != startIdx){
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	2b20      	cmp	r3, #32
 8008c80:	d103      	bne.n	8008c8a <isInputInt+0x3e>
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d109      	bne.n	8008c9e <isInputInt+0x52>
				break;
			}
			return false;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e009      	b.n	8008ca2 <isInputInt+0x56>
		}
		idx++;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	3301      	adds	r3, #1
 8008c92:	617b      	str	r3, [r7, #20]
	while (idx <= endIdx) {
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	dde0      	ble.n	8008c5e <isInputInt+0x12>
 8008c9c:	e000      	b.n	8008ca0 <isInputInt+0x54>
				break;
 8008c9e:	bf00      	nop
	}
	return true;
 8008ca0:	2301      	movs	r3, #1
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	0800f00e 	.word	0x0800f00e

08008cb4 <parseAndValidateInput>:


struct actuationInfo parseAndValidateInput(char * inputBuffer){
 8008cb4:	b590      	push	{r4, r7, lr}
 8008cb6:	b09b      	sub	sp, #108	; 0x6c
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
			pX on ZZZ% - turn on port number X on ZZ percent of the time using PWM 'always on'
			pX on YY ZZZ% - turn on port number X for YY seconds ZZ percent of the time using PWM

			Any other command
	*/
	size_t len = strlen(inputBuffer);
 8008cbe:	6838      	ldr	r0, [r7, #0]
 8008cc0:	f7f7 fa98 	bl	80001f4 <strlen>
 8008cc4:	6678      	str	r0, [r7, #100]	; 0x64

	struct actuationInfo info;
	info.isInputValid = false;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	// all on command
	if (strstr(inputBuffer, "all off") != NULL) {
 8008ccc:	49b1      	ldr	r1, [pc, #708]	; (8008f94 <parseAndValidateInput+0x2e0>)
 8008cce:	6838      	ldr	r0, [r7, #0]
 8008cd0:	f003 ff84 	bl	800cbdc <strstr>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d012      	beq.n	8008d00 <parseAndValidateInput+0x4c>
		info.pin = -1;
 8008cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cde:	643b      	str	r3, [r7, #64]	; 0x40
		info.pwmDutyCycle = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	647b      	str	r3, [r7, #68]	; 0x44
		info.timeOn = -1;
 8008ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ce8:	64bb      	str	r3, [r7, #72]	; 0x48
		info.isInputValid = true;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		return info;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	461c      	mov	r4, r3
 8008cf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008cfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008cfe:	e1f7      	b.n	80090f0 <parseAndValidateInput+0x43c>
	}

	// all off command
	if (strstr(inputBuffer, "all on") != NULL) {
 8008d00:	49a5      	ldr	r1, [pc, #660]	; (8008f98 <parseAndValidateInput+0x2e4>)
 8008d02:	6838      	ldr	r0, [r7, #0]
 8008d04:	f003 ff6a 	bl	800cbdc <strstr>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d012      	beq.n	8008d34 <parseAndValidateInput+0x80>
		info.pin = -1;
 8008d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d12:	643b      	str	r3, [r7, #64]	; 0x40
		info.pwmDutyCycle = 100;
 8008d14:	2364      	movs	r3, #100	; 0x64
 8008d16:	647b      	str	r3, [r7, #68]	; 0x44
		info.timeOn = -1;
 8008d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d1c:	64bb      	str	r3, [r7, #72]	; 0x48
		info.isInputValid = true;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		return info;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	461c      	mov	r4, r3
 8008d28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008d32:	e1dd      	b.n	80090f0 <parseAndValidateInput+0x43c>
	}

	// All other valid formats starts with 'pX '
	if (inputBuffer[0]!='p' || inputBuffer[2]!=' '){
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	2b70      	cmp	r3, #112	; 0x70
 8008d3a:	d104      	bne.n	8008d46 <parseAndValidateInput+0x92>
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	3302      	adds	r3, #2
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	d007      	beq.n	8008d56 <parseAndValidateInput+0xa2>
		return info;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	461c      	mov	r4, r3
 8008d4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008d54:	e1cc      	b.n	80090f0 <parseAndValidateInput+0x43c>
	}

	// Check if X in pX is int and valid
	if (!isdigit(inputBuffer[1]) || atoi(&inputBuffer[1]) > 4 || atoi(&inputBuffer[1]) == 0){
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	4a8f      	ldr	r2, [pc, #572]	; (8008f9c <parseAndValidateInput+0x2e8>)
 8008d60:	4413      	add	r3, r2
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00f      	beq.n	8008d8c <parseAndValidateInput+0xd8>
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	4618      	mov	r0, r3
 8008d72:	f003 f823 	bl	800bdbc <atoi>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	dc07      	bgt.n	8008d8c <parseAndValidateInput+0xd8>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	4618      	mov	r0, r3
 8008d82:	f003 f81b 	bl	800bdbc <atoi>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d107      	bne.n	8008d9c <parseAndValidateInput+0xe8>
		return info;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	461c      	mov	r4, r3
 8008d90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008d9a:	e1a9      	b.n	80090f0 <parseAndValidateInput+0x43c>
	} else {
		info.pin = atoi(&inputBuffer[1]) - 1; // User uses 1-indexed ports
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	4618      	mov	r0, r3
 8008da2:	f003 f80b 	bl	800bdbc <atoi>
 8008da6:	4603      	mov	r3, r0
 8008da8:	3b01      	subs	r3, #1
 8008daa:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// 'pX on' command
	if (len==5 && strstr(inputBuffer, "on") != NULL){
 8008dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dae:	2b05      	cmp	r3, #5
 8008db0:	d116      	bne.n	8008de0 <parseAndValidateInput+0x12c>
 8008db2:	497b      	ldr	r1, [pc, #492]	; (8008fa0 <parseAndValidateInput+0x2ec>)
 8008db4:	6838      	ldr	r0, [r7, #0]
 8008db6:	f003 ff11 	bl	800cbdc <strstr>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00f      	beq.n	8008de0 <parseAndValidateInput+0x12c>
		info.pwmDutyCycle = 100;
 8008dc0:	2364      	movs	r3, #100	; 0x64
 8008dc2:	647b      	str	r3, [r7, #68]	; 0x44
		info.timeOn = -1;
 8008dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dc8:	64bb      	str	r3, [r7, #72]	; 0x48
		info.isInputValid = true;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		return info;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	461c      	mov	r4, r3
 8008dd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008dd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008dda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008dde:	e187      	b.n	80090f0 <parseAndValidateInput+0x43c>
	}

	// 'pX off' command
	if (len==6 && strstr(inputBuffer, "off") != NULL){
 8008de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008de2:	2b06      	cmp	r3, #6
 8008de4:	d116      	bne.n	8008e14 <parseAndValidateInput+0x160>
 8008de6:	496f      	ldr	r1, [pc, #444]	; (8008fa4 <parseAndValidateInput+0x2f0>)
 8008de8:	6838      	ldr	r0, [r7, #0]
 8008dea:	f003 fef7 	bl	800cbdc <strstr>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00f      	beq.n	8008e14 <parseAndValidateInput+0x160>
		info.pwmDutyCycle = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	647b      	str	r3, [r7, #68]	; 0x44
		info.timeOn = -1;
 8008df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dfc:	64bb      	str	r3, [r7, #72]	; 0x48
		info.isInputValid = true;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		return info;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	461c      	mov	r4, r3
 8008e08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008e12:	e16d      	b.n	80090f0 <parseAndValidateInput+0x43c>
	}

	// All other valid formats has ' ' at index 5 and contains keyword "on"
	if (inputBuffer[5]!=' ' && strstr(inputBuffer, "on")!=NULL){
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	3305      	adds	r3, #5
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	2b20      	cmp	r3, #32
 8008e1c:	d00e      	beq.n	8008e3c <parseAndValidateInput+0x188>
 8008e1e:	4960      	ldr	r1, [pc, #384]	; (8008fa0 <parseAndValidateInput+0x2ec>)
 8008e20:	6838      	ldr	r0, [r7, #0]
 8008e22:	f003 fedb 	bl	800cbdc <strstr>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d007      	beq.n	8008e3c <parseAndValidateInput+0x188>
		return info;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	461c      	mov	r4, r3
 8008e30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008e3a:	e159      	b.n	80090f0 <parseAndValidateInput+0x43c>
	}

	// 'pX on YY' command
	if (len<=8 && inputBuffer[len-1]!='%'){
 8008e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d842      	bhi.n	8008ec8 <parseAndValidateInput+0x214>
 8008e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e44:	3b01      	subs	r3, #1
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	4413      	add	r3, r2
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b25      	cmp	r3, #37	; 0x25
 8008e4e:	d03b      	beq.n	8008ec8 <parseAndValidateInput+0x214>

		// Check all characters from index 6 an onwards are int.
		if (!isInputInt(inputBuffer, 6, len-1)){
 8008e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e52:	3b01      	subs	r3, #1
 8008e54:	461a      	mov	r2, r3
 8008e56:	2106      	movs	r1, #6
 8008e58:	6838      	ldr	r0, [r7, #0]
 8008e5a:	f7ff fef7 	bl	8008c4c <isInputInt>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f083 0301 	eor.w	r3, r3, #1
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d007      	beq.n	8008e7a <parseAndValidateInput+0x1c6>
			return info;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	461c      	mov	r4, r3
 8008e6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008e78:	e13a      	b.n	80090f0 <parseAndValidateInput+0x43c>
		}
		// Save user specified actuation time of pin
		char *timeOn[3] = {0};
 8008e7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	605a      	str	r2, [r3, #4]
 8008e84:	609a      	str	r2, [r3, #8]
		memcpy(timeOn, &inputBuffer[6], len-6+1);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	1d99      	adds	r1, r3, #6
 8008e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e8c:	1f5a      	subs	r2, r3, #5
 8008e8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008e92:	4618      	mov	r0, r3
 8008e94:	f002 ffda 	bl	800be4c <memcpy>

		info.pwmDutyCycle = 100;
 8008e98:	2364      	movs	r3, #100	; 0x64
 8008e9a:	647b      	str	r3, [r7, #68]	; 0x44
		//info.timeOn = (int)strtol(*timeOn,(char **)NULL, 10) * 1000;
		info.timeOn = atoi(timeOn) * 1000;
 8008e9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f002 ff8b 	bl	800bdbc <atoi>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008eac:	fb02 f303 	mul.w	r3, r2, r3
 8008eb0:	64bb      	str	r3, [r7, #72]	; 0x48
		info.isInputValid = true;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		return info;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	461c      	mov	r4, r3
 8008ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008ec6:	e113      	b.n	80090f0 <parseAndValidateInput+0x43c>
	}

	// All other valid commands ends with '%'
	if (inputBuffer[len-1]!='%'){
 8008ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	4413      	add	r3, r2
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b25      	cmp	r3, #37	; 0x25
 8008ed4:	d007      	beq.n	8008ee6 <parseAndValidateInput+0x232>
		return info;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	461c      	mov	r4, r3
 8008eda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008ee4:	e104      	b.n	80090f0 <parseAndValidateInput+0x43c>
	}

	// 'pX on ZZZ%'
	if (strlen(inputBuffer)<=10){
 8008ee6:	6838      	ldr	r0, [r7, #0]
 8008ee8:	f7f7 f984 	bl	80001f4 <strlen>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b0a      	cmp	r3, #10
 8008ef0:	d85e      	bhi.n	8008fb0 <parseAndValidateInput+0x2fc>
		// Check all characters from index 6 an onwards are int.
		if (!isInputInt(inputBuffer, 6, len-2)){
 8008ef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ef4:	3b02      	subs	r3, #2
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	2106      	movs	r1, #6
 8008efa:	6838      	ldr	r0, [r7, #0]
 8008efc:	f7ff fea6 	bl	8008c4c <isInputInt>
 8008f00:	4603      	mov	r3, r0
 8008f02:	f083 0301 	eor.w	r3, r3, #1
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d007      	beq.n	8008f1c <parseAndValidateInput+0x268>
			return info;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	461c      	mov	r4, r3
 8008f10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008f1a:	e0e9      	b.n	80090f0 <parseAndValidateInput+0x43c>
		}

		// Save user specified pwm of pin
		char *pwmPct[4] = {0};
 8008f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f20:	2200      	movs	r2, #0
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	605a      	str	r2, [r3, #4]
 8008f26:	609a      	str	r2, [r3, #8]
 8008f28:	60da      	str	r2, [r3, #12]
		memcpy(pwmPct, &inputBuffer[6], len-2-5);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	1d99      	adds	r1, r3, #6
 8008f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f30:	1fda      	subs	r2, r3, #7
 8008f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f36:	4618      	mov	r0, r3
 8008f38:	f002 ff88 	bl	800be4c <memcpy>
		int pwmPctTmp = atoi(pwmPct);
 8008f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f40:	4618      	mov	r0, r3
 8008f42:	f002 ff3b 	bl	800bdbc <atoi>
 8008f46:	6578      	str	r0, [r7, #84]	; 0x54
		int pwmDutyCycle = (int)(pwmPctTmp/100.0f * maxPWM);
 8008f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f52:	eddf 6a15 	vldr	s13, [pc, #84]	; 8008fa8 <parseAndValidateInput+0x2f4>
 8008f56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008f5a:	4b14      	ldr	r3, [pc, #80]	; (8008fac <parseAndValidateInput+0x2f8>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f6e:	ee17 3a90 	vmov	r3, s15
 8008f72:	653b      	str	r3, [r7, #80]	; 0x50

		info.pwmDutyCycle = pwmDutyCycle;
 8008f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f76:	647b      	str	r3, [r7, #68]	; 0x44
		info.timeOn = -1;
 8008f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f7c:	64bb      	str	r3, [r7, #72]	; 0x48
		info.isInputValid = true;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		return info;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	461c      	mov	r4, r3
 8008f88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008f92:	e0ad      	b.n	80090f0 <parseAndValidateInput+0x43c>
 8008f94:	0800ed30 	.word	0x0800ed30
 8008f98:	0800ed38 	.word	0x0800ed38
 8008f9c:	0800f00e 	.word	0x0800f00e
 8008fa0:	0800ed40 	.word	0x0800ed40
 8008fa4:	0800ed44 	.word	0x0800ed44
 8008fa8:	42c80000 	.word	0x42c80000
 8008fac:	2000006c 	.word	0x2000006c
	}

	// 'pX on YY ZZZ%'
	if (strlen(inputBuffer)<=13){
 8008fb0:	6838      	ldr	r0, [r7, #0]
 8008fb2:	f7f7 f91f 	bl	80001f4 <strlen>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b0d      	cmp	r3, #13
 8008fba:	f200 8092 	bhi.w	80090e2 <parseAndValidateInput+0x42e>

		// Check all characters from index 6 an onwards are int.
		if (!isInputInt(inputBuffer, 6, 7)){
 8008fbe:	2207      	movs	r2, #7
 8008fc0:	2106      	movs	r1, #6
 8008fc2:	6838      	ldr	r0, [r7, #0]
 8008fc4:	f7ff fe42 	bl	8008c4c <isInputInt>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	f083 0301 	eor.w	r3, r3, #1
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d007      	beq.n	8008fe4 <parseAndValidateInput+0x330>
			return info;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	461c      	mov	r4, r3
 8008fd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008fdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008fe2:	e085      	b.n	80090f0 <parseAndValidateInput+0x43c>
		}

		// Save user specified actuation time of pin
		char *timeOn[3] = {0};
 8008fe4:	f107 0318 	add.w	r3, r7, #24
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	605a      	str	r2, [r3, #4]
 8008fee:	609a      	str	r2, [r3, #8]
		memcpy(timeOn, &inputBuffer[6], 2);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	3306      	adds	r3, #6
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	833b      	strh	r3, [r7, #24]
		info.timeOn = atoi(timeOn)*1000;
 8008ffa:	f107 0318 	add.w	r3, r7, #24
 8008ffe:	4618      	mov	r0, r3
 8009000:	f002 fedc 	bl	800bdbc <atoi>
 8009004:	4603      	mov	r3, r0
 8009006:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800900a:	fb02 f303 	mul.w	r3, r2, r3
 800900e:	64bb      	str	r3, [r7, #72]	; 0x48

		int lenTimeOn = getNumberDigits(info.timeOn/1000);
 8009010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009012:	4a39      	ldr	r2, [pc, #228]	; (80090f8 <parseAndValidateInput+0x444>)
 8009014:	fb82 1203 	smull	r1, r2, r2, r3
 8009018:	1192      	asrs	r2, r2, #6
 800901a:	17db      	asrs	r3, r3, #31
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	4618      	mov	r0, r3
 8009020:	f7ff fdf2 	bl	8008c08 <getNumberDigits>
 8009024:	6638      	str	r0, [r7, #96]	; 0x60

		// Check all characters from % start and onwards are int.
		if (!isInputInt(inputBuffer, 6+lenTimeOn+1, len-2)){
 8009026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009028:	1dd9      	adds	r1, r3, #7
 800902a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800902c:	3b02      	subs	r3, #2
 800902e:	461a      	mov	r2, r3
 8009030:	6838      	ldr	r0, [r7, #0]
 8009032:	f7ff fe0b 	bl	8008c4c <isInputInt>
 8009036:	4603      	mov	r3, r0
 8009038:	f083 0301 	eor.w	r3, r3, #1
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d007      	beq.n	8009052 <parseAndValidateInput+0x39e>
			return info;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	461c      	mov	r4, r3
 8009046:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800904a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800904c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009050:	e04e      	b.n	80090f0 <parseAndValidateInput+0x43c>
		}

		// Save user specified pwm of pin
		char *pwmPct[4] = {0};
 8009052:	f107 0308 	add.w	r3, r7, #8
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	605a      	str	r2, [r3, #4]
 800905c:	609a      	str	r2, [r3, #8]
 800905e:	60da      	str	r2, [r3, #12]
		memcpy(pwmPct, &inputBuffer[6+lenTimeOn+1], len-2-lenTimeOn-5);
 8009060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009062:	3307      	adds	r3, #7
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	18d1      	adds	r1, r2, r3
 8009068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800906a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	1fda      	subs	r2, r3, #7
 8009070:	f107 0308 	add.w	r3, r7, #8
 8009074:	4618      	mov	r0, r3
 8009076:	f002 fee9 	bl	800be4c <memcpy>
		int pwmPctTmp = atoi(pwmPct);
 800907a:	f107 0308 	add.w	r3, r7, #8
 800907e:	4618      	mov	r0, r3
 8009080:	f002 fe9c 	bl	800bdbc <atoi>
 8009084:	65f8      	str	r0, [r7, #92]	; 0x5c

		if (pwmPctTmp > 100){
 8009086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009088:	2b64      	cmp	r3, #100	; 0x64
 800908a:	dd07      	ble.n	800909c <parseAndValidateInput+0x3e8>
			return info;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	461c      	mov	r4, r3
 8009090:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800909a:	e029      	b.n	80090f0 <parseAndValidateInput+0x43c>
		}

		int pwmDutyCycle = (int)(pwmPctTmp/100.0f * maxPWM);
 800909c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090a6:	eddf 6a15 	vldr	s13, [pc, #84]	; 80090fc <parseAndValidateInput+0x448>
 80090aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80090ae:	4b14      	ldr	r3, [pc, #80]	; (8009100 <parseAndValidateInput+0x44c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090c2:	ee17 3a90 	vmov	r3, s15
 80090c6:	65bb      	str	r3, [r7, #88]	; 0x58

		info.pwmDutyCycle = pwmDutyCycle;
 80090c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090ca:	647b      	str	r3, [r7, #68]	; 0x44
		info.isInputValid = true;
 80090cc:	2301      	movs	r3, #1
 80090ce:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		return info;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	461c      	mov	r4, r3
 80090d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80090da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80090e0:	e006      	b.n	80090f0 <parseAndValidateInput+0x43c>
	}
	return info;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	461c      	mov	r4, r3
 80090e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80090ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	376c      	adds	r7, #108	; 0x6c
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd90      	pop	{r4, r7, pc}
 80090f8:	10624dd3 	.word	0x10624dd3
 80090fc:	42c80000 	.word	0x42c80000
 8009100:	2000006c 	.word	0x2000006c
 8009104:	00000000 	.word	0x00000000

08009108 <si7051Temp>:
 *      Author: alema
 */

#include "si7051.h"
I2C_HandleTypeDef hi2c1;
float si7051Temp(){
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af02      	add	r7, sp, #8
	uint8_t addata[2];
	uint16_t si7051_temp = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	81fb      	strh	r3, [r7, #14]

	const uint8_t si7051ADDR = 0x40;
 8009112:	2340      	movs	r3, #64	; 0x40
 8009114:	737b      	strb	r3, [r7, #13]
	const uint8_t readSensorADDR = 0xF3;
 8009116:	23f3      	movs	r3, #243	; 0xf3
 8009118:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef ret;

	//Poll I2C device
	ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(si7051ADDR << 1), &readSensorADDR, 1, 50);
 800911a:	7b7b      	ldrb	r3, [r7, #13]
 800911c:	b29b      	uxth	r3, r3
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	b299      	uxth	r1, r3
 8009122:	1dfa      	adds	r2, r7, #7
 8009124:	2332      	movs	r3, #50	; 0x32
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	2301      	movs	r3, #1
 800912a:	482d      	ldr	r0, [pc, #180]	; (80091e0 <si7051Temp+0xd8>)
 800912c:	f7fa fd8a 	bl	8003c44 <HAL_I2C_Master_Transmit>
 8009130:	4603      	mov	r3, r0
 8009132:	733b      	strb	r3, [r7, #12]
	//delay is needed for response time
	HAL_Delay(10);
 8009134:	200a      	movs	r0, #10
 8009136:	f7f9 f9fd 	bl	8002534 <HAL_Delay>
	ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(si7051ADDR << 1)|0x01, addata, 2, 50);
 800913a:	7b7b      	ldrb	r3, [r7, #13]
 800913c:	b29b      	uxth	r3, r3
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	b29b      	uxth	r3, r3
 8009142:	f043 0301 	orr.w	r3, r3, #1
 8009146:	b299      	uxth	r1, r3
 8009148:	f107 0208 	add.w	r2, r7, #8
 800914c:	2332      	movs	r3, #50	; 0x32
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	2302      	movs	r3, #2
 8009152:	4823      	ldr	r0, [pc, #140]	; (80091e0 <si7051Temp+0xd8>)
 8009154:	f7fa fe74 	bl	8003e40 <HAL_I2C_Master_Receive>
 8009158:	4603      	mov	r3, r0
 800915a:	733b      	strb	r3, [r7, #12]
	si7051_temp = addata[0] << 8 | addata[1];
 800915c:	7a3b      	ldrb	r3, [r7, #8]
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	b21a      	sxth	r2, r3
 8009162:	7a7b      	ldrb	r3, [r7, #9]
 8009164:	b21b      	sxth	r3, r3
 8009166:	4313      	orrs	r3, r2
 8009168:	b21b      	sxth	r3, r3
 800916a:	81fb      	strh	r3, [r7, #14]

	if(ret == HAL_OK){
 800916c:	7b3b      	ldrb	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d123      	bne.n	80091ba <si7051Temp+0xb2>
		return (175.72*si7051_temp) / 65536 - 46.85;
 8009172:	89fb      	ldrh	r3, [r7, #14]
 8009174:	4618      	mov	r0, r3
 8009176:	f7f7 f9ed 	bl	8000554 <__aeabi_i2d>
 800917a:	a315      	add	r3, pc, #84	; (adr r3, 80091d0 <si7051Temp+0xc8>)
 800917c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009180:	f7f7 fa52 	bl	8000628 <__aeabi_dmul>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4610      	mov	r0, r2
 800918a:	4619      	mov	r1, r3
 800918c:	f04f 0200 	mov.w	r2, #0
 8009190:	4b14      	ldr	r3, [pc, #80]	; (80091e4 <si7051Temp+0xdc>)
 8009192:	f7f7 fb73 	bl	800087c <__aeabi_ddiv>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4610      	mov	r0, r2
 800919c:	4619      	mov	r1, r3
 800919e:	a30e      	add	r3, pc, #56	; (adr r3, 80091d8 <si7051Temp+0xd0>)
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	f7f7 f888 	bl	80002b8 <__aeabi_dsub>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4610      	mov	r0, r2
 80091ae:	4619      	mov	r1, r3
 80091b0:	f7f7 fd12 	bl	8000bd8 <__aeabi_d2f>
 80091b4:	ee07 0a90 	vmov	s15, r0
 80091b8:	e004      	b.n	80091c4 <si7051Temp+0xbc>
	}
	else{
		return ret;
 80091ba:	7b3b      	ldrb	r3, [r7, #12]
 80091bc:	ee07 3a90 	vmov	s15, r3
 80091c0:	eef8 7a67 	vcvt.f32.u32	s15, s15

	}
}
 80091c4:	eeb0 0a67 	vmov.f32	s0, s15
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	3d70a3d7 	.word	0x3d70a3d7
 80091d4:	4065f70a 	.word	0x4065f70a
 80091d8:	cccccccd 	.word	0xcccccccd
 80091dc:	40476ccc 	.word	0x40476ccc
 80091e0:	20000f40 	.word	0x20000f40
 80091e4:	40f00000 	.word	0x40f00000

080091e8 <USBprintf>:
#include "stdarg.h"
#include "string.h"
#include "stdio.h"
#include "usbd_cdc_if.h"

void USBprintf(const char* data, ...){
 80091e8:	b40f      	push	{r0, r1, r2, r3}
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b0a6      	sub	sp, #152	; 0x98
 80091ee:	af02      	add	r7, sp, #8
	va_list args;
	va_start(args, data);
 80091f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80091f4:	677b      	str	r3, [r7, #116]	; 0x74

	while(*data != '\0'){
 80091f6:	e0dd      	b.n	80093b4 <USBprintf+0x1cc>
		//if data index is a int
		if(*data == 'd'){
 80091f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	2b64      	cmp	r3, #100	; 0x64
 8009200:	d125      	bne.n	800924e <USBprintf+0x66>
			int i = va_arg(args,uint32_t);
 8009202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009204:	1d1a      	adds	r2, r3, #4
 8009206:	677a      	str	r2, [r7, #116]	; 0x74
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	67bb      	str	r3, [r7, #120]	; 0x78
			char dataPrint[32] = {'\0'};
 800920c:	2300      	movs	r3, #0
 800920e:	607b      	str	r3, [r7, #4]
 8009210:	f107 0308 	add.w	r3, r7, #8
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	605a      	str	r2, [r3, #4]
 800921a:	609a      	str	r2, [r3, #8]
 800921c:	60da      	str	r2, [r3, #12]
 800921e:	611a      	str	r2, [r3, #16]
 8009220:	615a      	str	r2, [r3, #20]
 8009222:	619a      	str	r2, [r3, #24]
			snprintf(dataPrint, sizeof(dataPrint), "%d", i);
 8009224:	1d38      	adds	r0, r7, #4
 8009226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009228:	4a79      	ldr	r2, [pc, #484]	; (8009410 <USBprintf+0x228>)
 800922a:	2120      	movs	r1, #32
 800922c:	f003 fca2 	bl	800cb74 <sniprintf>
			CDC_Transmit_FS((uint8_t*)dataPrint, strlen(dataPrint));
 8009230:	1d3b      	adds	r3, r7, #4
 8009232:	4618      	mov	r0, r3
 8009234:	f7f6 ffde 	bl	80001f4 <strlen>
 8009238:	4603      	mov	r3, r0
 800923a:	b29a      	uxth	r2, r3
 800923c:	1d3b      	adds	r3, r7, #4
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f002 f94b 	bl	800b4dc <CDC_Transmit_FS>
			HAL_Delay(2); //working min delay is 2ms 
 8009246:	2002      	movs	r0, #2
 8009248:	f7f9 f974 	bl	8002534 <HAL_Delay>
 800924c:	e0ad      	b.n	80093aa <USBprintf+0x1c2>
		}
		//if char
		else if(*data == 'c'){
 800924e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b63      	cmp	r3, #99	; 0x63
 8009256:	d121      	bne.n	800929c <USBprintf+0xb4>
			char s = va_arg(args,uint32_t);
 8009258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800925a:	1d1a      	adds	r2, r3, #4
 800925c:	677a      	str	r2, [r7, #116]	; 0x74
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			char dataPrint[sizeof(s)+1] = {'\0'}; //2+1 -> 2 for return and newline character 1 for null character added by snprintf
 8009264:	2300      	movs	r3, #0
 8009266:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			snprintf(dataPrint, sizeof(dataPrint), "%c", s);
 800926a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800926e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8009272:	4a68      	ldr	r2, [pc, #416]	; (8009414 <USBprintf+0x22c>)
 8009274:	2102      	movs	r1, #2
 8009276:	f003 fc7d 	bl	800cb74 <sniprintf>
			CDC_Transmit_FS((uint8_t*)dataPrint, strlen(dataPrint));
 800927a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800927e:	4618      	mov	r0, r3
 8009280:	f7f6 ffb8 	bl	80001f4 <strlen>
 8009284:	4603      	mov	r3, r0
 8009286:	b29a      	uxth	r2, r3
 8009288:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800928c:	4611      	mov	r1, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f002 f924 	bl	800b4dc <CDC_Transmit_FS>
			HAL_Delay(2);
 8009294:	2002      	movs	r0, #2
 8009296:	f7f9 f94d 	bl	8002534 <HAL_Delay>
 800929a:	e086      	b.n	80093aa <USBprintf+0x1c2>
		}
		//if float
		else if(*data == 'f'){
 800929c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	2b66      	cmp	r3, #102	; 0x66
 80092a4:	d12e      	bne.n	8009304 <USBprintf+0x11c>
			double d = va_arg(args,double);
 80092a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092a8:	3307      	adds	r3, #7
 80092aa:	f023 0307 	bic.w	r3, r3, #7
 80092ae:	f103 0208 	add.w	r2, r3, #8
 80092b2:	677a      	str	r2, [r7, #116]	; 0x74
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			char dataPrint[32] = {'\0'};
 80092bc:	2300      	movs	r3, #0
 80092be:	607b      	str	r3, [r7, #4]
 80092c0:	f107 0308 	add.w	r3, r7, #8
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	605a      	str	r2, [r3, #4]
 80092ca:	609a      	str	r2, [r3, #8]
 80092cc:	60da      	str	r2, [r3, #12]
 80092ce:	611a      	str	r2, [r3, #16]
 80092d0:	615a      	str	r2, [r3, #20]
 80092d2:	619a      	str	r2, [r3, #24]
			snprintf(dataPrint, sizeof(dataPrint), "%.2f", d);
 80092d4:	1d38      	adds	r0, r7, #4
 80092d6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80092da:	e9cd 2300 	strd	r2, r3, [sp]
 80092de:	4a4e      	ldr	r2, [pc, #312]	; (8009418 <USBprintf+0x230>)
 80092e0:	2120      	movs	r1, #32
 80092e2:	f003 fc47 	bl	800cb74 <sniprintf>
			CDC_Transmit_FS((uint8_t*)dataPrint, strlen(dataPrint));
 80092e6:	1d3b      	adds	r3, r7, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7f6 ff83 	bl	80001f4 <strlen>
 80092ee:	4603      	mov	r3, r0
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	1d3b      	adds	r3, r7, #4
 80092f4:	4611      	mov	r1, r2
 80092f6:	4618      	mov	r0, r3
 80092f8:	f002 f8f0 	bl	800b4dc <CDC_Transmit_FS>
			HAL_Delay(2);
 80092fc:	2002      	movs	r0, #2
 80092fe:	f7f9 f919 	bl	8002534 <HAL_Delay>
 8009302:	e052      	b.n	80093aa <USBprintf+0x1c2>
		}
		//if string
		else if(*data == 's'){
 8009304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b73      	cmp	r3, #115	; 0x73
 800930c:	d124      	bne.n	8009358 <USBprintf+0x170>
			char* s = va_arg(args,char*);
 800930e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009310:	1d1a      	adds	r2, r3, #4
 8009312:	677a      	str	r2, [r7, #116]	; 0x74
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			//limits the length of string to 100 characters
			char dataPrint[100+1] = {'\0'};
 800931a:	2300      	movs	r3, #0
 800931c:	607b      	str	r3, [r7, #4]
 800931e:	f107 0308 	add.w	r3, r7, #8
 8009322:	2261      	movs	r2, #97	; 0x61
 8009324:	2100      	movs	r1, #0
 8009326:	4618      	mov	r0, r3
 8009328:	f002 fd9e 	bl	800be68 <memset>
			snprintf(dataPrint, 100+2+1, "%s", s);
 800932c:	1d38      	adds	r0, r7, #4
 800932e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009332:	4a3a      	ldr	r2, [pc, #232]	; (800941c <USBprintf+0x234>)
 8009334:	2167      	movs	r1, #103	; 0x67
 8009336:	f003 fc1d 	bl	800cb74 <sniprintf>
			CDC_Transmit_FS((uint8_t*)dataPrint, strlen(dataPrint));
 800933a:	1d3b      	adds	r3, r7, #4
 800933c:	4618      	mov	r0, r3
 800933e:	f7f6 ff59 	bl	80001f4 <strlen>
 8009342:	4603      	mov	r3, r0
 8009344:	b29a      	uxth	r2, r3
 8009346:	1d3b      	adds	r3, r7, #4
 8009348:	4611      	mov	r1, r2
 800934a:	4618      	mov	r0, r3
 800934c:	f002 f8c6 	bl	800b4dc <CDC_Transmit_FS>
			HAL_Delay(2);
 8009350:	2002      	movs	r0, #2
 8009352:	f7f9 f8ef 	bl	8002534 <HAL_Delay>
 8009356:	e028      	b.n	80093aa <USBprintf+0x1c2>
		}
		else if(*data == 'X'){
 8009358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b58      	cmp	r3, #88	; 0x58
 8009360:	d123      	bne.n	80093aa <USBprintf+0x1c2>
			unsigned int X = va_arg(args,uint32_t);
 8009362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009364:	1d1a      	adds	r2, r3, #4
 8009366:	677a      	str	r2, [r7, #116]	; 0x74
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			//limits the length of string to 100 characters
			char dataPrint[100+1] = {'\0'};
 800936e:	2300      	movs	r3, #0
 8009370:	607b      	str	r3, [r7, #4]
 8009372:	f107 0308 	add.w	r3, r7, #8
 8009376:	2261      	movs	r2, #97	; 0x61
 8009378:	2100      	movs	r1, #0
 800937a:	4618      	mov	r0, r3
 800937c:	f002 fd74 	bl	800be68 <memset>
			snprintf(dataPrint, 100+1, "%X", X);
 8009380:	1d38      	adds	r0, r7, #4
 8009382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009386:	4a26      	ldr	r2, [pc, #152]	; (8009420 <USBprintf+0x238>)
 8009388:	2165      	movs	r1, #101	; 0x65
 800938a:	f003 fbf3 	bl	800cb74 <sniprintf>
			CDC_Transmit_FS((uint8_t*)dataPrint, strlen(dataPrint));
 800938e:	1d3b      	adds	r3, r7, #4
 8009390:	4618      	mov	r0, r3
 8009392:	f7f6 ff2f 	bl	80001f4 <strlen>
 8009396:	4603      	mov	r3, r0
 8009398:	b29a      	uxth	r2, r3
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f002 f89c 	bl	800b4dc <CDC_Transmit_FS>
			HAL_Delay(2);
 80093a4:	2002      	movs	r0, #2
 80093a6:	f7f9 f8c5 	bl	8002534 <HAL_Delay>
		}
		data++;
 80093aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093ae:	3301      	adds	r3, #1
 80093b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while(*data != '\0'){
 80093b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f47f af1c 	bne.w	80091f8 <USBprintf+0x10>
	}

	char dataPrint[3] = {'\0'};
 80093c0:	4b18      	ldr	r3, [pc, #96]	; (8009424 <USBprintf+0x23c>)
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80093c8:	2300      	movs	r3, #0
 80093ca:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	snprintf(dataPrint, 3, "%c%c", '\r','\n');
 80093ce:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80093d2:	230a      	movs	r3, #10
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	230d      	movs	r3, #13
 80093d8:	4a13      	ldr	r2, [pc, #76]	; (8009428 <USBprintf+0x240>)
 80093da:	2103      	movs	r1, #3
 80093dc:	f003 fbca 	bl	800cb74 <sniprintf>
	CDC_Transmit_FS((uint8_t*)dataPrint, strlen(dataPrint));
 80093e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7f6 ff05 	bl	80001f4 <strlen>
 80093ea:	4603      	mov	r3, r0
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f002 f871 	bl	800b4dc <CDC_Transmit_FS>
	HAL_Delay(2);
 80093fa:	2002      	movs	r0, #2
 80093fc:	f7f9 f89a 	bl	8002534 <HAL_Delay>
	va_end(args);
}
 8009400:	bf00      	nop
 8009402:	3790      	adds	r7, #144	; 0x90
 8009404:	46bd      	mov	sp, r7
 8009406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800940a:	b004      	add	sp, #16
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	0800ed48 	.word	0x0800ed48
 8009414:	0800ed4c 	.word	0x0800ed4c
 8009418:	0800ed50 	.word	0x0800ed50
 800941c:	0800ed58 	.word	0x0800ed58
 8009420:	0800ed5c 	.word	0x0800ed5c
 8009424:	0800ed68 	.word	0x0800ed68
 8009428:	0800ed60 	.word	0x0800ed60

0800942c <advance_pointer>:
};

//#pragma mark - Private Functions -

static void advance_pointer(cbuf_handle_t cbuf)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d105      	bne.n	8009446 <advance_pointer+0x1a>
 800943a:	4b19      	ldr	r3, [pc, #100]	; (80094a0 <advance_pointer+0x74>)
 800943c:	4a19      	ldr	r2, [pc, #100]	; (80094a4 <advance_pointer+0x78>)
 800943e:	2120      	movs	r1, #32
 8009440:	4819      	ldr	r0, [pc, #100]	; (80094a8 <advance_pointer+0x7c>)
 8009442:	f002 fc9d 	bl	800bd80 <__assert_func>

	if(circular_buf_full(cbuf))
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f9da 	bl	8009800 <circular_buf_full>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00b      	beq.n	800946a <advance_pointer+0x3e>
    {
        cbuf->tail = (cbuf->tail + 1) % cbuf->max;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	3301      	adds	r3, #1
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	68d2      	ldr	r2, [r2, #12]
 800945c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009460:	fb02 f201 	mul.w	r2, r2, r1
 8009464:	1a9a      	subs	r2, r3, r2
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	609a      	str	r2, [r3, #8]
    }

	cbuf->head = (cbuf->head + 1) % cbuf->max;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	3301      	adds	r3, #1
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	68d2      	ldr	r2, [r2, #12]
 8009474:	fbb3 f1f2 	udiv	r1, r3, r2
 8009478:	fb02 f201 	mul.w	r2, r2, r1
 800947c:	1a9a      	subs	r2, r3, r2
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	605a      	str	r2, [r3, #4]

	// We mark full because we will advance tail on the next time around
	cbuf->full = (cbuf->head == cbuf->tail);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	429a      	cmp	r2, r3
 800948c:	bf0c      	ite	eq
 800948e:	2301      	moveq	r3, #1
 8009490:	2300      	movne	r3, #0
 8009492:	b2da      	uxtb	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	751a      	strb	r2, [r3, #20]
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	0800ed70 	.word	0x0800ed70
 80094a4:	0800eeec 	.word	0x0800eeec
 80094a8:	0800ed78 	.word	0x0800ed78

080094ac <retreat_pointer>:

static void retreat_pointer(cbuf_handle_t cbuf)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d105      	bne.n	80094c6 <retreat_pointer+0x1a>
 80094ba:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <retreat_pointer+0x40>)
 80094bc:	4a0c      	ldr	r2, [pc, #48]	; (80094f0 <retreat_pointer+0x44>)
 80094be:	212f      	movs	r1, #47	; 0x2f
 80094c0:	480c      	ldr	r0, [pc, #48]	; (80094f4 <retreat_pointer+0x48>)
 80094c2:	f002 fc5d 	bl	800bd80 <__assert_func>

	cbuf->full = false;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	751a      	strb	r2, [r3, #20]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	3301      	adds	r3, #1
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	68d2      	ldr	r2, [r2, #12]
 80094d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80094da:	fb02 f201 	mul.w	r2, r2, r1
 80094de:	1a9a      	subs	r2, r3, r2
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	609a      	str	r2, [r3, #8]
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	0800ed70 	.word	0x0800ed70
 80094f0:	0800eefc 	.word	0x0800eefc
 80094f4:	0800ed78 	.word	0x0800ed78

080094f8 <circular_buf_add_input>:

void circular_buf_add_input(cbuf_handle_t cbuf){
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d105      	bne.n	8009512 <circular_buf_add_input+0x1a>
 8009506:	4b07      	ldr	r3, [pc, #28]	; (8009524 <circular_buf_add_input+0x2c>)
 8009508:	4a07      	ldr	r2, [pc, #28]	; (8009528 <circular_buf_add_input+0x30>)
 800950a:	2136      	movs	r1, #54	; 0x36
 800950c:	4807      	ldr	r0, [pc, #28]	; (800952c <circular_buf_add_input+0x34>)
 800950e:	f002 fc37 	bl	800bd80 <__assert_func>
	cbuf->noInputs += 1;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	1c5a      	adds	r2, r3, #1
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	611a      	str	r2, [r3, #16]
}
 800951c:	bf00      	nop
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	0800ed70 	.word	0x0800ed70
 8009528:	0800ef0c 	.word	0x0800ef0c
 800952c:	0800ed78 	.word	0x0800ed78

08009530 <circular_buf_remove_input>:

void circular_buf_remove_input(cbuf_handle_t cbuf){
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <circular_buf_remove_input+0x1a>
 800953e:	4b07      	ldr	r3, [pc, #28]	; (800955c <circular_buf_remove_input+0x2c>)
 8009540:	4a07      	ldr	r2, [pc, #28]	; (8009560 <circular_buf_remove_input+0x30>)
 8009542:	213b      	movs	r1, #59	; 0x3b
 8009544:	4807      	ldr	r0, [pc, #28]	; (8009564 <circular_buf_remove_input+0x34>)
 8009546:	f002 fc1b 	bl	800bd80 <__assert_func>
	cbuf->noInputs -= 1;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	1e5a      	subs	r2, r3, #1
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	611a      	str	r2, [r3, #16]
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	0800ed70 	.word	0x0800ed70
 8009560:	0800ef24 	.word	0x0800ef24
 8009564:	0800ed78 	.word	0x0800ed78

08009568 <circular_get_number_input>:

size_t circular_get_number_input(cbuf_handle_t cbuf){
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d105      	bne.n	8009582 <circular_get_number_input+0x1a>
 8009576:	4b06      	ldr	r3, [pc, #24]	; (8009590 <circular_get_number_input+0x28>)
 8009578:	4a06      	ldr	r2, [pc, #24]	; (8009594 <circular_get_number_input+0x2c>)
 800957a:	2140      	movs	r1, #64	; 0x40
 800957c:	4806      	ldr	r0, [pc, #24]	; (8009598 <circular_get_number_input+0x30>)
 800957e:	f002 fbff 	bl	800bd80 <__assert_func>
	return cbuf->noInputs;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	0800ed70 	.word	0x0800ed70
 8009594:	0800ef40 	.word	0x0800ef40
 8009598:	0800ed78 	.word	0x0800ed78

0800959c <circular_read_command>:

void circular_read_command(cbuf_handle_t cbuf, uint8_t *tmpBuf){
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]

	// If no inputs are available
	if (circular_get_number_input(cbuf)==0){
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff ffde 	bl	8009568 <circular_get_number_input>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d103      	bne.n	80095ba <circular_read_command+0x1e>
		tmpBuf[0]='\0';
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2200      	movs	r2, #0
 80095b6:	701a      	strb	r2, [r3, #0]
		return;
 80095b8:	e029      	b.n	800960e <circular_read_command+0x72>
	}

	// Read command
	uint16_t i = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	81fb      	strh	r3, [r7, #14]
	while(!circular_buf_empty(cbuf)){
 80095be:	e01c      	b.n	80095fa <circular_read_command+0x5e>
		uint8_t data;
		circular_buf_get(cbuf, &data);
 80095c0:	f107 030d 	add.w	r3, r7, #13
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f8b4 	bl	8009734 <circular_buf_get>
		// Checking for '\r' is there for debugging purposes which is sent by putty and minicom.
		// In production only '\n' is sent. Therefore, there is no check for '\r\n' case.
		if (data=='\n'||data=='\r'){
 80095cc:	7b7b      	ldrb	r3, [r7, #13]
 80095ce:	2b0a      	cmp	r3, #10
 80095d0:	d002      	beq.n	80095d8 <circular_read_command+0x3c>
 80095d2:	7b7b      	ldrb	r3, [r7, #13]
 80095d4:	2b0d      	cmp	r3, #13
 80095d6:	d108      	bne.n	80095ea <circular_read_command+0x4e>
			tmpBuf[i] = '\0';
 80095d8:	89fb      	ldrh	r3, [r7, #14]
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	4413      	add	r3, r2
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
			circular_buf_remove_input(cbuf);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff ffa4 	bl	8009530 <circular_buf_remove_input>
			break;
		}
		tmpBuf[i] = data;
		i++;
	}
	return;
 80095e8:	e010      	b.n	800960c <circular_read_command+0x70>
		tmpBuf[i] = data;
 80095ea:	89fb      	ldrh	r3, [r7, #14]
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	4413      	add	r3, r2
 80095f0:	7b7a      	ldrb	r2, [r7, #13]
 80095f2:	701a      	strb	r2, [r3, #0]
		i++;
 80095f4:	89fb      	ldrh	r3, [r7, #14]
 80095f6:	3301      	adds	r3, #1
 80095f8:	81fb      	strh	r3, [r7, #14]
	while(!circular_buf_empty(cbuf)){
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f8d4 	bl	80097a8 <circular_buf_empty>
 8009600:	4603      	mov	r3, r0
 8009602:	f083 0301 	eor.w	r3, r3, #1
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1d9      	bne.n	80095c0 <circular_read_command+0x24>
	return;
 800960c:	bf00      	nop
}
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <circular_buf_init>:


//#pragma mark - APIs -

cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
	assert(buffer && size);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <circular_buf_init+0x16>
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d105      	bne.n	8009636 <circular_buf_init+0x22>
 800962a:	4b17      	ldr	r3, [pc, #92]	; (8009688 <circular_buf_init+0x74>)
 800962c:	4a17      	ldr	r2, [pc, #92]	; (800968c <circular_buf_init+0x78>)
 800962e:	2163      	movs	r1, #99	; 0x63
 8009630:	4817      	ldr	r0, [pc, #92]	; (8009690 <circular_buf_init+0x7c>)
 8009632:	f002 fba5 	bl	800bd80 <__assert_func>

	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t) + sizeof(buffer));
 8009636:	201c      	movs	r0, #28
 8009638:	f002 fc00 	bl	800be3c <malloc>
 800963c:	4603      	mov	r3, r0
 800963e:	60fb      	str	r3, [r7, #12]
	assert(cbuf);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d105      	bne.n	8009652 <circular_buf_init+0x3e>
 8009646:	4b13      	ldr	r3, [pc, #76]	; (8009694 <circular_buf_init+0x80>)
 8009648:	4a10      	ldr	r2, [pc, #64]	; (800968c <circular_buf_init+0x78>)
 800964a:	2166      	movs	r1, #102	; 0x66
 800964c:	4810      	ldr	r0, [pc, #64]	; (8009690 <circular_buf_init+0x7c>)
 800964e:	f002 fb97 	bl	800bd80 <__assert_func>

	cbuf->buffer = buffer;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	601a      	str	r2, [r3, #0]
	cbuf->max = size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	60da      	str	r2, [r3, #12]
	circular_buf_reset(cbuf);
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 f81c 	bl	800969c <circular_buf_reset>

	assert(circular_buf_empty(cbuf));
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 f89f 	bl	80097a8 <circular_buf_empty>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d105      	bne.n	800967c <circular_buf_init+0x68>
 8009670:	4b09      	ldr	r3, [pc, #36]	; (8009698 <circular_buf_init+0x84>)
 8009672:	4a06      	ldr	r2, [pc, #24]	; (800968c <circular_buf_init+0x78>)
 8009674:	216c      	movs	r1, #108	; 0x6c
 8009676:	4806      	ldr	r0, [pc, #24]	; (8009690 <circular_buf_init+0x7c>)
 8009678:	f002 fb82 	bl	800bd80 <__assert_func>

	return cbuf;
 800967c:	68fb      	ldr	r3, [r7, #12]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	0800edd4 	.word	0x0800edd4
 800968c:	0800ef5c 	.word	0x0800ef5c
 8009690:	0800ed78 	.word	0x0800ed78
 8009694:	0800ed70 	.word	0x0800ed70
 8009698:	0800ede4 	.word	0x0800ede4

0800969c <circular_buf_reset>:
	assert(cbuf);
	free(cbuf);
}

void circular_buf_reset(cbuf_handle_t cbuf)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
    assert(cbuf);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d105      	bne.n	80096b6 <circular_buf_reset+0x1a>
 80096aa:	4b0b      	ldr	r3, [pc, #44]	; (80096d8 <circular_buf_reset+0x3c>)
 80096ac:	4a0b      	ldr	r2, [pc, #44]	; (80096dc <circular_buf_reset+0x40>)
 80096ae:	2179      	movs	r1, #121	; 0x79
 80096b0:	480b      	ldr	r0, [pc, #44]	; (80096e0 <circular_buf_reset+0x44>)
 80096b2:	f002 fb65 	bl	800bd80 <__assert_func>

    cbuf->head = 0;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	605a      	str	r2, [r3, #4]
    cbuf->tail = 0;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	609a      	str	r2, [r3, #8]
	cbuf->noInputs = 0;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	611a      	str	r2, [r3, #16]
    cbuf->full = false;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	751a      	strb	r2, [r3, #20]
}
 80096ce:	bf00      	nop
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	0800ed70 	.word	0x0800ed70
 80096dc:	0800ef70 	.word	0x0800ef70
 80096e0:	0800ed78 	.word	0x0800ed78

080096e4 <circular_buf_put>:

	return cbuf->max;
}

void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
	assert(cbuf && cbuf->buffer);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <circular_buf_put+0x1a>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d105      	bne.n	800970a <circular_buf_put+0x26>
 80096fe:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <circular_buf_put+0x44>)
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <circular_buf_put+0x48>)
 8009702:	21a0      	movs	r1, #160	; 0xa0
 8009704:	480a      	ldr	r0, [pc, #40]	; (8009730 <circular_buf_put+0x4c>)
 8009706:	f002 fb3b 	bl	800bd80 <__assert_func>

    cbuf->buffer[cbuf->head] = data;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	4413      	add	r3, r2
 8009714:	78fa      	ldrb	r2, [r7, #3]
 8009716:	701a      	strb	r2, [r3, #0]

    advance_pointer(cbuf);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff fe87 	bl	800942c <advance_pointer>
}
 800971e:	bf00      	nop
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	0800ee00 	.word	0x0800ee00
 800972c:	0800ef84 	.word	0x0800ef84
 8009730:	0800ed78 	.word	0x0800ed78

08009734 <circular_buf_get>:

    return r;
}

int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
    assert(cbuf && data && cbuf->buffer);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d006      	beq.n	8009752 <circular_buf_get+0x1e>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <circular_buf_get+0x1e>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d105      	bne.n	800975e <circular_buf_get+0x2a>
 8009752:	4b12      	ldr	r3, [pc, #72]	; (800979c <circular_buf_get+0x68>)
 8009754:	4a12      	ldr	r2, [pc, #72]	; (80097a0 <circular_buf_get+0x6c>)
 8009756:	21b9      	movs	r1, #185	; 0xb9
 8009758:	4812      	ldr	r0, [pc, #72]	; (80097a4 <circular_buf_get+0x70>)
 800975a:	f002 fb11 	bl	800bd80 <__assert_func>

    int r = -1;
 800975e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009762:	60fb      	str	r3, [r7, #12]

    if(!circular_buf_empty(cbuf))
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f81f 	bl	80097a8 <circular_buf_empty>
 800976a:	4603      	mov	r3, r0
 800976c:	f083 0301 	eor.w	r3, r3, #1
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00c      	beq.n	8009790 <circular_buf_get+0x5c>
    {
        *data = cbuf->buffer[cbuf->tail];
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	4413      	add	r3, r2
 8009780:	781a      	ldrb	r2, [r3, #0]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	701a      	strb	r2, [r3, #0]
        retreat_pointer(cbuf);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7ff fe90 	bl	80094ac <retreat_pointer>

        r = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	60fb      	str	r3, [r7, #12]
    }

    return r;
 8009790:	68fb      	ldr	r3, [r7, #12]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	0800ee18 	.word	0x0800ee18
 80097a0:	0800ef98 	.word	0x0800ef98
 80097a4:	0800ed78 	.word	0x0800ed78

080097a8 <circular_buf_empty>:

bool circular_buf_empty(cbuf_handle_t cbuf)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d105      	bne.n	80097c2 <circular_buf_empty+0x1a>
 80097b6:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <circular_buf_empty+0x4c>)
 80097b8:	4a0f      	ldr	r2, [pc, #60]	; (80097f8 <circular_buf_empty+0x50>)
 80097ba:	21ca      	movs	r1, #202	; 0xca
 80097bc:	480f      	ldr	r0, [pc, #60]	; (80097fc <circular_buf_empty+0x54>)
 80097be:	f002 fadf 	bl	800bd80 <__assert_func>

    return (!circular_buf_full(cbuf) && (cbuf->head == cbuf->tail));
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f81c 	bl	8009800 <circular_buf_full>
 80097c8:	4603      	mov	r3, r0
 80097ca:	f083 0301 	eor.w	r3, r3, #1
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d007      	beq.n	80097e4 <circular_buf_empty+0x3c>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d101      	bne.n	80097e4 <circular_buf_empty+0x3c>
 80097e0:	2301      	movs	r3, #1
 80097e2:	e000      	b.n	80097e6 <circular_buf_empty+0x3e>
 80097e4:	2300      	movs	r3, #0
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	b2db      	uxtb	r3, r3
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	0800ed70 	.word	0x0800ed70
 80097f8:	0800efac 	.word	0x0800efac
 80097fc:	0800ed78 	.word	0x0800ed78

08009800 <circular_buf_full>:

bool circular_buf_full(cbuf_handle_t cbuf)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d105      	bne.n	800981a <circular_buf_full+0x1a>
 800980e:	4b06      	ldr	r3, [pc, #24]	; (8009828 <circular_buf_full+0x28>)
 8009810:	4a06      	ldr	r2, [pc, #24]	; (800982c <circular_buf_full+0x2c>)
 8009812:	21d1      	movs	r1, #209	; 0xd1
 8009814:	4806      	ldr	r0, [pc, #24]	; (8009830 <circular_buf_full+0x30>)
 8009816:	f002 fab3 	bl	800bd80 <__assert_func>

    return cbuf->full;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	7d1b      	ldrb	r3, [r3, #20]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	0800ed70 	.word	0x0800ed70
 800982c:	0800efc0 	.word	0x0800efc0
 8009830:	0800ed78 	.word	0x0800ed78

08009834 <handleGenericMessages>:
 */


#include "handleGenericMessages.h"

void handleGenericMessages(char * inputBuffer){
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]

	  if(!(strcmp(inputBuffer, "Serial"))){
 800983c:	4913      	ldr	r1, [pc, #76]	; (800988c <handleGenericMessages+0x58>)
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7f6 fcce 	bl	80001e0 <strcmp>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d102      	bne.n	8009850 <handleGenericMessages+0x1c>
		  printHeader();
 800984a:	f7f7 fb91 	bl	8000f70 <printHeader>
		  JumpToBootloader();
	  }
	  else if((strcmp(inputBuffer, "\0"))){
		  USBprintf("ss", "MISREAD: ", inputBuffer); // respond with misread and serialBuffer contents if all checks have failed
	  }
}
 800984e:	e019      	b.n	8009884 <handleGenericMessages+0x50>
	  else if(!(strcmp(inputBuffer, "DFU"))){
 8009850:	490f      	ldr	r1, [pc, #60]	; (8009890 <handleGenericMessages+0x5c>)
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7f6 fcc4 	bl	80001e0 <strcmp>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d109      	bne.n	8009872 <handleGenericMessages+0x3e>
		  USBprintf("s", "Entering bootloader mode");
 800985e:	490d      	ldr	r1, [pc, #52]	; (8009894 <handleGenericMessages+0x60>)
 8009860:	480d      	ldr	r0, [pc, #52]	; (8009898 <handleGenericMessages+0x64>)
 8009862:	f7ff fcc1 	bl	80091e8 <USBprintf>
		  HAL_Delay(200);
 8009866:	20c8      	movs	r0, #200	; 0xc8
 8009868:	f7f8 fe64 	bl	8002534 <HAL_Delay>
		  JumpToBootloader();
 800986c:	f000 f81a 	bl	80098a4 <JumpToBootloader>
}
 8009870:	e008      	b.n	8009884 <handleGenericMessages+0x50>
	  else if((strcmp(inputBuffer, "\0"))){
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d004      	beq.n	8009884 <handleGenericMessages+0x50>
		  USBprintf("ss", "MISREAD: ", inputBuffer); // respond with misread and serialBuffer contents if all checks have failed
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	4907      	ldr	r1, [pc, #28]	; (800989c <handleGenericMessages+0x68>)
 800987e:	4808      	ldr	r0, [pc, #32]	; (80098a0 <handleGenericMessages+0x6c>)
 8009880:	f7ff fcb2 	bl	80091e8 <USBprintf>
}
 8009884:	bf00      	nop
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	0800ee38 	.word	0x0800ee38
 8009890:	0800ee40 	.word	0x0800ee40
 8009894:	0800ee44 	.word	0x0800ee44
 8009898:	0800ee60 	.word	0x0800ee60
 800989c:	0800ee64 	.word	0x0800ee64
 80098a0:	0800ee70 	.word	0x0800ee70

080098a4 <JumpToBootloader>:
#include "stm32f4xx_hal.h"
#include "string.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"

void JumpToBootloader(void) {
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
     * Step: Set system memory address.
     *
     *       For STM32F429, system memory is on 0x1FFF 0000
     *       For other families, check AN2606 document table 110 with descriptions of memory addresses
     */
    volatile uint32_t addr = 0x1FFF0000;
 80098aa:	4b11      	ldr	r3, [pc, #68]	; (80098f0 <JumpToBootloader+0x4c>)
 80098ac:	607b      	str	r3, [r7, #4]
    /**
     * Step: Disable RCC, set it to default (after reset) settings
     *       Internal clock, no PLL, etc.
     */
#if defined(USE_HAL_DRIVER)
    HAL_RCC_DeInit();
 80098ae:	f7fc fdfb 	bl	80064a8 <HAL_RCC_DeInit>
    HAL_DeInit(); // add by ctien
 80098b2:	f7f8 fdbb 	bl	800242c <HAL_DeInit>
#endif /* defined(USE_STDPERIPH_DRIVER) */

    /**
     * Step: Disable systick timer and reset it to default values
     */
    SysTick->CTRL = 0;
 80098b6:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <JumpToBootloader+0x50>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 80098bc:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <JumpToBootloader+0x50>)
 80098be:	2200      	movs	r2, #0
 80098c0:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 80098c2:	4b0c      	ldr	r3, [pc, #48]	; (80098f4 <JumpToBootloader+0x50>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	609a      	str	r2, [r3, #8]
     *       For STM32F0xx, CFGR1 register in SYSCFG is used (bits[1:0])
     *       For others, check family reference manual
     */
    //Remap by hand... {
#if defined(STM32F4)
    SYSCFG->MEMRMP = 0x01;
 80098c8:	4b0b      	ldr	r3, [pc, #44]	; (80098f8 <JumpToBootloader+0x54>)
 80098ca:	2201      	movs	r2, #1
 80098cc:	601a      	str	r2, [r3, #0]

    /**
     * Step: Set jump memory location for system memory
     *       Use address with 4 bytes offset which specifies jump location where program starts
     */
    SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3304      	adds	r3, #4
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	60fb      	str	r3, [r7, #12]
     *       This step must be done last otherwise local variables in this function
     *       don't have proper value since stack pointer is located on different position
     *
     *       Set direct address location which specifies stack pointer in SRAM location
     */
    __set_MSP(*(uint32_t *)addr);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	f383 8808 	msr	MSP, r3
}
 80098e2:	bf00      	nop

    /**
     * Step: Actually call our function to jump to set location
     *       This will start system memory execution
     */
    SysMemBootJump();
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4798      	blx	r3

    /**
     * Step: Connect USB<->UART converter to dedicated USART pins and test
     *       and test with bootloader works with STM32 STM32 Cube Programmer
     */
}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	1fff0000 	.word	0x1fff0000
 80098f4:	e000e010 	.word	0xe000e010
 80098f8:	40013800 	.word	0x40013800

080098fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009908:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800990c:	f002 f9f4 	bl	800bcf8 <USBD_static_malloc>
 8009910:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d105      	bne.n	8009924 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009920:	2302      	movs	r3, #2
 8009922:	e066      	b.n	80099f2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	7c1b      	ldrb	r3, [r3, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d119      	bne.n	8009968 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009938:	2202      	movs	r2, #2
 800993a:	2181      	movs	r1, #129	; 0x81
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f002 f8b8 	bl	800bab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800994c:	2202      	movs	r2, #2
 800994e:	2101      	movs	r1, #1
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f002 f8ae 	bl	800bab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2210      	movs	r2, #16
 8009962:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009966:	e016      	b.n	8009996 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009968:	2340      	movs	r3, #64	; 0x40
 800996a:	2202      	movs	r2, #2
 800996c:	2181      	movs	r1, #129	; 0x81
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f002 f89f 	bl	800bab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800997a:	2340      	movs	r3, #64	; 0x40
 800997c:	2202      	movs	r2, #2
 800997e:	2101      	movs	r1, #1
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f002 f896 	bl	800bab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2210      	movs	r2, #16
 8009992:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009996:	2308      	movs	r3, #8
 8009998:	2203      	movs	r2, #3
 800999a:	2182      	movs	r1, #130	; 0x82
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f002 f888 	bl	800bab2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	7c1b      	ldrb	r3, [r3, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d109      	bne.n	80099e0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099d6:	2101      	movs	r1, #1
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f002 f959 	bl	800bc90 <USBD_LL_PrepareReceive>
 80099de:	e007      	b.n	80099f0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099e6:	2340      	movs	r3, #64	; 0x40
 80099e8:	2101      	movs	r1, #1
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f002 f950 	bl	800bc90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b082      	sub	sp, #8
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	460b      	mov	r3, r1
 8009a04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009a06:	2181      	movs	r1, #129	; 0x81
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f002 f878 	bl	800bafe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009a14:	2101      	movs	r1, #1
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f002 f871 	bl	800bafe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009a24:	2182      	movs	r1, #130	; 0x82
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f002 f869 	bl	800bafe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00e      	beq.n	8009a64 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a56:	4618      	mov	r0, r3
 8009a58:	f002 f95c 	bl	800bd14 <USBD_static_free>
    pdev->pClassData = NULL;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e0af      	b.n	8009bf8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d03f      	beq.n	8009b24 <USBD_CDC_Setup+0xb4>
 8009aa4:	2b20      	cmp	r3, #32
 8009aa6:	f040 809f 	bne.w	8009be8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	88db      	ldrh	r3, [r3, #6]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d02e      	beq.n	8009b10 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	b25b      	sxtb	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	da16      	bge.n	8009aea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009ac8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	88d2      	ldrh	r2, [r2, #6]
 8009ace:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	88db      	ldrh	r3, [r3, #6]
 8009ad4:	2b07      	cmp	r3, #7
 8009ad6:	bf28      	it	cs
 8009ad8:	2307      	movcs	r3, #7
 8009ada:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	89fa      	ldrh	r2, [r7, #14]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f001 fb19 	bl	800b11a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009ae8:	e085      	b.n	8009bf6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	785a      	ldrb	r2, [r3, #1]
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	88db      	ldrh	r3, [r3, #6]
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009b00:	6939      	ldr	r1, [r7, #16]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	88db      	ldrh	r3, [r3, #6]
 8009b06:	461a      	mov	r2, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 fb32 	bl	800b172 <USBD_CtlPrepareRx>
      break;
 8009b0e:	e072      	b.n	8009bf6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	7850      	ldrb	r0, [r2, #1]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	4798      	blx	r3
      break;
 8009b22:	e068      	b.n	8009bf6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	785b      	ldrb	r3, [r3, #1]
 8009b28:	2b0b      	cmp	r3, #11
 8009b2a:	d852      	bhi.n	8009bd2 <USBD_CDC_Setup+0x162>
 8009b2c:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <USBD_CDC_Setup+0xc4>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b65 	.word	0x08009b65
 8009b38:	08009be1 	.word	0x08009be1
 8009b3c:	08009bd3 	.word	0x08009bd3
 8009b40:	08009bd3 	.word	0x08009bd3
 8009b44:	08009bd3 	.word	0x08009bd3
 8009b48:	08009bd3 	.word	0x08009bd3
 8009b4c:	08009bd3 	.word	0x08009bd3
 8009b50:	08009bd3 	.word	0x08009bd3
 8009b54:	08009bd3 	.word	0x08009bd3
 8009b58:	08009bd3 	.word	0x08009bd3
 8009b5c:	08009b8f 	.word	0x08009b8f
 8009b60:	08009bb9 	.word	0x08009bb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d107      	bne.n	8009b80 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b70:	f107 030a 	add.w	r3, r7, #10
 8009b74:	2202      	movs	r2, #2
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 face 	bl	800b11a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b7e:	e032      	b.n	8009be6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f001 fa58 	bl	800b038 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	75fb      	strb	r3, [r7, #23]
          break;
 8009b8c:	e02b      	b.n	8009be6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d107      	bne.n	8009baa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009b9a:	f107 030d 	add.w	r3, r7, #13
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f001 fab9 	bl	800b11a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ba8:	e01d      	b.n	8009be6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 fa43 	bl	800b038 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	75fb      	strb	r3, [r7, #23]
          break;
 8009bb6:	e016      	b.n	8009be6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d00f      	beq.n	8009be4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 fa36 	bl	800b038 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009bd0:	e008      	b.n	8009be4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 fa2f 	bl	800b038 <USBD_CtlError>
          ret = USBD_FAIL;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	75fb      	strb	r3, [r7, #23]
          break;
 8009bde:	e002      	b.n	8009be6 <USBD_CDC_Setup+0x176>
          break;
 8009be0:	bf00      	nop
 8009be2:	e008      	b.n	8009bf6 <USBD_CDC_Setup+0x186>
          break;
 8009be4:	bf00      	nop
      }
      break;
 8009be6:	e006      	b.n	8009bf6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f001 fa24 	bl	800b038 <USBD_CtlError>
      ret = USBD_FAIL;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf4:	bf00      	nop
  }

  return (uint8_t)ret;
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e04f      	b.n	8009cc2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009c2a:	78fa      	ldrb	r2, [r7, #3]
 8009c2c:	6879      	ldr	r1, [r7, #4]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	440b      	add	r3, r1
 8009c38:	3318      	adds	r3, #24
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d029      	beq.n	8009c94 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009c40:	78fa      	ldrb	r2, [r7, #3]
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	4613      	mov	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	440b      	add	r3, r1
 8009c4e:	3318      	adds	r3, #24
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	78f9      	ldrb	r1, [r7, #3]
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	460b      	mov	r3, r1
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	1a5b      	subs	r3, r3, r1
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4403      	add	r3, r0
 8009c60:	3344      	adds	r3, #68	; 0x44
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c68:	fb03 f301 	mul.w	r3, r3, r1
 8009c6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d110      	bne.n	8009c94 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009c72:	78fa      	ldrb	r2, [r7, #3]
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	440b      	add	r3, r1
 8009c80:	3318      	adds	r3, #24
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c86:	78f9      	ldrb	r1, [r7, #3]
 8009c88:	2300      	movs	r3, #0
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 ffde 	bl	800bc4e <USBD_LL_Transmit>
 8009c92:	e015      	b.n	8009cc0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00b      	beq.n	8009cc0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009cbc:	78fa      	ldrb	r2, [r7, #3]
 8009cbe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e015      	b.n	8009d18 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009cec:	78fb      	ldrb	r3, [r7, #3]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 ffee 	bl	800bcd2 <USBD_LL_GetRxDataSize>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009d12:	4611      	mov	r1, r2
 8009d14:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d2e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009d36:	2303      	movs	r3, #3
 8009d38:	e01b      	b.n	8009d72 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d015      	beq.n	8009d70 <USBD_CDC_EP0_RxReady+0x50>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009d4a:	2bff      	cmp	r3, #255	; 0xff
 8009d4c:	d010      	beq.n	8009d70 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009d5c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d64:	b292      	uxth	r2, r2
 8009d66:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	22ff      	movs	r2, #255	; 0xff
 8009d6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
	...

08009d7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2243      	movs	r2, #67	; 0x43
 8009d88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009d8a:	4b03      	ldr	r3, [pc, #12]	; (8009d98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	200000f8 	.word	0x200000f8

08009d9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2243      	movs	r2, #67	; 0x43
 8009da8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009daa:	4b03      	ldr	r3, [pc, #12]	; (8009db8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	200000b4 	.word	0x200000b4

08009dbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2243      	movs	r2, #67	; 0x43
 8009dc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009dca:	4b03      	ldr	r3, [pc, #12]	; (8009dd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	2000013c 	.word	0x2000013c

08009ddc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	220a      	movs	r2, #10
 8009de8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009dea:	4b03      	ldr	r3, [pc, #12]	; (8009df8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	20000070 	.word	0x20000070

08009dfc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e004      	b.n	8009e1a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	370c      	adds	r7, #12
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b087      	sub	sp, #28
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e38:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d101      	bne.n	8009e44 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e008      	b.n	8009e56 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	371c      	adds	r7, #28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b085      	sub	sp, #20
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e004      	b.n	8009e88 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ea2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e01a      	b.n	8009eec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d114      	bne.n	8009eea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009ede:	2181      	movs	r1, #129	; 0x81
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 feb4 	bl	800bc4e <USBD_LL_Transmit>

    ret = USBD_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e016      	b.n	8009f40 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7c1b      	ldrb	r3, [r3, #16]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d109      	bne.n	8009f2e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f24:	2101      	movs	r1, #1
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 feb2 	bl	800bc90 <USBD_LL_PrepareReceive>
 8009f2c:	e007      	b.n	8009f3e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f34:	2340      	movs	r3, #64	; 0x40
 8009f36:	2101      	movs	r1, #1
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f001 fea9 	bl	800bc90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4613      	mov	r3, r2
 8009f54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e01f      	b.n	8009fa0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	79fa      	ldrb	r2, [r7, #7]
 8009f92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f001 fd25 	bl	800b9e4 <USBD_LL_Init>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	e016      	b.n	8009fee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00b      	beq.n	8009fec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	f107 020e 	add.w	r2, r7, #14
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	4798      	blx	r3
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 fd3c 	bl	800ba7c <USBD_LL_Start>
 800a004:	4603      	mov	r3, r0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a00e:	b480      	push	{r7}
 800a010:	b083      	sub	sp, #12
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a030:	2303      	movs	r3, #3
 800a032:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d009      	beq.n	800a052 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	78fa      	ldrb	r2, [r7, #3]
 800a048:	4611      	mov	r1, r2
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	4798      	blx	r3
 800a04e:	4603      	mov	r3, r0
 800a050:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a052:	7bfb      	ldrb	r3, [r7, #15]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d007      	beq.n	800a082 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	78fa      	ldrb	r2, [r7, #3]
 800a07c:	4611      	mov	r1, r2
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	4798      	blx	r3
  }

  return USBD_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 ff90 	bl	800afc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0c0:	f003 031f 	and.w	r3, r3, #31
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d01a      	beq.n	800a0fe <USBD_LL_SetupStage+0x72>
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d822      	bhi.n	800a112 <USBD_LL_SetupStage+0x86>
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <USBD_LL_SetupStage+0x4a>
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d00a      	beq.n	800a0ea <USBD_LL_SetupStage+0x5e>
 800a0d4:	e01d      	b.n	800a112 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0dc:	4619      	mov	r1, r3
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fa62 	bl	800a5a8 <USBD_StdDevReq>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e8:	e020      	b.n	800a12c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fac6 	bl	800a684 <USBD_StdItfReq>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a0fc:	e016      	b.n	800a12c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a104:	4619      	mov	r1, r3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fb05 	bl	800a716 <USBD_StdEPReq>
 800a10c:	4603      	mov	r3, r0
 800a10e:	73fb      	strb	r3, [r7, #15]
      break;
 800a110:	e00c      	b.n	800a12c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a118:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f001 fd0b 	bl	800bb3c <USBD_LL_StallEP>
 800a126:	4603      	mov	r3, r0
 800a128:	73fb      	strb	r3, [r7, #15]
      break;
 800a12a:	bf00      	nop
  }

  return ret;
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b086      	sub	sp, #24
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	460b      	mov	r3, r1
 800a140:	607a      	str	r2, [r7, #4]
 800a142:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a144:	7afb      	ldrb	r3, [r7, #11]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d138      	bne.n	800a1bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a150:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d14a      	bne.n	800a1f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	689a      	ldr	r2, [r3, #8]
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	429a      	cmp	r2, r3
 800a166:	d913      	bls.n	800a190 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	689a      	ldr	r2, [r3, #8]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	1ad2      	subs	r2, r2, r3
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	68da      	ldr	r2, [r3, #12]
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	4293      	cmp	r3, r2
 800a180:	bf28      	it	cs
 800a182:	4613      	movcs	r3, r2
 800a184:	461a      	mov	r2, r3
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f001 f80f 	bl	800b1ac <USBD_CtlContinueRx>
 800a18e:	e030      	b.n	800a1f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d10b      	bne.n	800a1b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f001 f80a 	bl	800b1ce <USBD_CtlSendStatus>
 800a1ba:	e01a      	b.n	800a1f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b03      	cmp	r3, #3
 800a1c6:	d114      	bne.n	800a1f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00e      	beq.n	800a1f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	7afa      	ldrb	r2, [r7, #11]
 800a1de:	4611      	mov	r1, r2
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	4798      	blx	r3
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a1e8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	e000      	b.n	800a1f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	460b      	mov	r3, r1
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a20a:	7afb      	ldrb	r3, [r7, #11]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d16b      	bne.n	800a2e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3314      	adds	r3, #20
 800a214:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d156      	bne.n	800a2ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	689a      	ldr	r2, [r3, #8]
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d914      	bls.n	800a256 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	1ad2      	subs	r2, r2, r3
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	461a      	mov	r2, r3
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 ff84 	bl	800b150 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a248:	2300      	movs	r3, #0
 800a24a:	2200      	movs	r2, #0
 800a24c:	2100      	movs	r1, #0
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f001 fd1e 	bl	800bc90 <USBD_LL_PrepareReceive>
 800a254:	e03b      	b.n	800a2ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	68da      	ldr	r2, [r3, #12]
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d11c      	bne.n	800a29c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d316      	bcc.n	800a29c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a278:	429a      	cmp	r2, r3
 800a27a:	d20f      	bcs.n	800a29c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a27c:	2200      	movs	r2, #0
 800a27e:	2100      	movs	r1, #0
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 ff65 	bl	800b150 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a28e:	2300      	movs	r3, #0
 800a290:	2200      	movs	r2, #0
 800a292:	2100      	movs	r1, #0
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f001 fcfb 	bl	800bc90 <USBD_LL_PrepareReceive>
 800a29a:	e018      	b.n	800a2ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	d10b      	bne.n	800a2c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d005      	beq.n	800a2c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2c0:	2180      	movs	r1, #128	; 0x80
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f001 fc3a 	bl	800bb3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 ff93 	bl	800b1f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d122      	bne.n	800a31e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f7ff fe98 	bl	800a00e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a2e6:	e01a      	b.n	800a31e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d114      	bne.n	800a31e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00e      	beq.n	800a31e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	7afa      	ldrb	r2, [r7, #11]
 800a30a:	4611      	mov	r1, r2
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	4798      	blx	r3
 800a310:	4603      	mov	r3, r0
 800a312:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a314:	7dfb      	ldrb	r3, [r7, #23]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	e000      	b.n	800a320 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a358:	2303      	movs	r3, #3
 800a35a:	e02f      	b.n	800a3bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00f      	beq.n	800a386 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d009      	beq.n	800a386 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	6852      	ldr	r2, [r2, #4]
 800a37e:	b2d2      	uxtb	r2, r2
 800a380:	4611      	mov	r1, r2
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a386:	2340      	movs	r3, #64	; 0x40
 800a388:	2200      	movs	r2, #0
 800a38a:	2100      	movs	r1, #0
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 fb90 	bl	800bab2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2240      	movs	r2, #64	; 0x40
 800a39e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3a2:	2340      	movs	r3, #64	; 0x40
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2180      	movs	r1, #128	; 0x80
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f001 fb82 	bl	800bab2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2240      	movs	r2, #64	; 0x40
 800a3b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	78fa      	ldrb	r2, [r7, #3]
 800a3d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2204      	movs	r2, #4
 800a3fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b04      	cmp	r3, #4
 800a422:	d106      	bne.n	800a432 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a42a:	b2da      	uxtb	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a452:	2303      	movs	r3, #3
 800a454:	e012      	b.n	800a47c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d10b      	bne.n	800a47a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d005      	beq.n	800a47a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	460b      	mov	r3, r1
 800a48e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e014      	b.n	800a4c8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d10d      	bne.n	800a4c6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d007      	beq.n	800a4c6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	78fa      	ldrb	r2, [r7, #3]
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	e014      	b.n	800a514 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	d10d      	bne.n	800a512 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d007      	beq.n	800a512 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50a:	78fa      	ldrb	r2, [r7, #3]
 800a50c:	4611      	mov	r1, r2
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b082      	sub	sp, #8
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d009      	beq.n	800a560 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	6852      	ldr	r2, [r2, #4]
 800a558:	b2d2      	uxtb	r2, r2
 800a55a:	4611      	mov	r1, r2
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	4798      	blx	r3
  }

  return USBD_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b087      	sub	sp, #28
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	3301      	adds	r3, #1
 800a580:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a588:	8a3b      	ldrh	r3, [r7, #16]
 800a58a:	021b      	lsls	r3, r3, #8
 800a58c:	b21a      	sxth	r2, r3
 800a58e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a592:	4313      	orrs	r3, r2
 800a594:	b21b      	sxth	r3, r3
 800a596:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a598:	89fb      	ldrh	r3, [r7, #14]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	371c      	adds	r7, #28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
	...

0800a5a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5be:	2b40      	cmp	r3, #64	; 0x40
 800a5c0:	d005      	beq.n	800a5ce <USBD_StdDevReq+0x26>
 800a5c2:	2b40      	cmp	r3, #64	; 0x40
 800a5c4:	d853      	bhi.n	800a66e <USBD_StdDevReq+0xc6>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00b      	beq.n	800a5e2 <USBD_StdDevReq+0x3a>
 800a5ca:	2b20      	cmp	r3, #32
 800a5cc:	d14f      	bne.n	800a66e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	4798      	blx	r3
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73fb      	strb	r3, [r7, #15]
      break;
 800a5e0:	e04a      	b.n	800a678 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	785b      	ldrb	r3, [r3, #1]
 800a5e6:	2b09      	cmp	r3, #9
 800a5e8:	d83b      	bhi.n	800a662 <USBD_StdDevReq+0xba>
 800a5ea:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <USBD_StdDevReq+0x48>)
 800a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f0:	0800a645 	.word	0x0800a645
 800a5f4:	0800a659 	.word	0x0800a659
 800a5f8:	0800a663 	.word	0x0800a663
 800a5fc:	0800a64f 	.word	0x0800a64f
 800a600:	0800a663 	.word	0x0800a663
 800a604:	0800a623 	.word	0x0800a623
 800a608:	0800a619 	.word	0x0800a619
 800a60c:	0800a663 	.word	0x0800a663
 800a610:	0800a63b 	.word	0x0800a63b
 800a614:	0800a62d 	.word	0x0800a62d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f9de 	bl	800a9dc <USBD_GetDescriptor>
          break;
 800a620:	e024      	b.n	800a66c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fb43 	bl	800acb0 <USBD_SetAddress>
          break;
 800a62a:	e01f      	b.n	800a66c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fb82 	bl	800ad38 <USBD_SetConfig>
 800a634:	4603      	mov	r3, r0
 800a636:	73fb      	strb	r3, [r7, #15]
          break;
 800a638:	e018      	b.n	800a66c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fc21 	bl	800ae84 <USBD_GetConfig>
          break;
 800a642:	e013      	b.n	800a66c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fc52 	bl	800aef0 <USBD_GetStatus>
          break;
 800a64c:	e00e      	b.n	800a66c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a64e:	6839      	ldr	r1, [r7, #0]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fc81 	bl	800af58 <USBD_SetFeature>
          break;
 800a656:	e009      	b.n	800a66c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a658:	6839      	ldr	r1, [r7, #0]
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 fc90 	bl	800af80 <USBD_ClrFeature>
          break;
 800a660:	e004      	b.n	800a66c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fce7 	bl	800b038 <USBD_CtlError>
          break;
 800a66a:	bf00      	nop
      }
      break;
 800a66c:	e004      	b.n	800a678 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fce1 	bl	800b038 <USBD_CtlError>
      break;
 800a676:	bf00      	nop
  }

  return ret;
 800a678:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop

0800a684 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a69a:	2b40      	cmp	r3, #64	; 0x40
 800a69c:	d005      	beq.n	800a6aa <USBD_StdItfReq+0x26>
 800a69e:	2b40      	cmp	r3, #64	; 0x40
 800a6a0:	d82f      	bhi.n	800a702 <USBD_StdItfReq+0x7e>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <USBD_StdItfReq+0x26>
 800a6a6:	2b20      	cmp	r3, #32
 800a6a8:	d12b      	bne.n	800a702 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d81d      	bhi.n	800a6f4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	889b      	ldrh	r3, [r3, #4]
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d813      	bhi.n	800a6ea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	4798      	blx	r3
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	88db      	ldrh	r3, [r3, #6]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d110      	bne.n	800a6fe <USBD_StdItfReq+0x7a>
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10d      	bne.n	800a6fe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fd73 	bl	800b1ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6e8:	e009      	b.n	800a6fe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fca3 	bl	800b038 <USBD_CtlError>
          break;
 800a6f2:	e004      	b.n	800a6fe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fc9e 	bl	800b038 <USBD_CtlError>
          break;
 800a6fc:	e000      	b.n	800a700 <USBD_StdItfReq+0x7c>
          break;
 800a6fe:	bf00      	nop
      }
      break;
 800a700:	e004      	b.n	800a70c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fc97 	bl	800b038 <USBD_CtlError>
      break;
 800a70a:	bf00      	nop
  }

  return ret;
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	889b      	ldrh	r3, [r3, #4]
 800a728:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a732:	2b40      	cmp	r3, #64	; 0x40
 800a734:	d007      	beq.n	800a746 <USBD_StdEPReq+0x30>
 800a736:	2b40      	cmp	r3, #64	; 0x40
 800a738:	f200 8145 	bhi.w	800a9c6 <USBD_StdEPReq+0x2b0>
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00c      	beq.n	800a75a <USBD_StdEPReq+0x44>
 800a740:	2b20      	cmp	r3, #32
 800a742:	f040 8140 	bne.w	800a9c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	4798      	blx	r3
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]
      break;
 800a758:	e13a      	b.n	800a9d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	785b      	ldrb	r3, [r3, #1]
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d007      	beq.n	800a772 <USBD_StdEPReq+0x5c>
 800a762:	2b03      	cmp	r3, #3
 800a764:	f300 8129 	bgt.w	800a9ba <USBD_StdEPReq+0x2a4>
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d07f      	beq.n	800a86c <USBD_StdEPReq+0x156>
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d03c      	beq.n	800a7ea <USBD_StdEPReq+0xd4>
 800a770:	e123      	b.n	800a9ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d002      	beq.n	800a784 <USBD_StdEPReq+0x6e>
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d016      	beq.n	800a7b0 <USBD_StdEPReq+0x9a>
 800a782:	e02c      	b.n	800a7de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00d      	beq.n	800a7a6 <USBD_StdEPReq+0x90>
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	2b80      	cmp	r3, #128	; 0x80
 800a78e:	d00a      	beq.n	800a7a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 f9d1 	bl	800bb3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a79a:	2180      	movs	r1, #128	; 0x80
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f001 f9cd 	bl	800bb3c <USBD_LL_StallEP>
 800a7a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7a4:	e020      	b.n	800a7e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fc45 	bl	800b038 <USBD_CtlError>
              break;
 800a7ae:	e01b      	b.n	800a7e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	885b      	ldrh	r3, [r3, #2]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10e      	bne.n	800a7d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00b      	beq.n	800a7d6 <USBD_StdEPReq+0xc0>
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b80      	cmp	r3, #128	; 0x80
 800a7c2:	d008      	beq.n	800a7d6 <USBD_StdEPReq+0xc0>
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	88db      	ldrh	r3, [r3, #6]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d104      	bne.n	800a7d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 f9b3 	bl	800bb3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fcf9 	bl	800b1ce <USBD_CtlSendStatus>

              break;
 800a7dc:	e004      	b.n	800a7e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fc29 	bl	800b038 <USBD_CtlError>
              break;
 800a7e6:	bf00      	nop
          }
          break;
 800a7e8:	e0ec      	b.n	800a9c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d002      	beq.n	800a7fc <USBD_StdEPReq+0xe6>
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d016      	beq.n	800a828 <USBD_StdEPReq+0x112>
 800a7fa:	e030      	b.n	800a85e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00d      	beq.n	800a81e <USBD_StdEPReq+0x108>
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	2b80      	cmp	r3, #128	; 0x80
 800a806:	d00a      	beq.n	800a81e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f001 f995 	bl	800bb3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a812:	2180      	movs	r1, #128	; 0x80
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 f991 	bl	800bb3c <USBD_LL_StallEP>
 800a81a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a81c:	e025      	b.n	800a86a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a81e:	6839      	ldr	r1, [r7, #0]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fc09 	bl	800b038 <USBD_CtlError>
              break;
 800a826:	e020      	b.n	800a86a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	885b      	ldrh	r3, [r3, #2]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d11b      	bne.n	800a868 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a830:	7bbb      	ldrb	r3, [r7, #14]
 800a832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a836:	2b00      	cmp	r3, #0
 800a838:	d004      	beq.n	800a844 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a83a:	7bbb      	ldrb	r3, [r7, #14]
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f001 f99b 	bl	800bb7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fcc2 	bl	800b1ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	4798      	blx	r3
 800a858:	4603      	mov	r3, r0
 800a85a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a85c:	e004      	b.n	800a868 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fbe9 	bl	800b038 <USBD_CtlError>
              break;
 800a866:	e000      	b.n	800a86a <USBD_StdEPReq+0x154>
              break;
 800a868:	bf00      	nop
          }
          break;
 800a86a:	e0ab      	b.n	800a9c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b02      	cmp	r3, #2
 800a876:	d002      	beq.n	800a87e <USBD_StdEPReq+0x168>
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d032      	beq.n	800a8e2 <USBD_StdEPReq+0x1cc>
 800a87c:	e097      	b.n	800a9ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d007      	beq.n	800a894 <USBD_StdEPReq+0x17e>
 800a884:	7bbb      	ldrb	r3, [r7, #14]
 800a886:	2b80      	cmp	r3, #128	; 0x80
 800a888:	d004      	beq.n	800a894 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fbd3 	bl	800b038 <USBD_CtlError>
                break;
 800a892:	e091      	b.n	800a9b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	da0b      	bge.n	800a8b4 <USBD_StdEPReq+0x19e>
 800a89c:	7bbb      	ldrb	r3, [r7, #14]
 800a89e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	3310      	adds	r3, #16
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	e00b      	b.n	800a8cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
 800a8b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fc1d 	bl	800b11a <USBD_CtlSendData>
              break;
 800a8e0:	e06a      	b.n	800a9b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	da11      	bge.n	800a90e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
 800a8ec:	f003 020f 	and.w	r2, r3, #15
 800a8f0:	6879      	ldr	r1, [r7, #4]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	440b      	add	r3, r1
 800a8fc:	3324      	adds	r3, #36	; 0x24
 800a8fe:	881b      	ldrh	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d117      	bne.n	800a934 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fb96 	bl	800b038 <USBD_CtlError>
                  break;
 800a90c:	e054      	b.n	800a9b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	f003 020f 	and.w	r2, r3, #15
 800a914:	6879      	ldr	r1, [r7, #4]
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	440b      	add	r3, r1
 800a920:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d104      	bne.n	800a934 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fb83 	bl	800b038 <USBD_CtlError>
                  break;
 800a932:	e041      	b.n	800a9b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	da0b      	bge.n	800a954 <USBD_StdEPReq+0x23e>
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a942:	4613      	mov	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	3310      	adds	r3, #16
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	4413      	add	r3, r2
 800a950:	3304      	adds	r3, #4
 800a952:	e00b      	b.n	800a96c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a954:	7bbb      	ldrb	r3, [r7, #14]
 800a956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a95a:	4613      	mov	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	4413      	add	r3, r2
 800a96a:	3304      	adds	r3, #4
 800a96c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <USBD_StdEPReq+0x264>
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	2b80      	cmp	r3, #128	; 0x80
 800a978:	d103      	bne.n	800a982 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	e00e      	b.n	800a9a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a982:	7bbb      	ldrb	r3, [r7, #14]
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f001 f916 	bl	800bbb8 <USBD_LL_IsStallEP>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d003      	beq.n	800a99a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2201      	movs	r2, #1
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	e002      	b.n	800a9a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fbb7 	bl	800b11a <USBD_CtlSendData>
              break;
 800a9ac:	e004      	b.n	800a9b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fb41 	bl	800b038 <USBD_CtlError>
              break;
 800a9b6:	bf00      	nop
          }
          break;
 800a9b8:	e004      	b.n	800a9c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fb3b 	bl	800b038 <USBD_CtlError>
          break;
 800a9c2:	bf00      	nop
      }
      break;
 800a9c4:	e004      	b.n	800a9d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fb35 	bl	800b038 <USBD_CtlError>
      break;
 800a9ce:	bf00      	nop
  }

  return ret;
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
	...

0800a9dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	885b      	ldrh	r3, [r3, #2]
 800a9f6:	0a1b      	lsrs	r3, r3, #8
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	2b06      	cmp	r3, #6
 800a9fe:	f200 8128 	bhi.w	800ac52 <USBD_GetDescriptor+0x276>
 800aa02:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <USBD_GetDescriptor+0x2c>)
 800aa04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa08:	0800aa25 	.word	0x0800aa25
 800aa0c:	0800aa3d 	.word	0x0800aa3d
 800aa10:	0800aa7d 	.word	0x0800aa7d
 800aa14:	0800ac53 	.word	0x0800ac53
 800aa18:	0800ac53 	.word	0x0800ac53
 800aa1c:	0800abf3 	.word	0x0800abf3
 800aa20:	0800ac1f 	.word	0x0800ac1f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	7c12      	ldrb	r2, [r2, #16]
 800aa30:	f107 0108 	add.w	r1, r7, #8
 800aa34:	4610      	mov	r0, r2
 800aa36:	4798      	blx	r3
 800aa38:	60f8      	str	r0, [r7, #12]
      break;
 800aa3a:	e112      	b.n	800ac62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	7c1b      	ldrb	r3, [r3, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10d      	bne.n	800aa60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4c:	f107 0208 	add.w	r2, r7, #8
 800aa50:	4610      	mov	r0, r2
 800aa52:	4798      	blx	r3
 800aa54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa5e:	e100      	b.n	800ac62 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	f107 0208 	add.w	r2, r7, #8
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	4798      	blx	r3
 800aa70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3301      	adds	r3, #1
 800aa76:	2202      	movs	r2, #2
 800aa78:	701a      	strb	r2, [r3, #0]
      break;
 800aa7a:	e0f2      	b.n	800ac62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	885b      	ldrh	r3, [r3, #2]
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b05      	cmp	r3, #5
 800aa84:	f200 80ac 	bhi.w	800abe0 <USBD_GetDescriptor+0x204>
 800aa88:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <USBD_GetDescriptor+0xb4>)
 800aa8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8e:	bf00      	nop
 800aa90:	0800aaa9 	.word	0x0800aaa9
 800aa94:	0800aadd 	.word	0x0800aadd
 800aa98:	0800ab11 	.word	0x0800ab11
 800aa9c:	0800ab45 	.word	0x0800ab45
 800aaa0:	0800ab79 	.word	0x0800ab79
 800aaa4:	0800abad 	.word	0x0800abad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00b      	beq.n	800aacc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	7c12      	ldrb	r2, [r2, #16]
 800aac0:	f107 0108 	add.w	r1, r7, #8
 800aac4:	4610      	mov	r0, r2
 800aac6:	4798      	blx	r3
 800aac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaca:	e091      	b.n	800abf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fab2 	bl	800b038 <USBD_CtlError>
            err++;
 800aad4:	7afb      	ldrb	r3, [r7, #11]
 800aad6:	3301      	adds	r3, #1
 800aad8:	72fb      	strb	r3, [r7, #11]
          break;
 800aada:	e089      	b.n	800abf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00b      	beq.n	800ab00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	7c12      	ldrb	r2, [r2, #16]
 800aaf4:	f107 0108 	add.w	r1, r7, #8
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4798      	blx	r3
 800aafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aafe:	e077      	b.n	800abf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fa98 	bl	800b038 <USBD_CtlError>
            err++;
 800ab08:	7afb      	ldrb	r3, [r7, #11]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab0e:	e06f      	b.n	800abf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00b      	beq.n	800ab34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	7c12      	ldrb	r2, [r2, #16]
 800ab28:	f107 0108 	add.w	r1, r7, #8
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	4798      	blx	r3
 800ab30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab32:	e05d      	b.n	800abf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fa7e 	bl	800b038 <USBD_CtlError>
            err++;
 800ab3c:	7afb      	ldrb	r3, [r7, #11]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	72fb      	strb	r3, [r7, #11]
          break;
 800ab42:	e055      	b.n	800abf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00b      	beq.n	800ab68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	7c12      	ldrb	r2, [r2, #16]
 800ab5c:	f107 0108 	add.w	r1, r7, #8
 800ab60:	4610      	mov	r0, r2
 800ab62:	4798      	blx	r3
 800ab64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab66:	e043      	b.n	800abf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fa64 	bl	800b038 <USBD_CtlError>
            err++;
 800ab70:	7afb      	ldrb	r3, [r7, #11]
 800ab72:	3301      	adds	r3, #1
 800ab74:	72fb      	strb	r3, [r7, #11]
          break;
 800ab76:	e03b      	b.n	800abf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00b      	beq.n	800ab9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8a:	695b      	ldr	r3, [r3, #20]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	7c12      	ldrb	r2, [r2, #16]
 800ab90:	f107 0108 	add.w	r1, r7, #8
 800ab94:	4610      	mov	r0, r2
 800ab96:	4798      	blx	r3
 800ab98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab9a:	e029      	b.n	800abf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fa4a 	bl	800b038 <USBD_CtlError>
            err++;
 800aba4:	7afb      	ldrb	r3, [r7, #11]
 800aba6:	3301      	adds	r3, #1
 800aba8:	72fb      	strb	r3, [r7, #11]
          break;
 800abaa:	e021      	b.n	800abf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00b      	beq.n	800abd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	7c12      	ldrb	r2, [r2, #16]
 800abc4:	f107 0108 	add.w	r1, r7, #8
 800abc8:	4610      	mov	r0, r2
 800abca:	4798      	blx	r3
 800abcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abce:	e00f      	b.n	800abf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fa30 	bl	800b038 <USBD_CtlError>
            err++;
 800abd8:	7afb      	ldrb	r3, [r7, #11]
 800abda:	3301      	adds	r3, #1
 800abdc:	72fb      	strb	r3, [r7, #11]
          break;
 800abde:	e007      	b.n	800abf0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fa28 	bl	800b038 <USBD_CtlError>
          err++;
 800abe8:	7afb      	ldrb	r3, [r7, #11]
 800abea:	3301      	adds	r3, #1
 800abec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800abee:	bf00      	nop
      }
      break;
 800abf0:	e037      	b.n	800ac62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	7c1b      	ldrb	r3, [r3, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d109      	bne.n	800ac0e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac02:	f107 0208 	add.w	r2, r7, #8
 800ac06:	4610      	mov	r0, r2
 800ac08:	4798      	blx	r3
 800ac0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac0c:	e029      	b.n	800ac62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fa11 	bl	800b038 <USBD_CtlError>
        err++;
 800ac16:	7afb      	ldrb	r3, [r7, #11]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	72fb      	strb	r3, [r7, #11]
      break;
 800ac1c:	e021      	b.n	800ac62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	7c1b      	ldrb	r3, [r3, #16]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d10d      	bne.n	800ac42 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2e:	f107 0208 	add.w	r2, r7, #8
 800ac32:	4610      	mov	r0, r2
 800ac34:	4798      	blx	r3
 800ac36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	2207      	movs	r2, #7
 800ac3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac40:	e00f      	b.n	800ac62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac42:	6839      	ldr	r1, [r7, #0]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f9f7 	bl	800b038 <USBD_CtlError>
        err++;
 800ac4a:	7afb      	ldrb	r3, [r7, #11]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ac50:	e007      	b.n	800ac62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 f9ef 	bl	800b038 <USBD_CtlError>
      err++;
 800ac5a:	7afb      	ldrb	r3, [r7, #11]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ac60:	bf00      	nop
  }

  if (err != 0U)
 800ac62:	7afb      	ldrb	r3, [r7, #11]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d11e      	bne.n	800aca6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	88db      	ldrh	r3, [r3, #6]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d016      	beq.n	800ac9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ac70:	893b      	ldrh	r3, [r7, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00e      	beq.n	800ac94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	88da      	ldrh	r2, [r3, #6]
 800ac7a:	893b      	ldrh	r3, [r7, #8]
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	bf28      	it	cs
 800ac80:	4613      	movcs	r3, r2
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac86:	893b      	ldrh	r3, [r7, #8]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	68f9      	ldr	r1, [r7, #12]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fa44 	bl	800b11a <USBD_CtlSendData>
 800ac92:	e009      	b.n	800aca8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f9ce 	bl	800b038 <USBD_CtlError>
 800ac9c:	e004      	b.n	800aca8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 fa95 	bl	800b1ce <USBD_CtlSendStatus>
 800aca4:	e000      	b.n	800aca8 <USBD_GetDescriptor+0x2cc>
    return;
 800aca6:	bf00      	nop
  }
}
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop

0800acb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	889b      	ldrh	r3, [r3, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d131      	bne.n	800ad26 <USBD_SetAddress+0x76>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	88db      	ldrh	r3, [r3, #6]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d12d      	bne.n	800ad26 <USBD_SetAddress+0x76>
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	885b      	ldrh	r3, [r3, #2]
 800acce:	2b7f      	cmp	r3, #127	; 0x7f
 800acd0:	d829      	bhi.n	800ad26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	885b      	ldrh	r3, [r3, #2]
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	d104      	bne.n	800acf4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f9a3 	bl	800b038 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf2:	e01d      	b.n	800ad30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	7bfa      	ldrb	r2, [r7, #15]
 800acf8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	4619      	mov	r1, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 ff85 	bl	800bc10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fa61 	bl	800b1ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d004      	beq.n	800ad1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2202      	movs	r2, #2
 800ad16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad1a:	e009      	b.n	800ad30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad24:	e004      	b.n	800ad30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad26:	6839      	ldr	r1, [r7, #0]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f985 	bl	800b038 <USBD_CtlError>
  }
}
 800ad2e:	bf00      	nop
 800ad30:	bf00      	nop
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	885b      	ldrh	r3, [r3, #2]
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	4b4c      	ldr	r3, [pc, #304]	; (800ae80 <USBD_SetConfig+0x148>)
 800ad4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad50:	4b4b      	ldr	r3, [pc, #300]	; (800ae80 <USBD_SetConfig+0x148>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d905      	bls.n	800ad64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f96c 	bl	800b038 <USBD_CtlError>
    return USBD_FAIL;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e088      	b.n	800ae76 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d002      	beq.n	800ad76 <USBD_SetConfig+0x3e>
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	d025      	beq.n	800adc0 <USBD_SetConfig+0x88>
 800ad74:	e071      	b.n	800ae5a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ad76:	4b42      	ldr	r3, [pc, #264]	; (800ae80 <USBD_SetConfig+0x148>)
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d01c      	beq.n	800adb8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ad7e:	4b40      	ldr	r3, [pc, #256]	; (800ae80 <USBD_SetConfig+0x148>)
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad88:	4b3d      	ldr	r3, [pc, #244]	; (800ae80 <USBD_SetConfig+0x148>)
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff f948 	bl	800a024 <USBD_SetClassConfig>
 800ad94:	4603      	mov	r3, r0
 800ad96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d004      	beq.n	800ada8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f949 	bl	800b038 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ada6:	e065      	b.n	800ae74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fa10 	bl	800b1ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2203      	movs	r2, #3
 800adb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800adb6:	e05d      	b.n	800ae74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fa08 	bl	800b1ce <USBD_CtlSendStatus>
      break;
 800adbe:	e059      	b.n	800ae74 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800adc0:	4b2f      	ldr	r3, [pc, #188]	; (800ae80 <USBD_SetConfig+0x148>)
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d112      	bne.n	800adee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2202      	movs	r2, #2
 800adcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800add0:	4b2b      	ldr	r3, [pc, #172]	; (800ae80 <USBD_SetConfig+0x148>)
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	461a      	mov	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adda:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <USBD_SetConfig+0x148>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7ff f93b 	bl	800a05c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f9f1 	bl	800b1ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adec:	e042      	b.n	800ae74 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800adee:	4b24      	ldr	r3, [pc, #144]	; (800ae80 <USBD_SetConfig+0x148>)
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d02a      	beq.n	800ae52 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7ff f929 	bl	800a05c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae0a:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <USBD_SetConfig+0x148>)
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae14:	4b1a      	ldr	r3, [pc, #104]	; (800ae80 <USBD_SetConfig+0x148>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff f902 	bl	800a024 <USBD_SetClassConfig>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00f      	beq.n	800ae4a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f903 	bl	800b038 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7ff f90e 	bl	800a05c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae48:	e014      	b.n	800ae74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f9bf 	bl	800b1ce <USBD_CtlSendStatus>
      break;
 800ae50:	e010      	b.n	800ae74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f9bb 	bl	800b1ce <USBD_CtlSendStatus>
      break;
 800ae58:	e00c      	b.n	800ae74 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ae5a:	6839      	ldr	r1, [r7, #0]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f8eb 	bl	800b038 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae62:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <USBD_SetConfig+0x148>)
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff f8f7 	bl	800a05c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	73fb      	strb	r3, [r7, #15]
      break;
 800ae72:	bf00      	nop
  }

  return ret;
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	20000458 	.word	0x20000458

0800ae84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	88db      	ldrh	r3, [r3, #6]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d004      	beq.n	800aea0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 f8cd 	bl	800b038 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae9e:	e023      	b.n	800aee8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	dc02      	bgt.n	800aeb2 <USBD_GetConfig+0x2e>
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	dc03      	bgt.n	800aeb8 <USBD_GetConfig+0x34>
 800aeb0:	e015      	b.n	800aede <USBD_GetConfig+0x5a>
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d00b      	beq.n	800aece <USBD_GetConfig+0x4a>
 800aeb6:	e012      	b.n	800aede <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3308      	adds	r3, #8
 800aec2:	2201      	movs	r2, #1
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f927 	bl	800b11a <USBD_CtlSendData>
        break;
 800aecc:	e00c      	b.n	800aee8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	3304      	adds	r3, #4
 800aed2:	2201      	movs	r2, #1
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f91f 	bl	800b11a <USBD_CtlSendData>
        break;
 800aedc:	e004      	b.n	800aee8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f8a9 	bl	800b038 <USBD_CtlError>
        break;
 800aee6:	bf00      	nop
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af00:	b2db      	uxtb	r3, r3
 800af02:	3b01      	subs	r3, #1
 800af04:	2b02      	cmp	r3, #2
 800af06:	d81e      	bhi.n	800af46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	88db      	ldrh	r3, [r3, #6]
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d004      	beq.n	800af1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f890 	bl	800b038 <USBD_CtlError>
        break;
 800af18:	e01a      	b.n	800af50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af26:	2b00      	cmp	r3, #0
 800af28:	d005      	beq.n	800af36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	f043 0202 	orr.w	r2, r3, #2
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	330c      	adds	r3, #12
 800af3a:	2202      	movs	r2, #2
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f8eb 	bl	800b11a <USBD_CtlSendData>
      break;
 800af44:	e004      	b.n	800af50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f875 	bl	800b038 <USBD_CtlError>
      break;
 800af4e:	bf00      	nop
  }
}
 800af50:	bf00      	nop
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	885b      	ldrh	r3, [r3, #2]
 800af66:	2b01      	cmp	r3, #1
 800af68:	d106      	bne.n	800af78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f92b 	bl	800b1ce <USBD_CtlSendStatus>
  }
}
 800af78:	bf00      	nop
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af90:	b2db      	uxtb	r3, r3
 800af92:	3b01      	subs	r3, #1
 800af94:	2b02      	cmp	r3, #2
 800af96:	d80b      	bhi.n	800afb0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	885b      	ldrh	r3, [r3, #2]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d10c      	bne.n	800afba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f910 	bl	800b1ce <USBD_CtlSendStatus>
      }
      break;
 800afae:	e004      	b.n	800afba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f840 	bl	800b038 <USBD_CtlError>
      break;
 800afb8:	e000      	b.n	800afbc <USBD_ClrFeature+0x3c>
      break;
 800afba:	bf00      	nop
  }
}
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	781a      	ldrb	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	3301      	adds	r3, #1
 800afde:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	781a      	ldrb	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3301      	adds	r3, #1
 800afec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f7ff fabb 	bl	800a56a <SWAPBYTE>
 800aff4:	4603      	mov	r3, r0
 800aff6:	461a      	mov	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3301      	adds	r3, #1
 800b000:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	3301      	adds	r3, #1
 800b006:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f7ff faae 	bl	800a56a <SWAPBYTE>
 800b00e:	4603      	mov	r3, r0
 800b010:	461a      	mov	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	3301      	adds	r3, #1
 800b01a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	3301      	adds	r3, #1
 800b020:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f7ff faa1 	bl	800a56a <SWAPBYTE>
 800b028:	4603      	mov	r3, r0
 800b02a:	461a      	mov	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	80da      	strh	r2, [r3, #6]
}
 800b030:	bf00      	nop
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b042:	2180      	movs	r1, #128	; 0x80
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fd79 	bl	800bb3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b04a:	2100      	movs	r1, #0
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fd75 	bl	800bb3c <USBD_LL_StallEP>
}
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b086      	sub	sp, #24
 800b05e:	af00      	add	r7, sp, #0
 800b060:	60f8      	str	r0, [r7, #12]
 800b062:	60b9      	str	r1, [r7, #8]
 800b064:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b066:	2300      	movs	r3, #0
 800b068:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d036      	beq.n	800b0de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b074:	6938      	ldr	r0, [r7, #16]
 800b076:	f000 f836 	bl	800b0e6 <USBD_GetLen>
 800b07a:	4603      	mov	r3, r0
 800b07c:	3301      	adds	r3, #1
 800b07e:	b29b      	uxth	r3, r3
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	b29a      	uxth	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b088:	7dfb      	ldrb	r3, [r7, #23]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	4413      	add	r3, r2
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	7812      	ldrb	r2, [r2, #0]
 800b092:	701a      	strb	r2, [r3, #0]
  idx++;
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	3301      	adds	r3, #1
 800b098:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	4413      	add	r3, r2
 800b0a0:	2203      	movs	r2, #3
 800b0a2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0aa:	e013      	b.n	800b0d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b0ac:	7dfb      	ldrb	r3, [r7, #23]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	7812      	ldrb	r2, [r2, #0]
 800b0b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	613b      	str	r3, [r7, #16]
    idx++;
 800b0be:	7dfb      	ldrb	r3, [r7, #23]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b0c4:	7dfb      	ldrb	r3, [r7, #23]
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	701a      	strb	r2, [r3, #0]
    idx++;
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1e7      	bne.n	800b0ac <USBD_GetString+0x52>
 800b0dc:	e000      	b.n	800b0e0 <USBD_GetString+0x86>
    return;
 800b0de:	bf00      	nop
  }
}
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b085      	sub	sp, #20
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b0f6:	e005      	b.n	800b104 <USBD_GetLen+0x1e>
  {
    len++;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	3301      	adds	r3, #1
 800b102:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1f5      	bne.n	800b0f8 <USBD_GetLen+0x12>
  }

  return len;
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b084      	sub	sp, #16
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60f8      	str	r0, [r7, #12]
 800b122:	60b9      	str	r1, [r7, #8]
 800b124:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2202      	movs	r2, #2
 800b12a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	2100      	movs	r1, #0
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f000 fd84 	bl	800bc4e <USBD_LL_Transmit>

  return USBD_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	2100      	movs	r1, #0
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f000 fd73 	bl	800bc4e <USBD_LL_Transmit>

  return USBD_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b084      	sub	sp, #16
 800b176:	af00      	add	r7, sp, #0
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	60b9      	str	r1, [r7, #8]
 800b17c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2203      	movs	r2, #3
 800b182:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	2100      	movs	r1, #0
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 fd77 	bl	800bc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	2100      	movs	r1, #0
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f000 fd66 	bl	800bc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b082      	sub	sp, #8
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2204      	movs	r2, #4
 800b1da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1de:	2300      	movs	r3, #0
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fd32 	bl	800bc4e <USBD_LL_Transmit>

  return USBD_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2205      	movs	r2, #5
 800b200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b204:	2300      	movs	r3, #0
 800b206:	2200      	movs	r2, #0
 800b208:	2100      	movs	r1, #0
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fd40 	bl	800bc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b220:	2200      	movs	r2, #0
 800b222:	4912      	ldr	r1, [pc, #72]	; (800b26c <MX_USB_DEVICE_Init+0x50>)
 800b224:	4812      	ldr	r0, [pc, #72]	; (800b270 <MX_USB_DEVICE_Init+0x54>)
 800b226:	f7fe fe8f 	bl	8009f48 <USBD_Init>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b230:	f7f6 fe04 	bl	8001e3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b234:	490f      	ldr	r1, [pc, #60]	; (800b274 <MX_USB_DEVICE_Init+0x58>)
 800b236:	480e      	ldr	r0, [pc, #56]	; (800b270 <MX_USB_DEVICE_Init+0x54>)
 800b238:	f7fe feb6 	bl	8009fa8 <USBD_RegisterClass>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b242:	f7f6 fdfb 	bl	8001e3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b246:	490c      	ldr	r1, [pc, #48]	; (800b278 <MX_USB_DEVICE_Init+0x5c>)
 800b248:	4809      	ldr	r0, [pc, #36]	; (800b270 <MX_USB_DEVICE_Init+0x54>)
 800b24a:	f7fe fdd7 	bl	8009dfc <USBD_CDC_RegisterInterface>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b254:	f7f6 fdf2 	bl	8001e3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b258:	4805      	ldr	r0, [pc, #20]	; (800b270 <MX_USB_DEVICE_Init+0x54>)
 800b25a:	f7fe fecc 	bl	8009ff6 <USBD_Start>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b264:	f7f6 fdea 	bl	8001e3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b268:	bf00      	nop
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	2000019c 	.word	0x2000019c
 800b270:	200010e0 	.word	0x200010e0
 800b274:	2000007c 	.word	0x2000007c
 800b278:	20000188 	.word	0x20000188

0800b27c <circularBufferInit>:
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
void circularBufferInit(){
 800b27c:	b580      	push	{r7, lr}
 800b27e:	af00      	add	r7, sp, #0
	cbuf = circular_buf_init(circularBuffer, CIRCULAR_BUFFER_SIZE);
 800b280:	f240 4104 	movw	r1, #1028	; 0x404
 800b284:	4803      	ldr	r0, [pc, #12]	; (800b294 <circularBufferInit+0x18>)
 800b286:	f7fe f9c5 	bl	8009614 <circular_buf_init>
 800b28a:	4603      	mov	r3, r0
 800b28c:	4a02      	ldr	r2, [pc, #8]	; (800b298 <circularBufferInit+0x1c>)
 800b28e:	6013      	str	r3, [r2, #0]
}
 800b290:	bf00      	nop
 800b292:	bd80      	pop	{r7, pc}
 800b294:	20001798 	.word	0x20001798
 800b298:	20001090 	.word	0x20001090

0800b29c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4905      	ldr	r1, [pc, #20]	; (800b2b8 <CDC_Init_FS+0x1c>)
 800b2a4:	4805      	ldr	r0, [pc, #20]	; (800b2bc <CDC_Init_FS+0x20>)
 800b2a6:	f7fe fdbe 	bl	8009e26 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b2aa:	4905      	ldr	r1, [pc, #20]	; (800b2c0 <CDC_Init_FS+0x24>)
 800b2ac:	4803      	ldr	r0, [pc, #12]	; (800b2bc <CDC_Init_FS+0x20>)
 800b2ae:	f7fe fdd8 	bl	8009e62 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b2b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	20001b9c 	.word	0x20001b9c
 800b2bc:	200010e0 	.word	0x200010e0
 800b2c0:	200013b0 	.word	0x200013b0

0800b2c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b2c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	4603      	mov	r3, r0
 800b2dc:	6039      	str	r1, [r7, #0]
 800b2de:	71fb      	strb	r3, [r7, #7]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b2e4:	79fb      	ldrb	r3, [r7, #7]
 800b2e6:	2b23      	cmp	r3, #35	; 0x23
 800b2e8:	f200 80a8 	bhi.w	800b43c <CDC_Control_FS+0x168>
 800b2ec:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <CDC_Control_FS+0x20>)
 800b2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f2:	bf00      	nop
 800b2f4:	0800b43d 	.word	0x0800b43d
 800b2f8:	0800b43d 	.word	0x0800b43d
 800b2fc:	0800b43d 	.word	0x0800b43d
 800b300:	0800b43d 	.word	0x0800b43d
 800b304:	0800b43d 	.word	0x0800b43d
 800b308:	0800b43d 	.word	0x0800b43d
 800b30c:	0800b43d 	.word	0x0800b43d
 800b310:	0800b43d 	.word	0x0800b43d
 800b314:	0800b43d 	.word	0x0800b43d
 800b318:	0800b43d 	.word	0x0800b43d
 800b31c:	0800b43d 	.word	0x0800b43d
 800b320:	0800b43d 	.word	0x0800b43d
 800b324:	0800b43d 	.word	0x0800b43d
 800b328:	0800b43d 	.word	0x0800b43d
 800b32c:	0800b43d 	.word	0x0800b43d
 800b330:	0800b43d 	.word	0x0800b43d
 800b334:	0800b43d 	.word	0x0800b43d
 800b338:	0800b43d 	.word	0x0800b43d
 800b33c:	0800b43d 	.word	0x0800b43d
 800b340:	0800b43d 	.word	0x0800b43d
 800b344:	0800b43d 	.word	0x0800b43d
 800b348:	0800b43d 	.word	0x0800b43d
 800b34c:	0800b43d 	.word	0x0800b43d
 800b350:	0800b43d 	.word	0x0800b43d
 800b354:	0800b43d 	.word	0x0800b43d
 800b358:	0800b43d 	.word	0x0800b43d
 800b35c:	0800b43d 	.word	0x0800b43d
 800b360:	0800b43d 	.word	0x0800b43d
 800b364:	0800b43d 	.word	0x0800b43d
 800b368:	0800b43d 	.word	0x0800b43d
 800b36c:	0800b43d 	.word	0x0800b43d
 800b370:	0800b43d 	.word	0x0800b43d
 800b374:	0800b385 	.word	0x0800b385
 800b378:	0800b3c9 	.word	0x0800b3c9
 800b37c:	0800b41d 	.word	0x0800b41d
 800b380:	0800b43d 	.word	0x0800b43d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	461a      	mov	r2, r3
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	3301      	adds	r3, #1
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	021b      	lsls	r3, r3, #8
 800b392:	431a      	orrs	r2, r3
		(pbuf[2] << 16) | (pbuf[3] << 24));
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	3302      	adds	r3, #2
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	041b      	lsls	r3, r3, #16
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800b39c:	431a      	orrs	r2, r3
		(pbuf[2] << 16) | (pbuf[3] << 24));
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	3303      	adds	r3, #3
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	061b      	lsls	r3, r3, #24
 800b3a6:	4313      	orrs	r3, r2
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	4b28      	ldr	r3, [pc, #160]	; (800b44c <CDC_Control_FS+0x178>)
 800b3ac:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	791a      	ldrb	r2, [r3, #4]
 800b3b2:	4b26      	ldr	r3, [pc, #152]	; (800b44c <CDC_Control_FS+0x178>)
 800b3b4:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	795a      	ldrb	r2, [r3, #5]
 800b3ba:	4b24      	ldr	r3, [pc, #144]	; (800b44c <CDC_Control_FS+0x178>)
 800b3bc:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	799a      	ldrb	r2, [r3, #6]
 800b3c2:	4b22      	ldr	r3, [pc, #136]	; (800b44c <CDC_Control_FS+0x178>)
 800b3c4:	719a      	strb	r2, [r3, #6]
    break;
 800b3c6:	e03a      	b.n	800b43e <CDC_Control_FS+0x16a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b3c8:	4b20      	ldr	r3, [pc, #128]	; (800b44c <CDC_Control_FS+0x178>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	b2da      	uxtb	r2, r3
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800b3d2:	4b1e      	ldr	r3, [pc, #120]	; (800b44c <CDC_Control_FS+0x178>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	0a1a      	lsrs	r2, r3, #8
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	b2d2      	uxtb	r2, r2
 800b3de:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800b3e0:	4b1a      	ldr	r3, [pc, #104]	; (800b44c <CDC_Control_FS+0x178>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	0c1a      	lsrs	r2, r3, #16
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	3302      	adds	r3, #2
 800b3ea:	b2d2      	uxtb	r2, r2
 800b3ec:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800b3ee:	4b17      	ldr	r3, [pc, #92]	; (800b44c <CDC_Control_FS+0x178>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	0e1a      	lsrs	r2, r3, #24
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	3303      	adds	r3, #3
 800b3f8:	b2d2      	uxtb	r2, r2
 800b3fa:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	3304      	adds	r3, #4
 800b400:	4a12      	ldr	r2, [pc, #72]	; (800b44c <CDC_Control_FS+0x178>)
 800b402:	7912      	ldrb	r2, [r2, #4]
 800b404:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	3305      	adds	r3, #5
 800b40a:	4a10      	ldr	r2, [pc, #64]	; (800b44c <CDC_Control_FS+0x178>)
 800b40c:	7952      	ldrb	r2, [r2, #5]
 800b40e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	3306      	adds	r3, #6
 800b414:	4a0d      	ldr	r2, [pc, #52]	; (800b44c <CDC_Control_FS+0x178>)
 800b416:	7992      	ldrb	r2, [r2, #6]
 800b418:	701a      	strb	r2, [r3, #0]
    break;
 800b41a:	e010      	b.n	800b43e <CDC_Control_FS+0x16a>

    case CDC_SET_CONTROL_LINE_STATE:{
        USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	60fb      	str	r3, [r7, #12]
        if(req->wValue &0x0001 != 0){
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	885b      	ldrh	r3, [r3, #2]
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <CDC_Control_FS+0x160>
      	  isComPortOpen = true;
 800b42c:	4b08      	ldr	r3, [pc, #32]	; (800b450 <CDC_Control_FS+0x17c>)
 800b42e:	2201      	movs	r2, #1
 800b430:	701a      	strb	r2, [r3, #0]
        } else {
          isComPortOpen = false;
        }
    }

    break;
 800b432:	e004      	b.n	800b43e <CDC_Control_FS+0x16a>
          isComPortOpen = false;
 800b434:	4b06      	ldr	r3, [pc, #24]	; (800b450 <CDC_Control_FS+0x17c>)
 800b436:	2200      	movs	r2, #0
 800b438:	701a      	strb	r2, [r3, #0]
    break;
 800b43a:	e000      	b.n	800b43e <CDC_Control_FS+0x16a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b43c:	bf00      	nop
  }

  return (USBD_OK);
 800b43e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b440:	4618      	mov	r0, r3
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	20000180 	.word	0x20000180
 800b450:	20000459 	.word	0x20000459

0800b454 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b45e:	6879      	ldr	r1, [r7, #4]
 800b460:	481c      	ldr	r0, [pc, #112]	; (800b4d4 <CDC_Receive_FS+0x80>)
 800b462:	f7fe fcfe 	bl	8009e62 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b466:	481b      	ldr	r0, [pc, #108]	; (800b4d4 <CDC_Receive_FS+0x80>)
 800b468:	f7fe fd44 	bl	8009ef4 <USBD_CDC_ReceivePacket>

	uint16_t len = (uint16_t)*Len;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	81bb      	strh	r3, [r7, #12]
	// Update circular buffer with incoming values
	for(uint8_t i = 0; i < len; i++){
 800b472:	2300      	movs	r3, #0
 800b474:	73fb      	strb	r3, [r7, #15]
 800b476:	e01c      	b.n	800b4b2 <CDC_Receive_FS+0x5e>
		circular_buf_put(cbuf, Buf[i]);
 800b478:	4b17      	ldr	r3, [pc, #92]	; (800b4d8 <CDC_Receive_FS+0x84>)
 800b47a:	6818      	ldr	r0, [r3, #0]
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	4413      	add	r3, r2
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	4619      	mov	r1, r3
 800b486:	f7fe f92d 	bl	80096e4 <circular_buf_put>
		// Checking for '\r' is there for debugging purposes which is sent by putty and minicom.
		// In production only '\n' is sent. Therefore, there is no check for '\r\n' case.
		if (Buf[i]=='\n'||Buf[i]=='\r'){
 800b48a:	7bfb      	ldrb	r3, [r7, #15]
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	4413      	add	r3, r2
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	2b0a      	cmp	r3, #10
 800b494:	d005      	beq.n	800b4a2 <CDC_Receive_FS+0x4e>
 800b496:	7bfb      	ldrb	r3, [r7, #15]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	4413      	add	r3, r2
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	2b0d      	cmp	r3, #13
 800b4a0:	d104      	bne.n	800b4ac <CDC_Receive_FS+0x58>
			circular_buf_add_input(cbuf);
 800b4a2:	4b0d      	ldr	r3, [pc, #52]	; (800b4d8 <CDC_Receive_FS+0x84>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fe f826 	bl	80094f8 <circular_buf_add_input>
	for(uint8_t i = 0; i < len; i++){
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	73fb      	strb	r3, [r7, #15]
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	89ba      	ldrh	r2, [r7, #12]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d8dd      	bhi.n	800b478 <CDC_Receive_FS+0x24>
		}
	}
	memset(Buf, '\0', len);   // clear the Buf also
 800b4bc:	89bb      	ldrh	r3, [r7, #12]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fcd0 	bl	800be68 <memset>
	return (USBD_OK);
 800b4c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	200010e0 	.word	0x200010e0
 800b4d8:	20001090 	.word	0x20001090

0800b4dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b4ec:	4b0d      	ldr	r3, [pc, #52]	; (800b524 <CDC_Transmit_FS+0x48>)
 800b4ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d001      	beq.n	800b502 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e00b      	b.n	800b51a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b502:	887b      	ldrh	r3, [r7, #2]
 800b504:	461a      	mov	r2, r3
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	4806      	ldr	r0, [pc, #24]	; (800b524 <CDC_Transmit_FS+0x48>)
 800b50a:	f7fe fc8c 	bl	8009e26 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b50e:	4805      	ldr	r0, [pc, #20]	; (800b524 <CDC_Transmit_FS+0x48>)
 800b510:	f7fe fcc0 	bl	8009e94 <USBD_CDC_TransmitPacket>
 800b514:	4603      	mov	r3, r0
 800b516:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b518:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	200010e0 	.word	0x200010e0

0800b528 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b528:	b480      	push	{r7}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	4613      	mov	r3, r2
 800b534:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b53a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	371c      	adds	r7, #28
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
	...

0800b54c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	6039      	str	r1, [r7, #0]
 800b556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2212      	movs	r2, #18
 800b55c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b55e:	4b03      	ldr	r3, [pc, #12]	; (800b56c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr
 800b56c:	200001b8 	.word	0x200001b8

0800b570 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	6039      	str	r1, [r7, #0]
 800b57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2204      	movs	r2, #4
 800b580:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b582:	4b03      	ldr	r3, [pc, #12]	; (800b590 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b584:	4618      	mov	r0, r3
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr
 800b590:	200001cc 	.word	0x200001cc

0800b594 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	6039      	str	r1, [r7, #0]
 800b59e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5a0:	79fb      	ldrb	r3, [r7, #7]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d105      	bne.n	800b5b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	4907      	ldr	r1, [pc, #28]	; (800b5c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5aa:	4808      	ldr	r0, [pc, #32]	; (800b5cc <USBD_FS_ProductStrDescriptor+0x38>)
 800b5ac:	f7ff fd55 	bl	800b05a <USBD_GetString>
 800b5b0:	e004      	b.n	800b5bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	4904      	ldr	r1, [pc, #16]	; (800b5c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5b6:	4805      	ldr	r0, [pc, #20]	; (800b5cc <USBD_FS_ProductStrDescriptor+0x38>)
 800b5b8:	f7ff fd4f 	bl	800b05a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5bc:	4b02      	ldr	r3, [pc, #8]	; (800b5c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20001f84 	.word	0x20001f84
 800b5cc:	0800ee74 	.word	0x0800ee74

0800b5d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	6039      	str	r1, [r7, #0]
 800b5da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	4904      	ldr	r1, [pc, #16]	; (800b5f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b5e0:	4804      	ldr	r0, [pc, #16]	; (800b5f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b5e2:	f7ff fd3a 	bl	800b05a <USBD_GetString>
  return USBD_StrDesc;
 800b5e6:	4b02      	ldr	r3, [pc, #8]	; (800b5f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	20001f84 	.word	0x20001f84
 800b5f4:	0800ee8c 	.word	0x0800ee8c

0800b5f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4603      	mov	r3, r0
 800b600:	6039      	str	r1, [r7, #0]
 800b602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	221a      	movs	r2, #26
 800b608:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b60a:	f000 f843 	bl	800b694 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b60e:	4b02      	ldr	r3, [pc, #8]	; (800b618 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	200001d0 	.word	0x200001d0

0800b61c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	6039      	str	r1, [r7, #0]
 800b626:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b628:	79fb      	ldrb	r3, [r7, #7]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d105      	bne.n	800b63a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	4907      	ldr	r1, [pc, #28]	; (800b650 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b632:	4808      	ldr	r0, [pc, #32]	; (800b654 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b634:	f7ff fd11 	bl	800b05a <USBD_GetString>
 800b638:	e004      	b.n	800b644 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	4904      	ldr	r1, [pc, #16]	; (800b650 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b63e:	4805      	ldr	r0, [pc, #20]	; (800b654 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b640:	f7ff fd0b 	bl	800b05a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b644:	4b02      	ldr	r3, [pc, #8]	; (800b650 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b646:	4618      	mov	r0, r3
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20001f84 	.word	0x20001f84
 800b654:	0800eea0 	.word	0x0800eea0

0800b658 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	6039      	str	r1, [r7, #0]
 800b662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d105      	bne.n	800b676 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b66a:	683a      	ldr	r2, [r7, #0]
 800b66c:	4907      	ldr	r1, [pc, #28]	; (800b68c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b66e:	4808      	ldr	r0, [pc, #32]	; (800b690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b670:	f7ff fcf3 	bl	800b05a <USBD_GetString>
 800b674:	e004      	b.n	800b680 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	4904      	ldr	r1, [pc, #16]	; (800b68c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b67a:	4805      	ldr	r0, [pc, #20]	; (800b690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b67c:	f7ff fced 	bl	800b05a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b680:	4b02      	ldr	r3, [pc, #8]	; (800b68c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b682:	4618      	mov	r0, r3
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	20001f84 	.word	0x20001f84
 800b690:	0800eeac 	.word	0x0800eeac

0800b694 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b69a:	4b0f      	ldr	r3, [pc, #60]	; (800b6d8 <Get_SerialNum+0x44>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6a0:	4b0e      	ldr	r3, [pc, #56]	; (800b6dc <Get_SerialNum+0x48>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6a6:	4b0e      	ldr	r3, [pc, #56]	; (800b6e0 <Get_SerialNum+0x4c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d009      	beq.n	800b6ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6ba:	2208      	movs	r2, #8
 800b6bc:	4909      	ldr	r1, [pc, #36]	; (800b6e4 <Get_SerialNum+0x50>)
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 f814 	bl	800b6ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6c4:	2204      	movs	r2, #4
 800b6c6:	4908      	ldr	r1, [pc, #32]	; (800b6e8 <Get_SerialNum+0x54>)
 800b6c8:	68b8      	ldr	r0, [r7, #8]
 800b6ca:	f000 f80f 	bl	800b6ec <IntToUnicode>
  }
}
 800b6ce:	bf00      	nop
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	1fff7a10 	.word	0x1fff7a10
 800b6dc:	1fff7a14 	.word	0x1fff7a14
 800b6e0:	1fff7a18 	.word	0x1fff7a18
 800b6e4:	200001d2 	.word	0x200001d2
 800b6e8:	200001e2 	.word	0x200001e2

0800b6ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b6fe:	2300      	movs	r3, #0
 800b700:	75fb      	strb	r3, [r7, #23]
 800b702:	e027      	b.n	800b754 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	0f1b      	lsrs	r3, r3, #28
 800b708:	2b09      	cmp	r3, #9
 800b70a:	d80b      	bhi.n	800b724 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	0f1b      	lsrs	r3, r3, #28
 800b710:	b2da      	uxtb	r2, r3
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	4619      	mov	r1, r3
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	440b      	add	r3, r1
 800b71c:	3230      	adds	r2, #48	; 0x30
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	701a      	strb	r2, [r3, #0]
 800b722:	e00a      	b.n	800b73a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	0f1b      	lsrs	r3, r3, #28
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	4619      	mov	r1, r3
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	440b      	add	r3, r1
 800b734:	3237      	adds	r2, #55	; 0x37
 800b736:	b2d2      	uxtb	r2, r2
 800b738:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	011b      	lsls	r3, r3, #4
 800b73e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	3301      	adds	r3, #1
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	4413      	add	r3, r2
 800b74a:	2200      	movs	r2, #0
 800b74c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	3301      	adds	r3, #1
 800b752:	75fb      	strb	r3, [r7, #23]
 800b754:	7dfa      	ldrb	r2, [r7, #23]
 800b756:	79fb      	ldrb	r3, [r7, #7]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d3d3      	bcc.n	800b704 <IntToUnicode+0x18>
  }
}
 800b75c:	bf00      	nop
 800b75e:	bf00      	nop
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
	...

0800b76c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08a      	sub	sp, #40	; 0x28
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b774:	f107 0314 	add.w	r3, r7, #20
 800b778:	2200      	movs	r2, #0
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	605a      	str	r2, [r3, #4]
 800b77e:	609a      	str	r2, [r3, #8]
 800b780:	60da      	str	r2, [r3, #12]
 800b782:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b78c:	d13a      	bne.n	800b804 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b78e:	2300      	movs	r3, #0
 800b790:	613b      	str	r3, [r7, #16]
 800b792:	4b1e      	ldr	r3, [pc, #120]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b796:	4a1d      	ldr	r2, [pc, #116]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b798:	f043 0301 	orr.w	r3, r3, #1
 800b79c:	6313      	str	r3, [r2, #48]	; 0x30
 800b79e:	4b1b      	ldr	r3, [pc, #108]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a2:	f003 0301 	and.w	r3, r3, #1
 800b7a6:	613b      	str	r3, [r7, #16]
 800b7a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b7aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b7ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b7bc:	230a      	movs	r3, #10
 800b7be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7c0:	f107 0314 	add.w	r3, r7, #20
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4812      	ldr	r0, [pc, #72]	; (800b810 <HAL_PCD_MspInit+0xa4>)
 800b7c8:	f7f7 ff42 	bl	8003650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b7cc:	4b0f      	ldr	r3, [pc, #60]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d0:	4a0e      	ldr	r2, [pc, #56]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d6:	6353      	str	r3, [r2, #52]	; 0x34
 800b7d8:	2300      	movs	r3, #0
 800b7da:	60fb      	str	r3, [r7, #12]
 800b7dc:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7e0:	4a0a      	ldr	r2, [pc, #40]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b7e6:	6453      	str	r3, [r2, #68]	; 0x44
 800b7e8:	4b08      	ldr	r3, [pc, #32]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7f0:	60fb      	str	r3, [r7, #12]
 800b7f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	2043      	movs	r0, #67	; 0x43
 800b7fa:	f7f7 fb82 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b7fe:	2043      	movs	r0, #67	; 0x43
 800b800:	f7f7 fb9b 	bl	8002f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b804:	bf00      	nop
 800b806:	3728      	adds	r7, #40	; 0x28
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	40023800 	.word	0x40023800
 800b810:	40020000 	.word	0x40020000

0800b814 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b828:	4619      	mov	r1, r3
 800b82a:	4610      	mov	r0, r2
 800b82c:	f7fe fc2e 	bl	800a08c <USBD_LL_SetupStage>
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	460b      	mov	r3, r1
 800b842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b84a:	78fa      	ldrb	r2, [r7, #3]
 800b84c:	6879      	ldr	r1, [r7, #4]
 800b84e:	4613      	mov	r3, r2
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	1a9b      	subs	r3, r3, r2
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	440b      	add	r3, r1
 800b858:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	78fb      	ldrb	r3, [r7, #3]
 800b860:	4619      	mov	r1, r3
 800b862:	f7fe fc68 	bl	800a136 <USBD_LL_DataOutStage>
}
 800b866:	bf00      	nop
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	460b      	mov	r3, r1
 800b878:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b880:	78fa      	ldrb	r2, [r7, #3]
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	4613      	mov	r3, r2
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	1a9b      	subs	r3, r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	440b      	add	r3, r1
 800b88e:	3348      	adds	r3, #72	; 0x48
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	78fb      	ldrb	r3, [r7, #3]
 800b894:	4619      	mov	r1, r3
 800b896:	f7fe fcb1 	bl	800a1fc <USBD_LL_DataInStage>
}
 800b89a:	bf00      	nop
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b082      	sub	sp, #8
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7fe fdc5 	bl	800a440 <USBD_LL_SOF>
}
 800b8b6:	bf00      	nop
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b084      	sub	sp, #16
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d001      	beq.n	800b8d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b8d2:	f7f6 fab3 	bl	8001e3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8dc:	7bfa      	ldrb	r2, [r7, #15]
 800b8de:	4611      	mov	r1, r2
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe fd6f 	bl	800a3c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fe fd1b 	bl	800a328 <USBD_LL_Reset>
}
 800b8f2:	bf00      	nop
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe fd6a 	bl	800a3e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	6812      	ldr	r2, [r2, #0]
 800b91e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b922:	f043 0301 	orr.w	r3, r3, #1
 800b926:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a1b      	ldr	r3, [r3, #32]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d005      	beq.n	800b93c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b930:	4b04      	ldr	r3, [pc, #16]	; (800b944 <HAL_PCD_SuspendCallback+0x48>)
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	4a03      	ldr	r2, [pc, #12]	; (800b944 <HAL_PCD_SuspendCallback+0x48>)
 800b936:	f043 0306 	orr.w	r3, r3, #6
 800b93a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	e000ed00 	.word	0xe000ed00

0800b948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe fd5a 	bl	800a410 <USBD_LL_Resume>
}
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	460b      	mov	r3, r1
 800b96e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b976:	78fa      	ldrb	r2, [r7, #3]
 800b978:	4611      	mov	r1, r2
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fe fda8 	bl	800a4d0 <USBD_LL_IsoOUTIncomplete>
}
 800b980:	bf00      	nop
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b99a:	78fa      	ldrb	r2, [r7, #3]
 800b99c:	4611      	mov	r1, r2
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe fd70 	bl	800a484 <USBD_LL_IsoINIncomplete>
}
 800b9a4:	bf00      	nop
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe fdae 	bl	800a51c <USBD_LL_DevConnected>
}
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe fdab 	bl	800a532 <USBD_LL_DevDisconnected>
}
 800b9dc:	bf00      	nop
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d13c      	bne.n	800ba6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b9f4:	4a20      	ldr	r2, [pc, #128]	; (800ba78 <USBD_LL_Init+0x94>)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a1e      	ldr	r2, [pc, #120]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba04:	4b1c      	ldr	r3, [pc, #112]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba0c:	4b1a      	ldr	r3, [pc, #104]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba0e:	2204      	movs	r2, #4
 800ba10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba12:	4b19      	ldr	r3, [pc, #100]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba14:	2202      	movs	r2, #2
 800ba16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba18:	4b17      	ldr	r3, [pc, #92]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba1e:	4b16      	ldr	r3, [pc, #88]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba20:	2202      	movs	r2, #2
 800ba22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba24:	4b14      	ldr	r3, [pc, #80]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba2a:	4b13      	ldr	r3, [pc, #76]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ba30:	4b11      	ldr	r3, [pc, #68]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ba36:	4b10      	ldr	r3, [pc, #64]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ba3c:	4b0e      	ldr	r3, [pc, #56]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba3e:	2200      	movs	r2, #0
 800ba40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ba42:	480d      	ldr	r0, [pc, #52]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba44:	f7f8 ff4f 	bl	80048e6 <HAL_PCD_Init>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ba4e:	f7f6 f9f5 	bl	8001e3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ba52:	2180      	movs	r1, #128	; 0x80
 800ba54:	4808      	ldr	r0, [pc, #32]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba56:	f7fa f8ac 	bl	8005bb2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ba5a:	2240      	movs	r2, #64	; 0x40
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	4806      	ldr	r0, [pc, #24]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba60:	f7fa f860 	bl	8005b24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ba64:	2280      	movs	r2, #128	; 0x80
 800ba66:	2101      	movs	r1, #1
 800ba68:	4803      	ldr	r0, [pc, #12]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba6a:	f7fa f85b 	bl	8005b24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	20002184 	.word	0x20002184

0800ba7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7f9 f844 	bl	8004b20 <HAL_PCD_Start>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 f942 	bl	800bd28 <USBD_Get_USB_Status>
 800baa4:	4603      	mov	r3, r0
 800baa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	4608      	mov	r0, r1
 800babc:	4611      	mov	r1, r2
 800babe:	461a      	mov	r2, r3
 800bac0:	4603      	mov	r3, r0
 800bac2:	70fb      	strb	r3, [r7, #3]
 800bac4:	460b      	mov	r3, r1
 800bac6:	70bb      	strb	r3, [r7, #2]
 800bac8:	4613      	mov	r3, r2
 800baca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bacc:	2300      	movs	r3, #0
 800bace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bada:	78bb      	ldrb	r3, [r7, #2]
 800badc:	883a      	ldrh	r2, [r7, #0]
 800bade:	78f9      	ldrb	r1, [r7, #3]
 800bae0:	f7f9 fc28 	bl	8005334 <HAL_PCD_EP_Open>
 800bae4:	4603      	mov	r3, r0
 800bae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bae8:	7bfb      	ldrb	r3, [r7, #15]
 800baea:	4618      	mov	r0, r3
 800baec:	f000 f91c 	bl	800bd28 <USBD_Get_USB_Status>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b084      	sub	sp, #16
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	460b      	mov	r3, r1
 800bb08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb18:	78fa      	ldrb	r2, [r7, #3]
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7f9 fc71 	bl	8005404 <HAL_PCD_EP_Close>
 800bb22:	4603      	mov	r3, r0
 800bb24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 f8fd 	bl	800bd28 <USBD_Get_USB_Status>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb32:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	460b      	mov	r3, r1
 800bb46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb56:	78fa      	ldrb	r2, [r7, #3]
 800bb58:	4611      	mov	r1, r2
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7f9 fd49 	bl	80055f2 <HAL_PCD_EP_SetStall>
 800bb60:	4603      	mov	r3, r0
 800bb62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 f8de 	bl	800bd28 <USBD_Get_USB_Status>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b084      	sub	sp, #16
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	460b      	mov	r3, r1
 800bb84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb94:	78fa      	ldrb	r2, [r7, #3]
 800bb96:	4611      	mov	r1, r2
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7f9 fd8e 	bl	80056ba <HAL_PCD_EP_ClrStall>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bba2:	7bfb      	ldrb	r3, [r7, #15]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f000 f8bf 	bl	800bd28 <USBD_Get_USB_Status>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbae:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bbcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	da0b      	bge.n	800bbec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bbd4:	78fb      	ldrb	r3, [r7, #3]
 800bbd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbda:	68f9      	ldr	r1, [r7, #12]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	1a9b      	subs	r3, r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	440b      	add	r3, r1
 800bbe6:	333e      	adds	r3, #62	; 0x3e
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	e00b      	b.n	800bc04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bbec:	78fb      	ldrb	r3, [r7, #3]
 800bbee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbf2:	68f9      	ldr	r1, [r7, #12]
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	1a9b      	subs	r3, r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	440b      	add	r3, r1
 800bbfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc2a:	78fa      	ldrb	r2, [r7, #3]
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7f9 fb5b 	bl	80052ea <HAL_PCD_SetAddress>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f000 f874 	bl	800bd28 <USBD_Get_USB_Status>
 800bc40:	4603      	mov	r3, r0
 800bc42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc44:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b086      	sub	sp, #24
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	60f8      	str	r0, [r7, #12]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc6c:	7af9      	ldrb	r1, [r7, #11]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	f7f9 fc74 	bl	800555e <HAL_PCD_EP_Transmit>
 800bc76:	4603      	mov	r3, r0
 800bc78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 f853 	bl	800bd28 <USBD_Get_USB_Status>
 800bc82:	4603      	mov	r3, r0
 800bc84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc86:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	607a      	str	r2, [r7, #4]
 800bc9a:	603b      	str	r3, [r7, #0]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bcae:	7af9      	ldrb	r1, [r7, #11]
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	f7f9 fbf0 	bl	8005498 <HAL_PCD_EP_Receive>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcbc:	7dfb      	ldrb	r3, [r7, #23]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 f832 	bl	800bd28 <USBD_Get_USB_Status>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bcc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bce4:	78fa      	ldrb	r2, [r7, #3]
 800bce6:	4611      	mov	r1, r2
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7f9 fc20 	bl	800552e <HAL_PCD_EP_GetRxCount>
 800bcee:	4603      	mov	r3, r0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd00:	4b03      	ldr	r3, [pc, #12]	; (800bd10 <USBD_static_malloc+0x18>)
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	2000045c 	.word	0x2000045c

0800bd14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]

}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	4603      	mov	r3, r0
 800bd30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd32:	2300      	movs	r3, #0
 800bd34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd36:	79fb      	ldrb	r3, [r7, #7]
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d817      	bhi.n	800bd6c <USBD_Get_USB_Status+0x44>
 800bd3c:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <USBD_Get_USB_Status+0x1c>)
 800bd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd42:	bf00      	nop
 800bd44:	0800bd55 	.word	0x0800bd55
 800bd48:	0800bd5b 	.word	0x0800bd5b
 800bd4c:	0800bd61 	.word	0x0800bd61
 800bd50:	0800bd67 	.word	0x0800bd67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73fb      	strb	r3, [r7, #15]
    break;
 800bd58:	e00b      	b.n	800bd72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd5e:	e008      	b.n	800bd72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd60:	2301      	movs	r3, #1
 800bd62:	73fb      	strb	r3, [r7, #15]
    break;
 800bd64:	e005      	b.n	800bd72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd66:	2303      	movs	r3, #3
 800bd68:	73fb      	strb	r3, [r7, #15]
    break;
 800bd6a:	e002      	b.n	800bd72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd70:	bf00      	nop
  }
  return usb_status;
 800bd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <__assert_func>:
 800bd80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd82:	4614      	mov	r4, r2
 800bd84:	461a      	mov	r2, r3
 800bd86:	4b09      	ldr	r3, [pc, #36]	; (800bdac <__assert_func+0x2c>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	68d8      	ldr	r0, [r3, #12]
 800bd8e:	b14c      	cbz	r4, 800bda4 <__assert_func+0x24>
 800bd90:	4b07      	ldr	r3, [pc, #28]	; (800bdb0 <__assert_func+0x30>)
 800bd92:	9100      	str	r1, [sp, #0]
 800bd94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd98:	4906      	ldr	r1, [pc, #24]	; (800bdb4 <__assert_func+0x34>)
 800bd9a:	462b      	mov	r3, r5
 800bd9c:	f000 f818 	bl	800bdd0 <fiprintf>
 800bda0:	f001 f882 	bl	800cea8 <abort>
 800bda4:	4b04      	ldr	r3, [pc, #16]	; (800bdb8 <__assert_func+0x38>)
 800bda6:	461c      	mov	r4, r3
 800bda8:	e7f3      	b.n	800bd92 <__assert_func+0x12>
 800bdaa:	bf00      	nop
 800bdac:	200001ec 	.word	0x200001ec
 800bdb0:	0800efd2 	.word	0x0800efd2
 800bdb4:	0800efdf 	.word	0x0800efdf
 800bdb8:	0800f00d 	.word	0x0800f00d

0800bdbc <atoi>:
 800bdbc:	220a      	movs	r2, #10
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	f000 bfa8 	b.w	800cd14 <strtol>

0800bdc4 <__errno>:
 800bdc4:	4b01      	ldr	r3, [pc, #4]	; (800bdcc <__errno+0x8>)
 800bdc6:	6818      	ldr	r0, [r3, #0]
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	200001ec 	.word	0x200001ec

0800bdd0 <fiprintf>:
 800bdd0:	b40e      	push	{r1, r2, r3}
 800bdd2:	b503      	push	{r0, r1, lr}
 800bdd4:	4601      	mov	r1, r0
 800bdd6:	ab03      	add	r3, sp, #12
 800bdd8:	4805      	ldr	r0, [pc, #20]	; (800bdf0 <fiprintf+0x20>)
 800bdda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdde:	6800      	ldr	r0, [r0, #0]
 800bde0:	9301      	str	r3, [sp, #4]
 800bde2:	f000 f91d 	bl	800c020 <_vfiprintf_r>
 800bde6:	b002      	add	sp, #8
 800bde8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdec:	b003      	add	sp, #12
 800bdee:	4770      	bx	lr
 800bdf0:	200001ec 	.word	0x200001ec

0800bdf4 <__libc_init_array>:
 800bdf4:	b570      	push	{r4, r5, r6, lr}
 800bdf6:	4d0d      	ldr	r5, [pc, #52]	; (800be2c <__libc_init_array+0x38>)
 800bdf8:	4c0d      	ldr	r4, [pc, #52]	; (800be30 <__libc_init_array+0x3c>)
 800bdfa:	1b64      	subs	r4, r4, r5
 800bdfc:	10a4      	asrs	r4, r4, #2
 800bdfe:	2600      	movs	r6, #0
 800be00:	42a6      	cmp	r6, r4
 800be02:	d109      	bne.n	800be18 <__libc_init_array+0x24>
 800be04:	4d0b      	ldr	r5, [pc, #44]	; (800be34 <__libc_init_array+0x40>)
 800be06:	4c0c      	ldr	r4, [pc, #48]	; (800be38 <__libc_init_array+0x44>)
 800be08:	f002 ff3e 	bl	800ec88 <_init>
 800be0c:	1b64      	subs	r4, r4, r5
 800be0e:	10a4      	asrs	r4, r4, #2
 800be10:	2600      	movs	r6, #0
 800be12:	42a6      	cmp	r6, r4
 800be14:	d105      	bne.n	800be22 <__libc_init_array+0x2e>
 800be16:	bd70      	pop	{r4, r5, r6, pc}
 800be18:	f855 3b04 	ldr.w	r3, [r5], #4
 800be1c:	4798      	blx	r3
 800be1e:	3601      	adds	r6, #1
 800be20:	e7ee      	b.n	800be00 <__libc_init_array+0xc>
 800be22:	f855 3b04 	ldr.w	r3, [r5], #4
 800be26:	4798      	blx	r3
 800be28:	3601      	adds	r6, #1
 800be2a:	e7f2      	b.n	800be12 <__libc_init_array+0x1e>
 800be2c:	0800f3c0 	.word	0x0800f3c0
 800be30:	0800f3c0 	.word	0x0800f3c0
 800be34:	0800f3c0 	.word	0x0800f3c0
 800be38:	0800f3c4 	.word	0x0800f3c4

0800be3c <malloc>:
 800be3c:	4b02      	ldr	r3, [pc, #8]	; (800be48 <malloc+0xc>)
 800be3e:	4601      	mov	r1, r0
 800be40:	6818      	ldr	r0, [r3, #0]
 800be42:	f000 b869 	b.w	800bf18 <_malloc_r>
 800be46:	bf00      	nop
 800be48:	200001ec 	.word	0x200001ec

0800be4c <memcpy>:
 800be4c:	440a      	add	r2, r1
 800be4e:	4291      	cmp	r1, r2
 800be50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800be54:	d100      	bne.n	800be58 <memcpy+0xc>
 800be56:	4770      	bx	lr
 800be58:	b510      	push	{r4, lr}
 800be5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be62:	4291      	cmp	r1, r2
 800be64:	d1f9      	bne.n	800be5a <memcpy+0xe>
 800be66:	bd10      	pop	{r4, pc}

0800be68 <memset>:
 800be68:	4402      	add	r2, r0
 800be6a:	4603      	mov	r3, r0
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d100      	bne.n	800be72 <memset+0xa>
 800be70:	4770      	bx	lr
 800be72:	f803 1b01 	strb.w	r1, [r3], #1
 800be76:	e7f9      	b.n	800be6c <memset+0x4>

0800be78 <_free_r>:
 800be78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be7a:	2900      	cmp	r1, #0
 800be7c:	d048      	beq.n	800bf10 <_free_r+0x98>
 800be7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be82:	9001      	str	r0, [sp, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	f1a1 0404 	sub.w	r4, r1, #4
 800be8a:	bfb8      	it	lt
 800be8c:	18e4      	addlt	r4, r4, r3
 800be8e:	f002 f8c9 	bl	800e024 <__malloc_lock>
 800be92:	4a20      	ldr	r2, [pc, #128]	; (800bf14 <_free_r+0x9c>)
 800be94:	9801      	ldr	r0, [sp, #4]
 800be96:	6813      	ldr	r3, [r2, #0]
 800be98:	4615      	mov	r5, r2
 800be9a:	b933      	cbnz	r3, 800beaa <_free_r+0x32>
 800be9c:	6063      	str	r3, [r4, #4]
 800be9e:	6014      	str	r4, [r2, #0]
 800bea0:	b003      	add	sp, #12
 800bea2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bea6:	f002 b8c3 	b.w	800e030 <__malloc_unlock>
 800beaa:	42a3      	cmp	r3, r4
 800beac:	d90b      	bls.n	800bec6 <_free_r+0x4e>
 800beae:	6821      	ldr	r1, [r4, #0]
 800beb0:	1862      	adds	r2, r4, r1
 800beb2:	4293      	cmp	r3, r2
 800beb4:	bf04      	itt	eq
 800beb6:	681a      	ldreq	r2, [r3, #0]
 800beb8:	685b      	ldreq	r3, [r3, #4]
 800beba:	6063      	str	r3, [r4, #4]
 800bebc:	bf04      	itt	eq
 800bebe:	1852      	addeq	r2, r2, r1
 800bec0:	6022      	streq	r2, [r4, #0]
 800bec2:	602c      	str	r4, [r5, #0]
 800bec4:	e7ec      	b.n	800bea0 <_free_r+0x28>
 800bec6:	461a      	mov	r2, r3
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	b10b      	cbz	r3, 800bed0 <_free_r+0x58>
 800becc:	42a3      	cmp	r3, r4
 800bece:	d9fa      	bls.n	800bec6 <_free_r+0x4e>
 800bed0:	6811      	ldr	r1, [r2, #0]
 800bed2:	1855      	adds	r5, r2, r1
 800bed4:	42a5      	cmp	r5, r4
 800bed6:	d10b      	bne.n	800bef0 <_free_r+0x78>
 800bed8:	6824      	ldr	r4, [r4, #0]
 800beda:	4421      	add	r1, r4
 800bedc:	1854      	adds	r4, r2, r1
 800bede:	42a3      	cmp	r3, r4
 800bee0:	6011      	str	r1, [r2, #0]
 800bee2:	d1dd      	bne.n	800bea0 <_free_r+0x28>
 800bee4:	681c      	ldr	r4, [r3, #0]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	6053      	str	r3, [r2, #4]
 800beea:	4421      	add	r1, r4
 800beec:	6011      	str	r1, [r2, #0]
 800beee:	e7d7      	b.n	800bea0 <_free_r+0x28>
 800bef0:	d902      	bls.n	800bef8 <_free_r+0x80>
 800bef2:	230c      	movs	r3, #12
 800bef4:	6003      	str	r3, [r0, #0]
 800bef6:	e7d3      	b.n	800bea0 <_free_r+0x28>
 800bef8:	6825      	ldr	r5, [r4, #0]
 800befa:	1961      	adds	r1, r4, r5
 800befc:	428b      	cmp	r3, r1
 800befe:	bf04      	itt	eq
 800bf00:	6819      	ldreq	r1, [r3, #0]
 800bf02:	685b      	ldreq	r3, [r3, #4]
 800bf04:	6063      	str	r3, [r4, #4]
 800bf06:	bf04      	itt	eq
 800bf08:	1949      	addeq	r1, r1, r5
 800bf0a:	6021      	streq	r1, [r4, #0]
 800bf0c:	6054      	str	r4, [r2, #4]
 800bf0e:	e7c7      	b.n	800bea0 <_free_r+0x28>
 800bf10:	b003      	add	sp, #12
 800bf12:	bd30      	pop	{r4, r5, pc}
 800bf14:	2000067c 	.word	0x2000067c

0800bf18 <_malloc_r>:
 800bf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1a:	1ccd      	adds	r5, r1, #3
 800bf1c:	f025 0503 	bic.w	r5, r5, #3
 800bf20:	3508      	adds	r5, #8
 800bf22:	2d0c      	cmp	r5, #12
 800bf24:	bf38      	it	cc
 800bf26:	250c      	movcc	r5, #12
 800bf28:	2d00      	cmp	r5, #0
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	db01      	blt.n	800bf32 <_malloc_r+0x1a>
 800bf2e:	42a9      	cmp	r1, r5
 800bf30:	d903      	bls.n	800bf3a <_malloc_r+0x22>
 800bf32:	230c      	movs	r3, #12
 800bf34:	6033      	str	r3, [r6, #0]
 800bf36:	2000      	movs	r0, #0
 800bf38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf3a:	f002 f873 	bl	800e024 <__malloc_lock>
 800bf3e:	4921      	ldr	r1, [pc, #132]	; (800bfc4 <_malloc_r+0xac>)
 800bf40:	680a      	ldr	r2, [r1, #0]
 800bf42:	4614      	mov	r4, r2
 800bf44:	b99c      	cbnz	r4, 800bf6e <_malloc_r+0x56>
 800bf46:	4f20      	ldr	r7, [pc, #128]	; (800bfc8 <_malloc_r+0xb0>)
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	b923      	cbnz	r3, 800bf56 <_malloc_r+0x3e>
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	4630      	mov	r0, r6
 800bf50:	f000 fe00 	bl	800cb54 <_sbrk_r>
 800bf54:	6038      	str	r0, [r7, #0]
 800bf56:	4629      	mov	r1, r5
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f000 fdfb 	bl	800cb54 <_sbrk_r>
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	d123      	bne.n	800bfaa <_malloc_r+0x92>
 800bf62:	230c      	movs	r3, #12
 800bf64:	6033      	str	r3, [r6, #0]
 800bf66:	4630      	mov	r0, r6
 800bf68:	f002 f862 	bl	800e030 <__malloc_unlock>
 800bf6c:	e7e3      	b.n	800bf36 <_malloc_r+0x1e>
 800bf6e:	6823      	ldr	r3, [r4, #0]
 800bf70:	1b5b      	subs	r3, r3, r5
 800bf72:	d417      	bmi.n	800bfa4 <_malloc_r+0x8c>
 800bf74:	2b0b      	cmp	r3, #11
 800bf76:	d903      	bls.n	800bf80 <_malloc_r+0x68>
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	441c      	add	r4, r3
 800bf7c:	6025      	str	r5, [r4, #0]
 800bf7e:	e004      	b.n	800bf8a <_malloc_r+0x72>
 800bf80:	6863      	ldr	r3, [r4, #4]
 800bf82:	42a2      	cmp	r2, r4
 800bf84:	bf0c      	ite	eq
 800bf86:	600b      	streq	r3, [r1, #0]
 800bf88:	6053      	strne	r3, [r2, #4]
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f002 f850 	bl	800e030 <__malloc_unlock>
 800bf90:	f104 000b 	add.w	r0, r4, #11
 800bf94:	1d23      	adds	r3, r4, #4
 800bf96:	f020 0007 	bic.w	r0, r0, #7
 800bf9a:	1ac2      	subs	r2, r0, r3
 800bf9c:	d0cc      	beq.n	800bf38 <_malloc_r+0x20>
 800bf9e:	1a1b      	subs	r3, r3, r0
 800bfa0:	50a3      	str	r3, [r4, r2]
 800bfa2:	e7c9      	b.n	800bf38 <_malloc_r+0x20>
 800bfa4:	4622      	mov	r2, r4
 800bfa6:	6864      	ldr	r4, [r4, #4]
 800bfa8:	e7cc      	b.n	800bf44 <_malloc_r+0x2c>
 800bfaa:	1cc4      	adds	r4, r0, #3
 800bfac:	f024 0403 	bic.w	r4, r4, #3
 800bfb0:	42a0      	cmp	r0, r4
 800bfb2:	d0e3      	beq.n	800bf7c <_malloc_r+0x64>
 800bfb4:	1a21      	subs	r1, r4, r0
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	f000 fdcc 	bl	800cb54 <_sbrk_r>
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	d1dd      	bne.n	800bf7c <_malloc_r+0x64>
 800bfc0:	e7cf      	b.n	800bf62 <_malloc_r+0x4a>
 800bfc2:	bf00      	nop
 800bfc4:	2000067c 	.word	0x2000067c
 800bfc8:	20000680 	.word	0x20000680

0800bfcc <__sfputc_r>:
 800bfcc:	6893      	ldr	r3, [r2, #8]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	b410      	push	{r4}
 800bfd4:	6093      	str	r3, [r2, #8]
 800bfd6:	da08      	bge.n	800bfea <__sfputc_r+0x1e>
 800bfd8:	6994      	ldr	r4, [r2, #24]
 800bfda:	42a3      	cmp	r3, r4
 800bfdc:	db01      	blt.n	800bfe2 <__sfputc_r+0x16>
 800bfde:	290a      	cmp	r1, #10
 800bfe0:	d103      	bne.n	800bfea <__sfputc_r+0x1e>
 800bfe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe6:	f000 be9f 	b.w	800cd28 <__swbuf_r>
 800bfea:	6813      	ldr	r3, [r2, #0]
 800bfec:	1c58      	adds	r0, r3, #1
 800bfee:	6010      	str	r0, [r2, #0]
 800bff0:	7019      	strb	r1, [r3, #0]
 800bff2:	4608      	mov	r0, r1
 800bff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bff8:	4770      	bx	lr

0800bffa <__sfputs_r>:
 800bffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffc:	4606      	mov	r6, r0
 800bffe:	460f      	mov	r7, r1
 800c000:	4614      	mov	r4, r2
 800c002:	18d5      	adds	r5, r2, r3
 800c004:	42ac      	cmp	r4, r5
 800c006:	d101      	bne.n	800c00c <__sfputs_r+0x12>
 800c008:	2000      	movs	r0, #0
 800c00a:	e007      	b.n	800c01c <__sfputs_r+0x22>
 800c00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c010:	463a      	mov	r2, r7
 800c012:	4630      	mov	r0, r6
 800c014:	f7ff ffda 	bl	800bfcc <__sfputc_r>
 800c018:	1c43      	adds	r3, r0, #1
 800c01a:	d1f3      	bne.n	800c004 <__sfputs_r+0xa>
 800c01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c020 <_vfiprintf_r>:
 800c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	460d      	mov	r5, r1
 800c026:	b09d      	sub	sp, #116	; 0x74
 800c028:	4614      	mov	r4, r2
 800c02a:	4698      	mov	r8, r3
 800c02c:	4606      	mov	r6, r0
 800c02e:	b118      	cbz	r0, 800c038 <_vfiprintf_r+0x18>
 800c030:	6983      	ldr	r3, [r0, #24]
 800c032:	b90b      	cbnz	r3, 800c038 <_vfiprintf_r+0x18>
 800c034:	f001 fed2 	bl	800dddc <__sinit>
 800c038:	4b89      	ldr	r3, [pc, #548]	; (800c260 <_vfiprintf_r+0x240>)
 800c03a:	429d      	cmp	r5, r3
 800c03c:	d11b      	bne.n	800c076 <_vfiprintf_r+0x56>
 800c03e:	6875      	ldr	r5, [r6, #4]
 800c040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c042:	07d9      	lsls	r1, r3, #31
 800c044:	d405      	bmi.n	800c052 <_vfiprintf_r+0x32>
 800c046:	89ab      	ldrh	r3, [r5, #12]
 800c048:	059a      	lsls	r2, r3, #22
 800c04a:	d402      	bmi.n	800c052 <_vfiprintf_r+0x32>
 800c04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c04e:	f001 ff68 	bl	800df22 <__retarget_lock_acquire_recursive>
 800c052:	89ab      	ldrh	r3, [r5, #12]
 800c054:	071b      	lsls	r3, r3, #28
 800c056:	d501      	bpl.n	800c05c <_vfiprintf_r+0x3c>
 800c058:	692b      	ldr	r3, [r5, #16]
 800c05a:	b9eb      	cbnz	r3, 800c098 <_vfiprintf_r+0x78>
 800c05c:	4629      	mov	r1, r5
 800c05e:	4630      	mov	r0, r6
 800c060:	f000 feb4 	bl	800cdcc <__swsetup_r>
 800c064:	b1c0      	cbz	r0, 800c098 <_vfiprintf_r+0x78>
 800c066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c068:	07dc      	lsls	r4, r3, #31
 800c06a:	d50e      	bpl.n	800c08a <_vfiprintf_r+0x6a>
 800c06c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c070:	b01d      	add	sp, #116	; 0x74
 800c072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c076:	4b7b      	ldr	r3, [pc, #492]	; (800c264 <_vfiprintf_r+0x244>)
 800c078:	429d      	cmp	r5, r3
 800c07a:	d101      	bne.n	800c080 <_vfiprintf_r+0x60>
 800c07c:	68b5      	ldr	r5, [r6, #8]
 800c07e:	e7df      	b.n	800c040 <_vfiprintf_r+0x20>
 800c080:	4b79      	ldr	r3, [pc, #484]	; (800c268 <_vfiprintf_r+0x248>)
 800c082:	429d      	cmp	r5, r3
 800c084:	bf08      	it	eq
 800c086:	68f5      	ldreq	r5, [r6, #12]
 800c088:	e7da      	b.n	800c040 <_vfiprintf_r+0x20>
 800c08a:	89ab      	ldrh	r3, [r5, #12]
 800c08c:	0598      	lsls	r0, r3, #22
 800c08e:	d4ed      	bmi.n	800c06c <_vfiprintf_r+0x4c>
 800c090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c092:	f001 ff47 	bl	800df24 <__retarget_lock_release_recursive>
 800c096:	e7e9      	b.n	800c06c <_vfiprintf_r+0x4c>
 800c098:	2300      	movs	r3, #0
 800c09a:	9309      	str	r3, [sp, #36]	; 0x24
 800c09c:	2320      	movs	r3, #32
 800c09e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0a6:	2330      	movs	r3, #48	; 0x30
 800c0a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c26c <_vfiprintf_r+0x24c>
 800c0ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0b0:	f04f 0901 	mov.w	r9, #1
 800c0b4:	4623      	mov	r3, r4
 800c0b6:	469a      	mov	sl, r3
 800c0b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0bc:	b10a      	cbz	r2, 800c0c2 <_vfiprintf_r+0xa2>
 800c0be:	2a25      	cmp	r2, #37	; 0x25
 800c0c0:	d1f9      	bne.n	800c0b6 <_vfiprintf_r+0x96>
 800c0c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c0c6:	d00b      	beq.n	800c0e0 <_vfiprintf_r+0xc0>
 800c0c8:	465b      	mov	r3, fp
 800c0ca:	4622      	mov	r2, r4
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f7ff ff93 	bl	800bffa <__sfputs_r>
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	f000 80aa 	beq.w	800c22e <_vfiprintf_r+0x20e>
 800c0da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0dc:	445a      	add	r2, fp
 800c0de:	9209      	str	r2, [sp, #36]	; 0x24
 800c0e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 80a2 	beq.w	800c22e <_vfiprintf_r+0x20e>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0f4:	f10a 0a01 	add.w	sl, sl, #1
 800c0f8:	9304      	str	r3, [sp, #16]
 800c0fa:	9307      	str	r3, [sp, #28]
 800c0fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c100:	931a      	str	r3, [sp, #104]	; 0x68
 800c102:	4654      	mov	r4, sl
 800c104:	2205      	movs	r2, #5
 800c106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c10a:	4858      	ldr	r0, [pc, #352]	; (800c26c <_vfiprintf_r+0x24c>)
 800c10c:	f7f4 f880 	bl	8000210 <memchr>
 800c110:	9a04      	ldr	r2, [sp, #16]
 800c112:	b9d8      	cbnz	r0, 800c14c <_vfiprintf_r+0x12c>
 800c114:	06d1      	lsls	r1, r2, #27
 800c116:	bf44      	itt	mi
 800c118:	2320      	movmi	r3, #32
 800c11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c11e:	0713      	lsls	r3, r2, #28
 800c120:	bf44      	itt	mi
 800c122:	232b      	movmi	r3, #43	; 0x2b
 800c124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c128:	f89a 3000 	ldrb.w	r3, [sl]
 800c12c:	2b2a      	cmp	r3, #42	; 0x2a
 800c12e:	d015      	beq.n	800c15c <_vfiprintf_r+0x13c>
 800c130:	9a07      	ldr	r2, [sp, #28]
 800c132:	4654      	mov	r4, sl
 800c134:	2000      	movs	r0, #0
 800c136:	f04f 0c0a 	mov.w	ip, #10
 800c13a:	4621      	mov	r1, r4
 800c13c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c140:	3b30      	subs	r3, #48	; 0x30
 800c142:	2b09      	cmp	r3, #9
 800c144:	d94e      	bls.n	800c1e4 <_vfiprintf_r+0x1c4>
 800c146:	b1b0      	cbz	r0, 800c176 <_vfiprintf_r+0x156>
 800c148:	9207      	str	r2, [sp, #28]
 800c14a:	e014      	b.n	800c176 <_vfiprintf_r+0x156>
 800c14c:	eba0 0308 	sub.w	r3, r0, r8
 800c150:	fa09 f303 	lsl.w	r3, r9, r3
 800c154:	4313      	orrs	r3, r2
 800c156:	9304      	str	r3, [sp, #16]
 800c158:	46a2      	mov	sl, r4
 800c15a:	e7d2      	b.n	800c102 <_vfiprintf_r+0xe2>
 800c15c:	9b03      	ldr	r3, [sp, #12]
 800c15e:	1d19      	adds	r1, r3, #4
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	9103      	str	r1, [sp, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	bfbb      	ittet	lt
 800c168:	425b      	neglt	r3, r3
 800c16a:	f042 0202 	orrlt.w	r2, r2, #2
 800c16e:	9307      	strge	r3, [sp, #28]
 800c170:	9307      	strlt	r3, [sp, #28]
 800c172:	bfb8      	it	lt
 800c174:	9204      	strlt	r2, [sp, #16]
 800c176:	7823      	ldrb	r3, [r4, #0]
 800c178:	2b2e      	cmp	r3, #46	; 0x2e
 800c17a:	d10c      	bne.n	800c196 <_vfiprintf_r+0x176>
 800c17c:	7863      	ldrb	r3, [r4, #1]
 800c17e:	2b2a      	cmp	r3, #42	; 0x2a
 800c180:	d135      	bne.n	800c1ee <_vfiprintf_r+0x1ce>
 800c182:	9b03      	ldr	r3, [sp, #12]
 800c184:	1d1a      	adds	r2, r3, #4
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	9203      	str	r2, [sp, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bfb8      	it	lt
 800c18e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c192:	3402      	adds	r4, #2
 800c194:	9305      	str	r3, [sp, #20]
 800c196:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c27c <_vfiprintf_r+0x25c>
 800c19a:	7821      	ldrb	r1, [r4, #0]
 800c19c:	2203      	movs	r2, #3
 800c19e:	4650      	mov	r0, sl
 800c1a0:	f7f4 f836 	bl	8000210 <memchr>
 800c1a4:	b140      	cbz	r0, 800c1b8 <_vfiprintf_r+0x198>
 800c1a6:	2340      	movs	r3, #64	; 0x40
 800c1a8:	eba0 000a 	sub.w	r0, r0, sl
 800c1ac:	fa03 f000 	lsl.w	r0, r3, r0
 800c1b0:	9b04      	ldr	r3, [sp, #16]
 800c1b2:	4303      	orrs	r3, r0
 800c1b4:	3401      	adds	r4, #1
 800c1b6:	9304      	str	r3, [sp, #16]
 800c1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1bc:	482c      	ldr	r0, [pc, #176]	; (800c270 <_vfiprintf_r+0x250>)
 800c1be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1c2:	2206      	movs	r2, #6
 800c1c4:	f7f4 f824 	bl	8000210 <memchr>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d03f      	beq.n	800c24c <_vfiprintf_r+0x22c>
 800c1cc:	4b29      	ldr	r3, [pc, #164]	; (800c274 <_vfiprintf_r+0x254>)
 800c1ce:	bb1b      	cbnz	r3, 800c218 <_vfiprintf_r+0x1f8>
 800c1d0:	9b03      	ldr	r3, [sp, #12]
 800c1d2:	3307      	adds	r3, #7
 800c1d4:	f023 0307 	bic.w	r3, r3, #7
 800c1d8:	3308      	adds	r3, #8
 800c1da:	9303      	str	r3, [sp, #12]
 800c1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1de:	443b      	add	r3, r7
 800c1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1e2:	e767      	b.n	800c0b4 <_vfiprintf_r+0x94>
 800c1e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1e8:	460c      	mov	r4, r1
 800c1ea:	2001      	movs	r0, #1
 800c1ec:	e7a5      	b.n	800c13a <_vfiprintf_r+0x11a>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	3401      	adds	r4, #1
 800c1f2:	9305      	str	r3, [sp, #20]
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	f04f 0c0a 	mov.w	ip, #10
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c200:	3a30      	subs	r2, #48	; 0x30
 800c202:	2a09      	cmp	r2, #9
 800c204:	d903      	bls.n	800c20e <_vfiprintf_r+0x1ee>
 800c206:	2b00      	cmp	r3, #0
 800c208:	d0c5      	beq.n	800c196 <_vfiprintf_r+0x176>
 800c20a:	9105      	str	r1, [sp, #20]
 800c20c:	e7c3      	b.n	800c196 <_vfiprintf_r+0x176>
 800c20e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c212:	4604      	mov	r4, r0
 800c214:	2301      	movs	r3, #1
 800c216:	e7f0      	b.n	800c1fa <_vfiprintf_r+0x1da>
 800c218:	ab03      	add	r3, sp, #12
 800c21a:	9300      	str	r3, [sp, #0]
 800c21c:	462a      	mov	r2, r5
 800c21e:	4b16      	ldr	r3, [pc, #88]	; (800c278 <_vfiprintf_r+0x258>)
 800c220:	a904      	add	r1, sp, #16
 800c222:	4630      	mov	r0, r6
 800c224:	f000 f8cc 	bl	800c3c0 <_printf_float>
 800c228:	4607      	mov	r7, r0
 800c22a:	1c78      	adds	r0, r7, #1
 800c22c:	d1d6      	bne.n	800c1dc <_vfiprintf_r+0x1bc>
 800c22e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c230:	07d9      	lsls	r1, r3, #31
 800c232:	d405      	bmi.n	800c240 <_vfiprintf_r+0x220>
 800c234:	89ab      	ldrh	r3, [r5, #12]
 800c236:	059a      	lsls	r2, r3, #22
 800c238:	d402      	bmi.n	800c240 <_vfiprintf_r+0x220>
 800c23a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c23c:	f001 fe72 	bl	800df24 <__retarget_lock_release_recursive>
 800c240:	89ab      	ldrh	r3, [r5, #12]
 800c242:	065b      	lsls	r3, r3, #25
 800c244:	f53f af12 	bmi.w	800c06c <_vfiprintf_r+0x4c>
 800c248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c24a:	e711      	b.n	800c070 <_vfiprintf_r+0x50>
 800c24c:	ab03      	add	r3, sp, #12
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	462a      	mov	r2, r5
 800c252:	4b09      	ldr	r3, [pc, #36]	; (800c278 <_vfiprintf_r+0x258>)
 800c254:	a904      	add	r1, sp, #16
 800c256:	4630      	mov	r0, r6
 800c258:	f000 fb56 	bl	800c908 <_printf_i>
 800c25c:	e7e4      	b.n	800c228 <_vfiprintf_r+0x208>
 800c25e:	bf00      	nop
 800c260:	0800f210 	.word	0x0800f210
 800c264:	0800f230 	.word	0x0800f230
 800c268:	0800f1f0 	.word	0x0800f1f0
 800c26c:	0800f114 	.word	0x0800f114
 800c270:	0800f11e 	.word	0x0800f11e
 800c274:	0800c3c1 	.word	0x0800c3c1
 800c278:	0800bffb 	.word	0x0800bffb
 800c27c:	0800f11a 	.word	0x0800f11a

0800c280 <__cvt>:
 800c280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c284:	ec55 4b10 	vmov	r4, r5, d0
 800c288:	2d00      	cmp	r5, #0
 800c28a:	460e      	mov	r6, r1
 800c28c:	4619      	mov	r1, r3
 800c28e:	462b      	mov	r3, r5
 800c290:	bfbb      	ittet	lt
 800c292:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c296:	461d      	movlt	r5, r3
 800c298:	2300      	movge	r3, #0
 800c29a:	232d      	movlt	r3, #45	; 0x2d
 800c29c:	700b      	strb	r3, [r1, #0]
 800c29e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c2a4:	4691      	mov	r9, r2
 800c2a6:	f023 0820 	bic.w	r8, r3, #32
 800c2aa:	bfbc      	itt	lt
 800c2ac:	4622      	movlt	r2, r4
 800c2ae:	4614      	movlt	r4, r2
 800c2b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2b4:	d005      	beq.n	800c2c2 <__cvt+0x42>
 800c2b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c2ba:	d100      	bne.n	800c2be <__cvt+0x3e>
 800c2bc:	3601      	adds	r6, #1
 800c2be:	2102      	movs	r1, #2
 800c2c0:	e000      	b.n	800c2c4 <__cvt+0x44>
 800c2c2:	2103      	movs	r1, #3
 800c2c4:	ab03      	add	r3, sp, #12
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	ab02      	add	r3, sp, #8
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	ec45 4b10 	vmov	d0, r4, r5
 800c2d0:	4653      	mov	r3, sl
 800c2d2:	4632      	mov	r2, r6
 800c2d4:	f000 fe7c 	bl	800cfd0 <_dtoa_r>
 800c2d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c2dc:	4607      	mov	r7, r0
 800c2de:	d102      	bne.n	800c2e6 <__cvt+0x66>
 800c2e0:	f019 0f01 	tst.w	r9, #1
 800c2e4:	d022      	beq.n	800c32c <__cvt+0xac>
 800c2e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2ea:	eb07 0906 	add.w	r9, r7, r6
 800c2ee:	d110      	bne.n	800c312 <__cvt+0x92>
 800c2f0:	783b      	ldrb	r3, [r7, #0]
 800c2f2:	2b30      	cmp	r3, #48	; 0x30
 800c2f4:	d10a      	bne.n	800c30c <__cvt+0x8c>
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	f7f4 fbfb 	bl	8000af8 <__aeabi_dcmpeq>
 800c302:	b918      	cbnz	r0, 800c30c <__cvt+0x8c>
 800c304:	f1c6 0601 	rsb	r6, r6, #1
 800c308:	f8ca 6000 	str.w	r6, [sl]
 800c30c:	f8da 3000 	ldr.w	r3, [sl]
 800c310:	4499      	add	r9, r3
 800c312:	2200      	movs	r2, #0
 800c314:	2300      	movs	r3, #0
 800c316:	4620      	mov	r0, r4
 800c318:	4629      	mov	r1, r5
 800c31a:	f7f4 fbed 	bl	8000af8 <__aeabi_dcmpeq>
 800c31e:	b108      	cbz	r0, 800c324 <__cvt+0xa4>
 800c320:	f8cd 900c 	str.w	r9, [sp, #12]
 800c324:	2230      	movs	r2, #48	; 0x30
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	454b      	cmp	r3, r9
 800c32a:	d307      	bcc.n	800c33c <__cvt+0xbc>
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c330:	1bdb      	subs	r3, r3, r7
 800c332:	4638      	mov	r0, r7
 800c334:	6013      	str	r3, [r2, #0]
 800c336:	b004      	add	sp, #16
 800c338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c33c:	1c59      	adds	r1, r3, #1
 800c33e:	9103      	str	r1, [sp, #12]
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	e7f0      	b.n	800c326 <__cvt+0xa6>

0800c344 <__exponent>:
 800c344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c346:	4603      	mov	r3, r0
 800c348:	2900      	cmp	r1, #0
 800c34a:	bfb8      	it	lt
 800c34c:	4249      	neglt	r1, r1
 800c34e:	f803 2b02 	strb.w	r2, [r3], #2
 800c352:	bfb4      	ite	lt
 800c354:	222d      	movlt	r2, #45	; 0x2d
 800c356:	222b      	movge	r2, #43	; 0x2b
 800c358:	2909      	cmp	r1, #9
 800c35a:	7042      	strb	r2, [r0, #1]
 800c35c:	dd2a      	ble.n	800c3b4 <__exponent+0x70>
 800c35e:	f10d 0407 	add.w	r4, sp, #7
 800c362:	46a4      	mov	ip, r4
 800c364:	270a      	movs	r7, #10
 800c366:	46a6      	mov	lr, r4
 800c368:	460a      	mov	r2, r1
 800c36a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c36e:	fb07 1516 	mls	r5, r7, r6, r1
 800c372:	3530      	adds	r5, #48	; 0x30
 800c374:	2a63      	cmp	r2, #99	; 0x63
 800c376:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c37a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c37e:	4631      	mov	r1, r6
 800c380:	dcf1      	bgt.n	800c366 <__exponent+0x22>
 800c382:	3130      	adds	r1, #48	; 0x30
 800c384:	f1ae 0502 	sub.w	r5, lr, #2
 800c388:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c38c:	1c44      	adds	r4, r0, #1
 800c38e:	4629      	mov	r1, r5
 800c390:	4561      	cmp	r1, ip
 800c392:	d30a      	bcc.n	800c3aa <__exponent+0x66>
 800c394:	f10d 0209 	add.w	r2, sp, #9
 800c398:	eba2 020e 	sub.w	r2, r2, lr
 800c39c:	4565      	cmp	r5, ip
 800c39e:	bf88      	it	hi
 800c3a0:	2200      	movhi	r2, #0
 800c3a2:	4413      	add	r3, r2
 800c3a4:	1a18      	subs	r0, r3, r0
 800c3a6:	b003      	add	sp, #12
 800c3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c3b2:	e7ed      	b.n	800c390 <__exponent+0x4c>
 800c3b4:	2330      	movs	r3, #48	; 0x30
 800c3b6:	3130      	adds	r1, #48	; 0x30
 800c3b8:	7083      	strb	r3, [r0, #2]
 800c3ba:	70c1      	strb	r1, [r0, #3]
 800c3bc:	1d03      	adds	r3, r0, #4
 800c3be:	e7f1      	b.n	800c3a4 <__exponent+0x60>

0800c3c0 <_printf_float>:
 800c3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c4:	ed2d 8b02 	vpush	{d8}
 800c3c8:	b08d      	sub	sp, #52	; 0x34
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c3d0:	4616      	mov	r6, r2
 800c3d2:	461f      	mov	r7, r3
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	f001 fd9f 	bl	800df18 <_localeconv_r>
 800c3da:	f8d0 a000 	ldr.w	sl, [r0]
 800c3de:	4650      	mov	r0, sl
 800c3e0:	f7f3 ff08 	bl	80001f4 <strlen>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c3e8:	6823      	ldr	r3, [r4, #0]
 800c3ea:	9305      	str	r3, [sp, #20]
 800c3ec:	f8d8 3000 	ldr.w	r3, [r8]
 800c3f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c3f4:	3307      	adds	r3, #7
 800c3f6:	f023 0307 	bic.w	r3, r3, #7
 800c3fa:	f103 0208 	add.w	r2, r3, #8
 800c3fe:	f8c8 2000 	str.w	r2, [r8]
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c40a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c40e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c412:	9307      	str	r3, [sp, #28]
 800c414:	f8cd 8018 	str.w	r8, [sp, #24]
 800c418:	ee08 0a10 	vmov	s16, r0
 800c41c:	4b9f      	ldr	r3, [pc, #636]	; (800c69c <_printf_float+0x2dc>)
 800c41e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c426:	f7f4 fb99 	bl	8000b5c <__aeabi_dcmpun>
 800c42a:	bb88      	cbnz	r0, 800c490 <_printf_float+0xd0>
 800c42c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c430:	4b9a      	ldr	r3, [pc, #616]	; (800c69c <_printf_float+0x2dc>)
 800c432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c436:	f7f4 fb73 	bl	8000b20 <__aeabi_dcmple>
 800c43a:	bb48      	cbnz	r0, 800c490 <_printf_float+0xd0>
 800c43c:	2200      	movs	r2, #0
 800c43e:	2300      	movs	r3, #0
 800c440:	4640      	mov	r0, r8
 800c442:	4649      	mov	r1, r9
 800c444:	f7f4 fb62 	bl	8000b0c <__aeabi_dcmplt>
 800c448:	b110      	cbz	r0, 800c450 <_printf_float+0x90>
 800c44a:	232d      	movs	r3, #45	; 0x2d
 800c44c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c450:	4b93      	ldr	r3, [pc, #588]	; (800c6a0 <_printf_float+0x2e0>)
 800c452:	4894      	ldr	r0, [pc, #592]	; (800c6a4 <_printf_float+0x2e4>)
 800c454:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c458:	bf94      	ite	ls
 800c45a:	4698      	movls	r8, r3
 800c45c:	4680      	movhi	r8, r0
 800c45e:	2303      	movs	r3, #3
 800c460:	6123      	str	r3, [r4, #16]
 800c462:	9b05      	ldr	r3, [sp, #20]
 800c464:	f023 0204 	bic.w	r2, r3, #4
 800c468:	6022      	str	r2, [r4, #0]
 800c46a:	f04f 0900 	mov.w	r9, #0
 800c46e:	9700      	str	r7, [sp, #0]
 800c470:	4633      	mov	r3, r6
 800c472:	aa0b      	add	r2, sp, #44	; 0x2c
 800c474:	4621      	mov	r1, r4
 800c476:	4628      	mov	r0, r5
 800c478:	f000 f9d8 	bl	800c82c <_printf_common>
 800c47c:	3001      	adds	r0, #1
 800c47e:	f040 8090 	bne.w	800c5a2 <_printf_float+0x1e2>
 800c482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c486:	b00d      	add	sp, #52	; 0x34
 800c488:	ecbd 8b02 	vpop	{d8}
 800c48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c490:	4642      	mov	r2, r8
 800c492:	464b      	mov	r3, r9
 800c494:	4640      	mov	r0, r8
 800c496:	4649      	mov	r1, r9
 800c498:	f7f4 fb60 	bl	8000b5c <__aeabi_dcmpun>
 800c49c:	b140      	cbz	r0, 800c4b0 <_printf_float+0xf0>
 800c49e:	464b      	mov	r3, r9
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	bfbc      	itt	lt
 800c4a4:	232d      	movlt	r3, #45	; 0x2d
 800c4a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c4aa:	487f      	ldr	r0, [pc, #508]	; (800c6a8 <_printf_float+0x2e8>)
 800c4ac:	4b7f      	ldr	r3, [pc, #508]	; (800c6ac <_printf_float+0x2ec>)
 800c4ae:	e7d1      	b.n	800c454 <_printf_float+0x94>
 800c4b0:	6863      	ldr	r3, [r4, #4]
 800c4b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c4b6:	9206      	str	r2, [sp, #24]
 800c4b8:	1c5a      	adds	r2, r3, #1
 800c4ba:	d13f      	bne.n	800c53c <_printf_float+0x17c>
 800c4bc:	2306      	movs	r3, #6
 800c4be:	6063      	str	r3, [r4, #4]
 800c4c0:	9b05      	ldr	r3, [sp, #20]
 800c4c2:	6861      	ldr	r1, [r4, #4]
 800c4c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	9303      	str	r3, [sp, #12]
 800c4cc:	ab0a      	add	r3, sp, #40	; 0x28
 800c4ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c4d2:	ab09      	add	r3, sp, #36	; 0x24
 800c4d4:	ec49 8b10 	vmov	d0, r8, r9
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	6022      	str	r2, [r4, #0]
 800c4dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	f7ff fecd 	bl	800c280 <__cvt>
 800c4e6:	9b06      	ldr	r3, [sp, #24]
 800c4e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4ea:	2b47      	cmp	r3, #71	; 0x47
 800c4ec:	4680      	mov	r8, r0
 800c4ee:	d108      	bne.n	800c502 <_printf_float+0x142>
 800c4f0:	1cc8      	adds	r0, r1, #3
 800c4f2:	db02      	blt.n	800c4fa <_printf_float+0x13a>
 800c4f4:	6863      	ldr	r3, [r4, #4]
 800c4f6:	4299      	cmp	r1, r3
 800c4f8:	dd41      	ble.n	800c57e <_printf_float+0x1be>
 800c4fa:	f1ab 0b02 	sub.w	fp, fp, #2
 800c4fe:	fa5f fb8b 	uxtb.w	fp, fp
 800c502:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c506:	d820      	bhi.n	800c54a <_printf_float+0x18a>
 800c508:	3901      	subs	r1, #1
 800c50a:	465a      	mov	r2, fp
 800c50c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c510:	9109      	str	r1, [sp, #36]	; 0x24
 800c512:	f7ff ff17 	bl	800c344 <__exponent>
 800c516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c518:	1813      	adds	r3, r2, r0
 800c51a:	2a01      	cmp	r2, #1
 800c51c:	4681      	mov	r9, r0
 800c51e:	6123      	str	r3, [r4, #16]
 800c520:	dc02      	bgt.n	800c528 <_printf_float+0x168>
 800c522:	6822      	ldr	r2, [r4, #0]
 800c524:	07d2      	lsls	r2, r2, #31
 800c526:	d501      	bpl.n	800c52c <_printf_float+0x16c>
 800c528:	3301      	adds	r3, #1
 800c52a:	6123      	str	r3, [r4, #16]
 800c52c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c530:	2b00      	cmp	r3, #0
 800c532:	d09c      	beq.n	800c46e <_printf_float+0xae>
 800c534:	232d      	movs	r3, #45	; 0x2d
 800c536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c53a:	e798      	b.n	800c46e <_printf_float+0xae>
 800c53c:	9a06      	ldr	r2, [sp, #24]
 800c53e:	2a47      	cmp	r2, #71	; 0x47
 800c540:	d1be      	bne.n	800c4c0 <_printf_float+0x100>
 800c542:	2b00      	cmp	r3, #0
 800c544:	d1bc      	bne.n	800c4c0 <_printf_float+0x100>
 800c546:	2301      	movs	r3, #1
 800c548:	e7b9      	b.n	800c4be <_printf_float+0xfe>
 800c54a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c54e:	d118      	bne.n	800c582 <_printf_float+0x1c2>
 800c550:	2900      	cmp	r1, #0
 800c552:	6863      	ldr	r3, [r4, #4]
 800c554:	dd0b      	ble.n	800c56e <_printf_float+0x1ae>
 800c556:	6121      	str	r1, [r4, #16]
 800c558:	b913      	cbnz	r3, 800c560 <_printf_float+0x1a0>
 800c55a:	6822      	ldr	r2, [r4, #0]
 800c55c:	07d0      	lsls	r0, r2, #31
 800c55e:	d502      	bpl.n	800c566 <_printf_float+0x1a6>
 800c560:	3301      	adds	r3, #1
 800c562:	440b      	add	r3, r1
 800c564:	6123      	str	r3, [r4, #16]
 800c566:	65a1      	str	r1, [r4, #88]	; 0x58
 800c568:	f04f 0900 	mov.w	r9, #0
 800c56c:	e7de      	b.n	800c52c <_printf_float+0x16c>
 800c56e:	b913      	cbnz	r3, 800c576 <_printf_float+0x1b6>
 800c570:	6822      	ldr	r2, [r4, #0]
 800c572:	07d2      	lsls	r2, r2, #31
 800c574:	d501      	bpl.n	800c57a <_printf_float+0x1ba>
 800c576:	3302      	adds	r3, #2
 800c578:	e7f4      	b.n	800c564 <_printf_float+0x1a4>
 800c57a:	2301      	movs	r3, #1
 800c57c:	e7f2      	b.n	800c564 <_printf_float+0x1a4>
 800c57e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c584:	4299      	cmp	r1, r3
 800c586:	db05      	blt.n	800c594 <_printf_float+0x1d4>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	6121      	str	r1, [r4, #16]
 800c58c:	07d8      	lsls	r0, r3, #31
 800c58e:	d5ea      	bpl.n	800c566 <_printf_float+0x1a6>
 800c590:	1c4b      	adds	r3, r1, #1
 800c592:	e7e7      	b.n	800c564 <_printf_float+0x1a4>
 800c594:	2900      	cmp	r1, #0
 800c596:	bfd4      	ite	le
 800c598:	f1c1 0202 	rsble	r2, r1, #2
 800c59c:	2201      	movgt	r2, #1
 800c59e:	4413      	add	r3, r2
 800c5a0:	e7e0      	b.n	800c564 <_printf_float+0x1a4>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	055a      	lsls	r2, r3, #21
 800c5a6:	d407      	bmi.n	800c5b8 <_printf_float+0x1f8>
 800c5a8:	6923      	ldr	r3, [r4, #16]
 800c5aa:	4642      	mov	r2, r8
 800c5ac:	4631      	mov	r1, r6
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	47b8      	blx	r7
 800c5b2:	3001      	adds	r0, #1
 800c5b4:	d12c      	bne.n	800c610 <_printf_float+0x250>
 800c5b6:	e764      	b.n	800c482 <_printf_float+0xc2>
 800c5b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c5bc:	f240 80e0 	bls.w	800c780 <_printf_float+0x3c0>
 800c5c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	f7f4 fa96 	bl	8000af8 <__aeabi_dcmpeq>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d034      	beq.n	800c63a <_printf_float+0x27a>
 800c5d0:	4a37      	ldr	r2, [pc, #220]	; (800c6b0 <_printf_float+0x2f0>)
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	4631      	mov	r1, r6
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	47b8      	blx	r7
 800c5da:	3001      	adds	r0, #1
 800c5dc:	f43f af51 	beq.w	800c482 <_printf_float+0xc2>
 800c5e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	db02      	blt.n	800c5ee <_printf_float+0x22e>
 800c5e8:	6823      	ldr	r3, [r4, #0]
 800c5ea:	07d8      	lsls	r0, r3, #31
 800c5ec:	d510      	bpl.n	800c610 <_printf_float+0x250>
 800c5ee:	ee18 3a10 	vmov	r3, s16
 800c5f2:	4652      	mov	r2, sl
 800c5f4:	4631      	mov	r1, r6
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	47b8      	blx	r7
 800c5fa:	3001      	adds	r0, #1
 800c5fc:	f43f af41 	beq.w	800c482 <_printf_float+0xc2>
 800c600:	f04f 0800 	mov.w	r8, #0
 800c604:	f104 091a 	add.w	r9, r4, #26
 800c608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c60a:	3b01      	subs	r3, #1
 800c60c:	4543      	cmp	r3, r8
 800c60e:	dc09      	bgt.n	800c624 <_printf_float+0x264>
 800c610:	6823      	ldr	r3, [r4, #0]
 800c612:	079b      	lsls	r3, r3, #30
 800c614:	f100 8105 	bmi.w	800c822 <_printf_float+0x462>
 800c618:	68e0      	ldr	r0, [r4, #12]
 800c61a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c61c:	4298      	cmp	r0, r3
 800c61e:	bfb8      	it	lt
 800c620:	4618      	movlt	r0, r3
 800c622:	e730      	b.n	800c486 <_printf_float+0xc6>
 800c624:	2301      	movs	r3, #1
 800c626:	464a      	mov	r2, r9
 800c628:	4631      	mov	r1, r6
 800c62a:	4628      	mov	r0, r5
 800c62c:	47b8      	blx	r7
 800c62e:	3001      	adds	r0, #1
 800c630:	f43f af27 	beq.w	800c482 <_printf_float+0xc2>
 800c634:	f108 0801 	add.w	r8, r8, #1
 800c638:	e7e6      	b.n	800c608 <_printf_float+0x248>
 800c63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	dc39      	bgt.n	800c6b4 <_printf_float+0x2f4>
 800c640:	4a1b      	ldr	r2, [pc, #108]	; (800c6b0 <_printf_float+0x2f0>)
 800c642:	2301      	movs	r3, #1
 800c644:	4631      	mov	r1, r6
 800c646:	4628      	mov	r0, r5
 800c648:	47b8      	blx	r7
 800c64a:	3001      	adds	r0, #1
 800c64c:	f43f af19 	beq.w	800c482 <_printf_float+0xc2>
 800c650:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c654:	4313      	orrs	r3, r2
 800c656:	d102      	bne.n	800c65e <_printf_float+0x29e>
 800c658:	6823      	ldr	r3, [r4, #0]
 800c65a:	07d9      	lsls	r1, r3, #31
 800c65c:	d5d8      	bpl.n	800c610 <_printf_float+0x250>
 800c65e:	ee18 3a10 	vmov	r3, s16
 800c662:	4652      	mov	r2, sl
 800c664:	4631      	mov	r1, r6
 800c666:	4628      	mov	r0, r5
 800c668:	47b8      	blx	r7
 800c66a:	3001      	adds	r0, #1
 800c66c:	f43f af09 	beq.w	800c482 <_printf_float+0xc2>
 800c670:	f04f 0900 	mov.w	r9, #0
 800c674:	f104 0a1a 	add.w	sl, r4, #26
 800c678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c67a:	425b      	negs	r3, r3
 800c67c:	454b      	cmp	r3, r9
 800c67e:	dc01      	bgt.n	800c684 <_printf_float+0x2c4>
 800c680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c682:	e792      	b.n	800c5aa <_printf_float+0x1ea>
 800c684:	2301      	movs	r3, #1
 800c686:	4652      	mov	r2, sl
 800c688:	4631      	mov	r1, r6
 800c68a:	4628      	mov	r0, r5
 800c68c:	47b8      	blx	r7
 800c68e:	3001      	adds	r0, #1
 800c690:	f43f aef7 	beq.w	800c482 <_printf_float+0xc2>
 800c694:	f109 0901 	add.w	r9, r9, #1
 800c698:	e7ee      	b.n	800c678 <_printf_float+0x2b8>
 800c69a:	bf00      	nop
 800c69c:	7fefffff 	.word	0x7fefffff
 800c6a0:	0800f125 	.word	0x0800f125
 800c6a4:	0800f129 	.word	0x0800f129
 800c6a8:	0800f131 	.word	0x0800f131
 800c6ac:	0800f12d 	.word	0x0800f12d
 800c6b0:	0800f135 	.word	0x0800f135
 800c6b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	bfa8      	it	ge
 800c6bc:	461a      	movge	r2, r3
 800c6be:	2a00      	cmp	r2, #0
 800c6c0:	4691      	mov	r9, r2
 800c6c2:	dc37      	bgt.n	800c734 <_printf_float+0x374>
 800c6c4:	f04f 0b00 	mov.w	fp, #0
 800c6c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6cc:	f104 021a 	add.w	r2, r4, #26
 800c6d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6d2:	9305      	str	r3, [sp, #20]
 800c6d4:	eba3 0309 	sub.w	r3, r3, r9
 800c6d8:	455b      	cmp	r3, fp
 800c6da:	dc33      	bgt.n	800c744 <_printf_float+0x384>
 800c6dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	db3b      	blt.n	800c75c <_printf_float+0x39c>
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	07da      	lsls	r2, r3, #31
 800c6e8:	d438      	bmi.n	800c75c <_printf_float+0x39c>
 800c6ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6ec:	9b05      	ldr	r3, [sp, #20]
 800c6ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	eba2 0901 	sub.w	r9, r2, r1
 800c6f6:	4599      	cmp	r9, r3
 800c6f8:	bfa8      	it	ge
 800c6fa:	4699      	movge	r9, r3
 800c6fc:	f1b9 0f00 	cmp.w	r9, #0
 800c700:	dc35      	bgt.n	800c76e <_printf_float+0x3ae>
 800c702:	f04f 0800 	mov.w	r8, #0
 800c706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c70a:	f104 0a1a 	add.w	sl, r4, #26
 800c70e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c712:	1a9b      	subs	r3, r3, r2
 800c714:	eba3 0309 	sub.w	r3, r3, r9
 800c718:	4543      	cmp	r3, r8
 800c71a:	f77f af79 	ble.w	800c610 <_printf_float+0x250>
 800c71e:	2301      	movs	r3, #1
 800c720:	4652      	mov	r2, sl
 800c722:	4631      	mov	r1, r6
 800c724:	4628      	mov	r0, r5
 800c726:	47b8      	blx	r7
 800c728:	3001      	adds	r0, #1
 800c72a:	f43f aeaa 	beq.w	800c482 <_printf_float+0xc2>
 800c72e:	f108 0801 	add.w	r8, r8, #1
 800c732:	e7ec      	b.n	800c70e <_printf_float+0x34e>
 800c734:	4613      	mov	r3, r2
 800c736:	4631      	mov	r1, r6
 800c738:	4642      	mov	r2, r8
 800c73a:	4628      	mov	r0, r5
 800c73c:	47b8      	blx	r7
 800c73e:	3001      	adds	r0, #1
 800c740:	d1c0      	bne.n	800c6c4 <_printf_float+0x304>
 800c742:	e69e      	b.n	800c482 <_printf_float+0xc2>
 800c744:	2301      	movs	r3, #1
 800c746:	4631      	mov	r1, r6
 800c748:	4628      	mov	r0, r5
 800c74a:	9205      	str	r2, [sp, #20]
 800c74c:	47b8      	blx	r7
 800c74e:	3001      	adds	r0, #1
 800c750:	f43f ae97 	beq.w	800c482 <_printf_float+0xc2>
 800c754:	9a05      	ldr	r2, [sp, #20]
 800c756:	f10b 0b01 	add.w	fp, fp, #1
 800c75a:	e7b9      	b.n	800c6d0 <_printf_float+0x310>
 800c75c:	ee18 3a10 	vmov	r3, s16
 800c760:	4652      	mov	r2, sl
 800c762:	4631      	mov	r1, r6
 800c764:	4628      	mov	r0, r5
 800c766:	47b8      	blx	r7
 800c768:	3001      	adds	r0, #1
 800c76a:	d1be      	bne.n	800c6ea <_printf_float+0x32a>
 800c76c:	e689      	b.n	800c482 <_printf_float+0xc2>
 800c76e:	9a05      	ldr	r2, [sp, #20]
 800c770:	464b      	mov	r3, r9
 800c772:	4442      	add	r2, r8
 800c774:	4631      	mov	r1, r6
 800c776:	4628      	mov	r0, r5
 800c778:	47b8      	blx	r7
 800c77a:	3001      	adds	r0, #1
 800c77c:	d1c1      	bne.n	800c702 <_printf_float+0x342>
 800c77e:	e680      	b.n	800c482 <_printf_float+0xc2>
 800c780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c782:	2a01      	cmp	r2, #1
 800c784:	dc01      	bgt.n	800c78a <_printf_float+0x3ca>
 800c786:	07db      	lsls	r3, r3, #31
 800c788:	d538      	bpl.n	800c7fc <_printf_float+0x43c>
 800c78a:	2301      	movs	r3, #1
 800c78c:	4642      	mov	r2, r8
 800c78e:	4631      	mov	r1, r6
 800c790:	4628      	mov	r0, r5
 800c792:	47b8      	blx	r7
 800c794:	3001      	adds	r0, #1
 800c796:	f43f ae74 	beq.w	800c482 <_printf_float+0xc2>
 800c79a:	ee18 3a10 	vmov	r3, s16
 800c79e:	4652      	mov	r2, sl
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	47b8      	blx	r7
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	f43f ae6b 	beq.w	800c482 <_printf_float+0xc2>
 800c7ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f7f4 f9a0 	bl	8000af8 <__aeabi_dcmpeq>
 800c7b8:	b9d8      	cbnz	r0, 800c7f2 <_printf_float+0x432>
 800c7ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7bc:	f108 0201 	add.w	r2, r8, #1
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	4631      	mov	r1, r6
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	47b8      	blx	r7
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	d10e      	bne.n	800c7ea <_printf_float+0x42a>
 800c7cc:	e659      	b.n	800c482 <_printf_float+0xc2>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	4652      	mov	r2, sl
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	47b8      	blx	r7
 800c7d8:	3001      	adds	r0, #1
 800c7da:	f43f ae52 	beq.w	800c482 <_printf_float+0xc2>
 800c7de:	f108 0801 	add.w	r8, r8, #1
 800c7e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	4543      	cmp	r3, r8
 800c7e8:	dcf1      	bgt.n	800c7ce <_printf_float+0x40e>
 800c7ea:	464b      	mov	r3, r9
 800c7ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7f0:	e6dc      	b.n	800c5ac <_printf_float+0x1ec>
 800c7f2:	f04f 0800 	mov.w	r8, #0
 800c7f6:	f104 0a1a 	add.w	sl, r4, #26
 800c7fa:	e7f2      	b.n	800c7e2 <_printf_float+0x422>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	4642      	mov	r2, r8
 800c800:	e7df      	b.n	800c7c2 <_printf_float+0x402>
 800c802:	2301      	movs	r3, #1
 800c804:	464a      	mov	r2, r9
 800c806:	4631      	mov	r1, r6
 800c808:	4628      	mov	r0, r5
 800c80a:	47b8      	blx	r7
 800c80c:	3001      	adds	r0, #1
 800c80e:	f43f ae38 	beq.w	800c482 <_printf_float+0xc2>
 800c812:	f108 0801 	add.w	r8, r8, #1
 800c816:	68e3      	ldr	r3, [r4, #12]
 800c818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c81a:	1a5b      	subs	r3, r3, r1
 800c81c:	4543      	cmp	r3, r8
 800c81e:	dcf0      	bgt.n	800c802 <_printf_float+0x442>
 800c820:	e6fa      	b.n	800c618 <_printf_float+0x258>
 800c822:	f04f 0800 	mov.w	r8, #0
 800c826:	f104 0919 	add.w	r9, r4, #25
 800c82a:	e7f4      	b.n	800c816 <_printf_float+0x456>

0800c82c <_printf_common>:
 800c82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c830:	4616      	mov	r6, r2
 800c832:	4699      	mov	r9, r3
 800c834:	688a      	ldr	r2, [r1, #8]
 800c836:	690b      	ldr	r3, [r1, #16]
 800c838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c83c:	4293      	cmp	r3, r2
 800c83e:	bfb8      	it	lt
 800c840:	4613      	movlt	r3, r2
 800c842:	6033      	str	r3, [r6, #0]
 800c844:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c848:	4607      	mov	r7, r0
 800c84a:	460c      	mov	r4, r1
 800c84c:	b10a      	cbz	r2, 800c852 <_printf_common+0x26>
 800c84e:	3301      	adds	r3, #1
 800c850:	6033      	str	r3, [r6, #0]
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	0699      	lsls	r1, r3, #26
 800c856:	bf42      	ittt	mi
 800c858:	6833      	ldrmi	r3, [r6, #0]
 800c85a:	3302      	addmi	r3, #2
 800c85c:	6033      	strmi	r3, [r6, #0]
 800c85e:	6825      	ldr	r5, [r4, #0]
 800c860:	f015 0506 	ands.w	r5, r5, #6
 800c864:	d106      	bne.n	800c874 <_printf_common+0x48>
 800c866:	f104 0a19 	add.w	sl, r4, #25
 800c86a:	68e3      	ldr	r3, [r4, #12]
 800c86c:	6832      	ldr	r2, [r6, #0]
 800c86e:	1a9b      	subs	r3, r3, r2
 800c870:	42ab      	cmp	r3, r5
 800c872:	dc26      	bgt.n	800c8c2 <_printf_common+0x96>
 800c874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c878:	1e13      	subs	r3, r2, #0
 800c87a:	6822      	ldr	r2, [r4, #0]
 800c87c:	bf18      	it	ne
 800c87e:	2301      	movne	r3, #1
 800c880:	0692      	lsls	r2, r2, #26
 800c882:	d42b      	bmi.n	800c8dc <_printf_common+0xb0>
 800c884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c888:	4649      	mov	r1, r9
 800c88a:	4638      	mov	r0, r7
 800c88c:	47c0      	blx	r8
 800c88e:	3001      	adds	r0, #1
 800c890:	d01e      	beq.n	800c8d0 <_printf_common+0xa4>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	68e5      	ldr	r5, [r4, #12]
 800c896:	6832      	ldr	r2, [r6, #0]
 800c898:	f003 0306 	and.w	r3, r3, #6
 800c89c:	2b04      	cmp	r3, #4
 800c89e:	bf08      	it	eq
 800c8a0:	1aad      	subeq	r5, r5, r2
 800c8a2:	68a3      	ldr	r3, [r4, #8]
 800c8a4:	6922      	ldr	r2, [r4, #16]
 800c8a6:	bf0c      	ite	eq
 800c8a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8ac:	2500      	movne	r5, #0
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	bfc4      	itt	gt
 800c8b2:	1a9b      	subgt	r3, r3, r2
 800c8b4:	18ed      	addgt	r5, r5, r3
 800c8b6:	2600      	movs	r6, #0
 800c8b8:	341a      	adds	r4, #26
 800c8ba:	42b5      	cmp	r5, r6
 800c8bc:	d11a      	bne.n	800c8f4 <_printf_common+0xc8>
 800c8be:	2000      	movs	r0, #0
 800c8c0:	e008      	b.n	800c8d4 <_printf_common+0xa8>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	4652      	mov	r2, sl
 800c8c6:	4649      	mov	r1, r9
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	47c0      	blx	r8
 800c8cc:	3001      	adds	r0, #1
 800c8ce:	d103      	bne.n	800c8d8 <_printf_common+0xac>
 800c8d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d8:	3501      	adds	r5, #1
 800c8da:	e7c6      	b.n	800c86a <_printf_common+0x3e>
 800c8dc:	18e1      	adds	r1, r4, r3
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	2030      	movs	r0, #48	; 0x30
 800c8e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8e6:	4422      	add	r2, r4
 800c8e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8f0:	3302      	adds	r3, #2
 800c8f2:	e7c7      	b.n	800c884 <_printf_common+0x58>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	4622      	mov	r2, r4
 800c8f8:	4649      	mov	r1, r9
 800c8fa:	4638      	mov	r0, r7
 800c8fc:	47c0      	blx	r8
 800c8fe:	3001      	adds	r0, #1
 800c900:	d0e6      	beq.n	800c8d0 <_printf_common+0xa4>
 800c902:	3601      	adds	r6, #1
 800c904:	e7d9      	b.n	800c8ba <_printf_common+0x8e>
	...

0800c908 <_printf_i>:
 800c908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c90c:	460c      	mov	r4, r1
 800c90e:	4691      	mov	r9, r2
 800c910:	7e27      	ldrb	r7, [r4, #24]
 800c912:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c914:	2f78      	cmp	r7, #120	; 0x78
 800c916:	4680      	mov	r8, r0
 800c918:	469a      	mov	sl, r3
 800c91a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c91e:	d807      	bhi.n	800c930 <_printf_i+0x28>
 800c920:	2f62      	cmp	r7, #98	; 0x62
 800c922:	d80a      	bhi.n	800c93a <_printf_i+0x32>
 800c924:	2f00      	cmp	r7, #0
 800c926:	f000 80d8 	beq.w	800cada <_printf_i+0x1d2>
 800c92a:	2f58      	cmp	r7, #88	; 0x58
 800c92c:	f000 80a3 	beq.w	800ca76 <_printf_i+0x16e>
 800c930:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c938:	e03a      	b.n	800c9b0 <_printf_i+0xa8>
 800c93a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c93e:	2b15      	cmp	r3, #21
 800c940:	d8f6      	bhi.n	800c930 <_printf_i+0x28>
 800c942:	a001      	add	r0, pc, #4	; (adr r0, 800c948 <_printf_i+0x40>)
 800c944:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c948:	0800c9a1 	.word	0x0800c9a1
 800c94c:	0800c9b5 	.word	0x0800c9b5
 800c950:	0800c931 	.word	0x0800c931
 800c954:	0800c931 	.word	0x0800c931
 800c958:	0800c931 	.word	0x0800c931
 800c95c:	0800c931 	.word	0x0800c931
 800c960:	0800c9b5 	.word	0x0800c9b5
 800c964:	0800c931 	.word	0x0800c931
 800c968:	0800c931 	.word	0x0800c931
 800c96c:	0800c931 	.word	0x0800c931
 800c970:	0800c931 	.word	0x0800c931
 800c974:	0800cac1 	.word	0x0800cac1
 800c978:	0800c9e5 	.word	0x0800c9e5
 800c97c:	0800caa3 	.word	0x0800caa3
 800c980:	0800c931 	.word	0x0800c931
 800c984:	0800c931 	.word	0x0800c931
 800c988:	0800cae3 	.word	0x0800cae3
 800c98c:	0800c931 	.word	0x0800c931
 800c990:	0800c9e5 	.word	0x0800c9e5
 800c994:	0800c931 	.word	0x0800c931
 800c998:	0800c931 	.word	0x0800c931
 800c99c:	0800caab 	.word	0x0800caab
 800c9a0:	680b      	ldr	r3, [r1, #0]
 800c9a2:	1d1a      	adds	r2, r3, #4
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	600a      	str	r2, [r1, #0]
 800c9a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c9ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e0a3      	b.n	800cafc <_printf_i+0x1f4>
 800c9b4:	6825      	ldr	r5, [r4, #0]
 800c9b6:	6808      	ldr	r0, [r1, #0]
 800c9b8:	062e      	lsls	r6, r5, #24
 800c9ba:	f100 0304 	add.w	r3, r0, #4
 800c9be:	d50a      	bpl.n	800c9d6 <_printf_i+0xce>
 800c9c0:	6805      	ldr	r5, [r0, #0]
 800c9c2:	600b      	str	r3, [r1, #0]
 800c9c4:	2d00      	cmp	r5, #0
 800c9c6:	da03      	bge.n	800c9d0 <_printf_i+0xc8>
 800c9c8:	232d      	movs	r3, #45	; 0x2d
 800c9ca:	426d      	negs	r5, r5
 800c9cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9d0:	485e      	ldr	r0, [pc, #376]	; (800cb4c <_printf_i+0x244>)
 800c9d2:	230a      	movs	r3, #10
 800c9d4:	e019      	b.n	800ca0a <_printf_i+0x102>
 800c9d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c9da:	6805      	ldr	r5, [r0, #0]
 800c9dc:	600b      	str	r3, [r1, #0]
 800c9de:	bf18      	it	ne
 800c9e0:	b22d      	sxthne	r5, r5
 800c9e2:	e7ef      	b.n	800c9c4 <_printf_i+0xbc>
 800c9e4:	680b      	ldr	r3, [r1, #0]
 800c9e6:	6825      	ldr	r5, [r4, #0]
 800c9e8:	1d18      	adds	r0, r3, #4
 800c9ea:	6008      	str	r0, [r1, #0]
 800c9ec:	0628      	lsls	r0, r5, #24
 800c9ee:	d501      	bpl.n	800c9f4 <_printf_i+0xec>
 800c9f0:	681d      	ldr	r5, [r3, #0]
 800c9f2:	e002      	b.n	800c9fa <_printf_i+0xf2>
 800c9f4:	0669      	lsls	r1, r5, #25
 800c9f6:	d5fb      	bpl.n	800c9f0 <_printf_i+0xe8>
 800c9f8:	881d      	ldrh	r5, [r3, #0]
 800c9fa:	4854      	ldr	r0, [pc, #336]	; (800cb4c <_printf_i+0x244>)
 800c9fc:	2f6f      	cmp	r7, #111	; 0x6f
 800c9fe:	bf0c      	ite	eq
 800ca00:	2308      	moveq	r3, #8
 800ca02:	230a      	movne	r3, #10
 800ca04:	2100      	movs	r1, #0
 800ca06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca0a:	6866      	ldr	r6, [r4, #4]
 800ca0c:	60a6      	str	r6, [r4, #8]
 800ca0e:	2e00      	cmp	r6, #0
 800ca10:	bfa2      	ittt	ge
 800ca12:	6821      	ldrge	r1, [r4, #0]
 800ca14:	f021 0104 	bicge.w	r1, r1, #4
 800ca18:	6021      	strge	r1, [r4, #0]
 800ca1a:	b90d      	cbnz	r5, 800ca20 <_printf_i+0x118>
 800ca1c:	2e00      	cmp	r6, #0
 800ca1e:	d04d      	beq.n	800cabc <_printf_i+0x1b4>
 800ca20:	4616      	mov	r6, r2
 800ca22:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca26:	fb03 5711 	mls	r7, r3, r1, r5
 800ca2a:	5dc7      	ldrb	r7, [r0, r7]
 800ca2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca30:	462f      	mov	r7, r5
 800ca32:	42bb      	cmp	r3, r7
 800ca34:	460d      	mov	r5, r1
 800ca36:	d9f4      	bls.n	800ca22 <_printf_i+0x11a>
 800ca38:	2b08      	cmp	r3, #8
 800ca3a:	d10b      	bne.n	800ca54 <_printf_i+0x14c>
 800ca3c:	6823      	ldr	r3, [r4, #0]
 800ca3e:	07df      	lsls	r7, r3, #31
 800ca40:	d508      	bpl.n	800ca54 <_printf_i+0x14c>
 800ca42:	6923      	ldr	r3, [r4, #16]
 800ca44:	6861      	ldr	r1, [r4, #4]
 800ca46:	4299      	cmp	r1, r3
 800ca48:	bfde      	ittt	le
 800ca4a:	2330      	movle	r3, #48	; 0x30
 800ca4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca50:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ca54:	1b92      	subs	r2, r2, r6
 800ca56:	6122      	str	r2, [r4, #16]
 800ca58:	f8cd a000 	str.w	sl, [sp]
 800ca5c:	464b      	mov	r3, r9
 800ca5e:	aa03      	add	r2, sp, #12
 800ca60:	4621      	mov	r1, r4
 800ca62:	4640      	mov	r0, r8
 800ca64:	f7ff fee2 	bl	800c82c <_printf_common>
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d14c      	bne.n	800cb06 <_printf_i+0x1fe>
 800ca6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca70:	b004      	add	sp, #16
 800ca72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca76:	4835      	ldr	r0, [pc, #212]	; (800cb4c <_printf_i+0x244>)
 800ca78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	680e      	ldr	r6, [r1, #0]
 800ca80:	061f      	lsls	r7, r3, #24
 800ca82:	f856 5b04 	ldr.w	r5, [r6], #4
 800ca86:	600e      	str	r6, [r1, #0]
 800ca88:	d514      	bpl.n	800cab4 <_printf_i+0x1ac>
 800ca8a:	07d9      	lsls	r1, r3, #31
 800ca8c:	bf44      	itt	mi
 800ca8e:	f043 0320 	orrmi.w	r3, r3, #32
 800ca92:	6023      	strmi	r3, [r4, #0]
 800ca94:	b91d      	cbnz	r5, 800ca9e <_printf_i+0x196>
 800ca96:	6823      	ldr	r3, [r4, #0]
 800ca98:	f023 0320 	bic.w	r3, r3, #32
 800ca9c:	6023      	str	r3, [r4, #0]
 800ca9e:	2310      	movs	r3, #16
 800caa0:	e7b0      	b.n	800ca04 <_printf_i+0xfc>
 800caa2:	6823      	ldr	r3, [r4, #0]
 800caa4:	f043 0320 	orr.w	r3, r3, #32
 800caa8:	6023      	str	r3, [r4, #0]
 800caaa:	2378      	movs	r3, #120	; 0x78
 800caac:	4828      	ldr	r0, [pc, #160]	; (800cb50 <_printf_i+0x248>)
 800caae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cab2:	e7e3      	b.n	800ca7c <_printf_i+0x174>
 800cab4:	065e      	lsls	r6, r3, #25
 800cab6:	bf48      	it	mi
 800cab8:	b2ad      	uxthmi	r5, r5
 800caba:	e7e6      	b.n	800ca8a <_printf_i+0x182>
 800cabc:	4616      	mov	r6, r2
 800cabe:	e7bb      	b.n	800ca38 <_printf_i+0x130>
 800cac0:	680b      	ldr	r3, [r1, #0]
 800cac2:	6826      	ldr	r6, [r4, #0]
 800cac4:	6960      	ldr	r0, [r4, #20]
 800cac6:	1d1d      	adds	r5, r3, #4
 800cac8:	600d      	str	r5, [r1, #0]
 800caca:	0635      	lsls	r5, r6, #24
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	d501      	bpl.n	800cad4 <_printf_i+0x1cc>
 800cad0:	6018      	str	r0, [r3, #0]
 800cad2:	e002      	b.n	800cada <_printf_i+0x1d2>
 800cad4:	0671      	lsls	r1, r6, #25
 800cad6:	d5fb      	bpl.n	800cad0 <_printf_i+0x1c8>
 800cad8:	8018      	strh	r0, [r3, #0]
 800cada:	2300      	movs	r3, #0
 800cadc:	6123      	str	r3, [r4, #16]
 800cade:	4616      	mov	r6, r2
 800cae0:	e7ba      	b.n	800ca58 <_printf_i+0x150>
 800cae2:	680b      	ldr	r3, [r1, #0]
 800cae4:	1d1a      	adds	r2, r3, #4
 800cae6:	600a      	str	r2, [r1, #0]
 800cae8:	681e      	ldr	r6, [r3, #0]
 800caea:	6862      	ldr	r2, [r4, #4]
 800caec:	2100      	movs	r1, #0
 800caee:	4630      	mov	r0, r6
 800caf0:	f7f3 fb8e 	bl	8000210 <memchr>
 800caf4:	b108      	cbz	r0, 800cafa <_printf_i+0x1f2>
 800caf6:	1b80      	subs	r0, r0, r6
 800caf8:	6060      	str	r0, [r4, #4]
 800cafa:	6863      	ldr	r3, [r4, #4]
 800cafc:	6123      	str	r3, [r4, #16]
 800cafe:	2300      	movs	r3, #0
 800cb00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb04:	e7a8      	b.n	800ca58 <_printf_i+0x150>
 800cb06:	6923      	ldr	r3, [r4, #16]
 800cb08:	4632      	mov	r2, r6
 800cb0a:	4649      	mov	r1, r9
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	47d0      	blx	sl
 800cb10:	3001      	adds	r0, #1
 800cb12:	d0ab      	beq.n	800ca6c <_printf_i+0x164>
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	079b      	lsls	r3, r3, #30
 800cb18:	d413      	bmi.n	800cb42 <_printf_i+0x23a>
 800cb1a:	68e0      	ldr	r0, [r4, #12]
 800cb1c:	9b03      	ldr	r3, [sp, #12]
 800cb1e:	4298      	cmp	r0, r3
 800cb20:	bfb8      	it	lt
 800cb22:	4618      	movlt	r0, r3
 800cb24:	e7a4      	b.n	800ca70 <_printf_i+0x168>
 800cb26:	2301      	movs	r3, #1
 800cb28:	4632      	mov	r2, r6
 800cb2a:	4649      	mov	r1, r9
 800cb2c:	4640      	mov	r0, r8
 800cb2e:	47d0      	blx	sl
 800cb30:	3001      	adds	r0, #1
 800cb32:	d09b      	beq.n	800ca6c <_printf_i+0x164>
 800cb34:	3501      	adds	r5, #1
 800cb36:	68e3      	ldr	r3, [r4, #12]
 800cb38:	9903      	ldr	r1, [sp, #12]
 800cb3a:	1a5b      	subs	r3, r3, r1
 800cb3c:	42ab      	cmp	r3, r5
 800cb3e:	dcf2      	bgt.n	800cb26 <_printf_i+0x21e>
 800cb40:	e7eb      	b.n	800cb1a <_printf_i+0x212>
 800cb42:	2500      	movs	r5, #0
 800cb44:	f104 0619 	add.w	r6, r4, #25
 800cb48:	e7f5      	b.n	800cb36 <_printf_i+0x22e>
 800cb4a:	bf00      	nop
 800cb4c:	0800f137 	.word	0x0800f137
 800cb50:	0800f148 	.word	0x0800f148

0800cb54 <_sbrk_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4d06      	ldr	r5, [pc, #24]	; (800cb70 <_sbrk_r+0x1c>)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	602b      	str	r3, [r5, #0]
 800cb60:	f7f5 fbd0 	bl	8002304 <_sbrk>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_sbrk_r+0x1a>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_sbrk_r+0x1a>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	20002598 	.word	0x20002598

0800cb74 <sniprintf>:
 800cb74:	b40c      	push	{r2, r3}
 800cb76:	b530      	push	{r4, r5, lr}
 800cb78:	4b17      	ldr	r3, [pc, #92]	; (800cbd8 <sniprintf+0x64>)
 800cb7a:	1e0c      	subs	r4, r1, #0
 800cb7c:	681d      	ldr	r5, [r3, #0]
 800cb7e:	b09d      	sub	sp, #116	; 0x74
 800cb80:	da08      	bge.n	800cb94 <sniprintf+0x20>
 800cb82:	238b      	movs	r3, #139	; 0x8b
 800cb84:	602b      	str	r3, [r5, #0]
 800cb86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb8a:	b01d      	add	sp, #116	; 0x74
 800cb8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb90:	b002      	add	sp, #8
 800cb92:	4770      	bx	lr
 800cb94:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cb98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb9c:	bf14      	ite	ne
 800cb9e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cba2:	4623      	moveq	r3, r4
 800cba4:	9304      	str	r3, [sp, #16]
 800cba6:	9307      	str	r3, [sp, #28]
 800cba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbac:	9002      	str	r0, [sp, #8]
 800cbae:	9006      	str	r0, [sp, #24]
 800cbb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cbb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cbb6:	ab21      	add	r3, sp, #132	; 0x84
 800cbb8:	a902      	add	r1, sp, #8
 800cbba:	4628      	mov	r0, r5
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	f001 fe4b 	bl	800e858 <_svfiprintf_r>
 800cbc2:	1c43      	adds	r3, r0, #1
 800cbc4:	bfbc      	itt	lt
 800cbc6:	238b      	movlt	r3, #139	; 0x8b
 800cbc8:	602b      	strlt	r3, [r5, #0]
 800cbca:	2c00      	cmp	r4, #0
 800cbcc:	d0dd      	beq.n	800cb8a <sniprintf+0x16>
 800cbce:	9b02      	ldr	r3, [sp, #8]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	701a      	strb	r2, [r3, #0]
 800cbd4:	e7d9      	b.n	800cb8a <sniprintf+0x16>
 800cbd6:	bf00      	nop
 800cbd8:	200001ec 	.word	0x200001ec

0800cbdc <strstr>:
 800cbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbde:	780c      	ldrb	r4, [r1, #0]
 800cbe0:	b164      	cbz	r4, 800cbfc <strstr+0x20>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	781a      	ldrb	r2, [r3, #0]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	1c5e      	adds	r6, r3, #1
 800cbea:	b90a      	cbnz	r2, 800cbf0 <strstr+0x14>
 800cbec:	4610      	mov	r0, r2
 800cbee:	e005      	b.n	800cbfc <strstr+0x20>
 800cbf0:	4294      	cmp	r4, r2
 800cbf2:	d108      	bne.n	800cc06 <strstr+0x2a>
 800cbf4:	460d      	mov	r5, r1
 800cbf6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800cbfa:	b902      	cbnz	r2, 800cbfe <strstr+0x22>
 800cbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbfe:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800cc02:	4297      	cmp	r7, r2
 800cc04:	d0f7      	beq.n	800cbf6 <strstr+0x1a>
 800cc06:	4633      	mov	r3, r6
 800cc08:	e7ec      	b.n	800cbe4 <strstr+0x8>
	...

0800cc0c <_strtol_l.isra.0>:
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc12:	d001      	beq.n	800cc18 <_strtol_l.isra.0+0xc>
 800cc14:	2b24      	cmp	r3, #36	; 0x24
 800cc16:	d906      	bls.n	800cc26 <_strtol_l.isra.0+0x1a>
 800cc18:	f7ff f8d4 	bl	800bdc4 <__errno>
 800cc1c:	2316      	movs	r3, #22
 800cc1e:	6003      	str	r3, [r0, #0]
 800cc20:	2000      	movs	r0, #0
 800cc22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc26:	4f3a      	ldr	r7, [pc, #232]	; (800cd10 <_strtol_l.isra.0+0x104>)
 800cc28:	468e      	mov	lr, r1
 800cc2a:	4676      	mov	r6, lr
 800cc2c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800cc30:	5de5      	ldrb	r5, [r4, r7]
 800cc32:	f015 0508 	ands.w	r5, r5, #8
 800cc36:	d1f8      	bne.n	800cc2a <_strtol_l.isra.0+0x1e>
 800cc38:	2c2d      	cmp	r4, #45	; 0x2d
 800cc3a:	d134      	bne.n	800cca6 <_strtol_l.isra.0+0x9a>
 800cc3c:	f89e 4000 	ldrb.w	r4, [lr]
 800cc40:	f04f 0801 	mov.w	r8, #1
 800cc44:	f106 0e02 	add.w	lr, r6, #2
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d05c      	beq.n	800cd06 <_strtol_l.isra.0+0xfa>
 800cc4c:	2b10      	cmp	r3, #16
 800cc4e:	d10c      	bne.n	800cc6a <_strtol_l.isra.0+0x5e>
 800cc50:	2c30      	cmp	r4, #48	; 0x30
 800cc52:	d10a      	bne.n	800cc6a <_strtol_l.isra.0+0x5e>
 800cc54:	f89e 4000 	ldrb.w	r4, [lr]
 800cc58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cc5c:	2c58      	cmp	r4, #88	; 0x58
 800cc5e:	d14d      	bne.n	800ccfc <_strtol_l.isra.0+0xf0>
 800cc60:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800cc64:	2310      	movs	r3, #16
 800cc66:	f10e 0e02 	add.w	lr, lr, #2
 800cc6a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800cc6e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800cc72:	2600      	movs	r6, #0
 800cc74:	fbbc f9f3 	udiv	r9, ip, r3
 800cc78:	4635      	mov	r5, r6
 800cc7a:	fb03 ca19 	mls	sl, r3, r9, ip
 800cc7e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800cc82:	2f09      	cmp	r7, #9
 800cc84:	d818      	bhi.n	800ccb8 <_strtol_l.isra.0+0xac>
 800cc86:	463c      	mov	r4, r7
 800cc88:	42a3      	cmp	r3, r4
 800cc8a:	dd24      	ble.n	800ccd6 <_strtol_l.isra.0+0xca>
 800cc8c:	2e00      	cmp	r6, #0
 800cc8e:	db1f      	blt.n	800ccd0 <_strtol_l.isra.0+0xc4>
 800cc90:	45a9      	cmp	r9, r5
 800cc92:	d31d      	bcc.n	800ccd0 <_strtol_l.isra.0+0xc4>
 800cc94:	d101      	bne.n	800cc9a <_strtol_l.isra.0+0x8e>
 800cc96:	45a2      	cmp	sl, r4
 800cc98:	db1a      	blt.n	800ccd0 <_strtol_l.isra.0+0xc4>
 800cc9a:	fb05 4503 	mla	r5, r5, r3, r4
 800cc9e:	2601      	movs	r6, #1
 800cca0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800cca4:	e7eb      	b.n	800cc7e <_strtol_l.isra.0+0x72>
 800cca6:	2c2b      	cmp	r4, #43	; 0x2b
 800cca8:	bf08      	it	eq
 800ccaa:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ccae:	46a8      	mov	r8, r5
 800ccb0:	bf08      	it	eq
 800ccb2:	f106 0e02 	addeq.w	lr, r6, #2
 800ccb6:	e7c7      	b.n	800cc48 <_strtol_l.isra.0+0x3c>
 800ccb8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ccbc:	2f19      	cmp	r7, #25
 800ccbe:	d801      	bhi.n	800ccc4 <_strtol_l.isra.0+0xb8>
 800ccc0:	3c37      	subs	r4, #55	; 0x37
 800ccc2:	e7e1      	b.n	800cc88 <_strtol_l.isra.0+0x7c>
 800ccc4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ccc8:	2f19      	cmp	r7, #25
 800ccca:	d804      	bhi.n	800ccd6 <_strtol_l.isra.0+0xca>
 800cccc:	3c57      	subs	r4, #87	; 0x57
 800ccce:	e7db      	b.n	800cc88 <_strtol_l.isra.0+0x7c>
 800ccd0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ccd4:	e7e4      	b.n	800cca0 <_strtol_l.isra.0+0x94>
 800ccd6:	2e00      	cmp	r6, #0
 800ccd8:	da05      	bge.n	800cce6 <_strtol_l.isra.0+0xda>
 800ccda:	2322      	movs	r3, #34	; 0x22
 800ccdc:	6003      	str	r3, [r0, #0]
 800ccde:	4665      	mov	r5, ip
 800cce0:	b942      	cbnz	r2, 800ccf4 <_strtol_l.isra.0+0xe8>
 800cce2:	4628      	mov	r0, r5
 800cce4:	e79d      	b.n	800cc22 <_strtol_l.isra.0+0x16>
 800cce6:	f1b8 0f00 	cmp.w	r8, #0
 800ccea:	d000      	beq.n	800ccee <_strtol_l.isra.0+0xe2>
 800ccec:	426d      	negs	r5, r5
 800ccee:	2a00      	cmp	r2, #0
 800ccf0:	d0f7      	beq.n	800cce2 <_strtol_l.isra.0+0xd6>
 800ccf2:	b10e      	cbz	r6, 800ccf8 <_strtol_l.isra.0+0xec>
 800ccf4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800ccf8:	6011      	str	r1, [r2, #0]
 800ccfa:	e7f2      	b.n	800cce2 <_strtol_l.isra.0+0xd6>
 800ccfc:	2430      	movs	r4, #48	; 0x30
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1b3      	bne.n	800cc6a <_strtol_l.isra.0+0x5e>
 800cd02:	2308      	movs	r3, #8
 800cd04:	e7b1      	b.n	800cc6a <_strtol_l.isra.0+0x5e>
 800cd06:	2c30      	cmp	r4, #48	; 0x30
 800cd08:	d0a4      	beq.n	800cc54 <_strtol_l.isra.0+0x48>
 800cd0a:	230a      	movs	r3, #10
 800cd0c:	e7ad      	b.n	800cc6a <_strtol_l.isra.0+0x5e>
 800cd0e:	bf00      	nop
 800cd10:	0800f00f 	.word	0x0800f00f

0800cd14 <strtol>:
 800cd14:	4613      	mov	r3, r2
 800cd16:	460a      	mov	r2, r1
 800cd18:	4601      	mov	r1, r0
 800cd1a:	4802      	ldr	r0, [pc, #8]	; (800cd24 <strtol+0x10>)
 800cd1c:	6800      	ldr	r0, [r0, #0]
 800cd1e:	f7ff bf75 	b.w	800cc0c <_strtol_l.isra.0>
 800cd22:	bf00      	nop
 800cd24:	200001ec 	.word	0x200001ec

0800cd28 <__swbuf_r>:
 800cd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2a:	460e      	mov	r6, r1
 800cd2c:	4614      	mov	r4, r2
 800cd2e:	4605      	mov	r5, r0
 800cd30:	b118      	cbz	r0, 800cd3a <__swbuf_r+0x12>
 800cd32:	6983      	ldr	r3, [r0, #24]
 800cd34:	b90b      	cbnz	r3, 800cd3a <__swbuf_r+0x12>
 800cd36:	f001 f851 	bl	800dddc <__sinit>
 800cd3a:	4b21      	ldr	r3, [pc, #132]	; (800cdc0 <__swbuf_r+0x98>)
 800cd3c:	429c      	cmp	r4, r3
 800cd3e:	d12b      	bne.n	800cd98 <__swbuf_r+0x70>
 800cd40:	686c      	ldr	r4, [r5, #4]
 800cd42:	69a3      	ldr	r3, [r4, #24]
 800cd44:	60a3      	str	r3, [r4, #8]
 800cd46:	89a3      	ldrh	r3, [r4, #12]
 800cd48:	071a      	lsls	r2, r3, #28
 800cd4a:	d52f      	bpl.n	800cdac <__swbuf_r+0x84>
 800cd4c:	6923      	ldr	r3, [r4, #16]
 800cd4e:	b36b      	cbz	r3, 800cdac <__swbuf_r+0x84>
 800cd50:	6923      	ldr	r3, [r4, #16]
 800cd52:	6820      	ldr	r0, [r4, #0]
 800cd54:	1ac0      	subs	r0, r0, r3
 800cd56:	6963      	ldr	r3, [r4, #20]
 800cd58:	b2f6      	uxtb	r6, r6
 800cd5a:	4283      	cmp	r3, r0
 800cd5c:	4637      	mov	r7, r6
 800cd5e:	dc04      	bgt.n	800cd6a <__swbuf_r+0x42>
 800cd60:	4621      	mov	r1, r4
 800cd62:	4628      	mov	r0, r5
 800cd64:	f000 ffa6 	bl	800dcb4 <_fflush_r>
 800cd68:	bb30      	cbnz	r0, 800cdb8 <__swbuf_r+0x90>
 800cd6a:	68a3      	ldr	r3, [r4, #8]
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	60a3      	str	r3, [r4, #8]
 800cd70:	6823      	ldr	r3, [r4, #0]
 800cd72:	1c5a      	adds	r2, r3, #1
 800cd74:	6022      	str	r2, [r4, #0]
 800cd76:	701e      	strb	r6, [r3, #0]
 800cd78:	6963      	ldr	r3, [r4, #20]
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	4283      	cmp	r3, r0
 800cd7e:	d004      	beq.n	800cd8a <__swbuf_r+0x62>
 800cd80:	89a3      	ldrh	r3, [r4, #12]
 800cd82:	07db      	lsls	r3, r3, #31
 800cd84:	d506      	bpl.n	800cd94 <__swbuf_r+0x6c>
 800cd86:	2e0a      	cmp	r6, #10
 800cd88:	d104      	bne.n	800cd94 <__swbuf_r+0x6c>
 800cd8a:	4621      	mov	r1, r4
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	f000 ff91 	bl	800dcb4 <_fflush_r>
 800cd92:	b988      	cbnz	r0, 800cdb8 <__swbuf_r+0x90>
 800cd94:	4638      	mov	r0, r7
 800cd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd98:	4b0a      	ldr	r3, [pc, #40]	; (800cdc4 <__swbuf_r+0x9c>)
 800cd9a:	429c      	cmp	r4, r3
 800cd9c:	d101      	bne.n	800cda2 <__swbuf_r+0x7a>
 800cd9e:	68ac      	ldr	r4, [r5, #8]
 800cda0:	e7cf      	b.n	800cd42 <__swbuf_r+0x1a>
 800cda2:	4b09      	ldr	r3, [pc, #36]	; (800cdc8 <__swbuf_r+0xa0>)
 800cda4:	429c      	cmp	r4, r3
 800cda6:	bf08      	it	eq
 800cda8:	68ec      	ldreq	r4, [r5, #12]
 800cdaa:	e7ca      	b.n	800cd42 <__swbuf_r+0x1a>
 800cdac:	4621      	mov	r1, r4
 800cdae:	4628      	mov	r0, r5
 800cdb0:	f000 f80c 	bl	800cdcc <__swsetup_r>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d0cb      	beq.n	800cd50 <__swbuf_r+0x28>
 800cdb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cdbc:	e7ea      	b.n	800cd94 <__swbuf_r+0x6c>
 800cdbe:	bf00      	nop
 800cdc0:	0800f210 	.word	0x0800f210
 800cdc4:	0800f230 	.word	0x0800f230
 800cdc8:	0800f1f0 	.word	0x0800f1f0

0800cdcc <__swsetup_r>:
 800cdcc:	4b32      	ldr	r3, [pc, #200]	; (800ce98 <__swsetup_r+0xcc>)
 800cdce:	b570      	push	{r4, r5, r6, lr}
 800cdd0:	681d      	ldr	r5, [r3, #0]
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	b125      	cbz	r5, 800cde2 <__swsetup_r+0x16>
 800cdd8:	69ab      	ldr	r3, [r5, #24]
 800cdda:	b913      	cbnz	r3, 800cde2 <__swsetup_r+0x16>
 800cddc:	4628      	mov	r0, r5
 800cdde:	f000 fffd 	bl	800dddc <__sinit>
 800cde2:	4b2e      	ldr	r3, [pc, #184]	; (800ce9c <__swsetup_r+0xd0>)
 800cde4:	429c      	cmp	r4, r3
 800cde6:	d10f      	bne.n	800ce08 <__swsetup_r+0x3c>
 800cde8:	686c      	ldr	r4, [r5, #4]
 800cdea:	89a3      	ldrh	r3, [r4, #12]
 800cdec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdf0:	0719      	lsls	r1, r3, #28
 800cdf2:	d42c      	bmi.n	800ce4e <__swsetup_r+0x82>
 800cdf4:	06dd      	lsls	r5, r3, #27
 800cdf6:	d411      	bmi.n	800ce1c <__swsetup_r+0x50>
 800cdf8:	2309      	movs	r3, #9
 800cdfa:	6033      	str	r3, [r6, #0]
 800cdfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce00:	81a3      	strh	r3, [r4, #12]
 800ce02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce06:	e03e      	b.n	800ce86 <__swsetup_r+0xba>
 800ce08:	4b25      	ldr	r3, [pc, #148]	; (800cea0 <__swsetup_r+0xd4>)
 800ce0a:	429c      	cmp	r4, r3
 800ce0c:	d101      	bne.n	800ce12 <__swsetup_r+0x46>
 800ce0e:	68ac      	ldr	r4, [r5, #8]
 800ce10:	e7eb      	b.n	800cdea <__swsetup_r+0x1e>
 800ce12:	4b24      	ldr	r3, [pc, #144]	; (800cea4 <__swsetup_r+0xd8>)
 800ce14:	429c      	cmp	r4, r3
 800ce16:	bf08      	it	eq
 800ce18:	68ec      	ldreq	r4, [r5, #12]
 800ce1a:	e7e6      	b.n	800cdea <__swsetup_r+0x1e>
 800ce1c:	0758      	lsls	r0, r3, #29
 800ce1e:	d512      	bpl.n	800ce46 <__swsetup_r+0x7a>
 800ce20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce22:	b141      	cbz	r1, 800ce36 <__swsetup_r+0x6a>
 800ce24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce28:	4299      	cmp	r1, r3
 800ce2a:	d002      	beq.n	800ce32 <__swsetup_r+0x66>
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	f7ff f823 	bl	800be78 <_free_r>
 800ce32:	2300      	movs	r3, #0
 800ce34:	6363      	str	r3, [r4, #52]	; 0x34
 800ce36:	89a3      	ldrh	r3, [r4, #12]
 800ce38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce3c:	81a3      	strh	r3, [r4, #12]
 800ce3e:	2300      	movs	r3, #0
 800ce40:	6063      	str	r3, [r4, #4]
 800ce42:	6923      	ldr	r3, [r4, #16]
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	89a3      	ldrh	r3, [r4, #12]
 800ce48:	f043 0308 	orr.w	r3, r3, #8
 800ce4c:	81a3      	strh	r3, [r4, #12]
 800ce4e:	6923      	ldr	r3, [r4, #16]
 800ce50:	b94b      	cbnz	r3, 800ce66 <__swsetup_r+0x9a>
 800ce52:	89a3      	ldrh	r3, [r4, #12]
 800ce54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce5c:	d003      	beq.n	800ce66 <__swsetup_r+0x9a>
 800ce5e:	4621      	mov	r1, r4
 800ce60:	4630      	mov	r0, r6
 800ce62:	f001 f885 	bl	800df70 <__smakebuf_r>
 800ce66:	89a0      	ldrh	r0, [r4, #12]
 800ce68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce6c:	f010 0301 	ands.w	r3, r0, #1
 800ce70:	d00a      	beq.n	800ce88 <__swsetup_r+0xbc>
 800ce72:	2300      	movs	r3, #0
 800ce74:	60a3      	str	r3, [r4, #8]
 800ce76:	6963      	ldr	r3, [r4, #20]
 800ce78:	425b      	negs	r3, r3
 800ce7a:	61a3      	str	r3, [r4, #24]
 800ce7c:	6923      	ldr	r3, [r4, #16]
 800ce7e:	b943      	cbnz	r3, 800ce92 <__swsetup_r+0xc6>
 800ce80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce84:	d1ba      	bne.n	800cdfc <__swsetup_r+0x30>
 800ce86:	bd70      	pop	{r4, r5, r6, pc}
 800ce88:	0781      	lsls	r1, r0, #30
 800ce8a:	bf58      	it	pl
 800ce8c:	6963      	ldrpl	r3, [r4, #20]
 800ce8e:	60a3      	str	r3, [r4, #8]
 800ce90:	e7f4      	b.n	800ce7c <__swsetup_r+0xb0>
 800ce92:	2000      	movs	r0, #0
 800ce94:	e7f7      	b.n	800ce86 <__swsetup_r+0xba>
 800ce96:	bf00      	nop
 800ce98:	200001ec 	.word	0x200001ec
 800ce9c:	0800f210 	.word	0x0800f210
 800cea0:	0800f230 	.word	0x0800f230
 800cea4:	0800f1f0 	.word	0x0800f1f0

0800cea8 <abort>:
 800cea8:	b508      	push	{r3, lr}
 800ceaa:	2006      	movs	r0, #6
 800ceac:	f001 fdfc 	bl	800eaa8 <raise>
 800ceb0:	2001      	movs	r0, #1
 800ceb2:	f7f5 f9af 	bl	8002214 <_exit>

0800ceb6 <quorem>:
 800ceb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceba:	6903      	ldr	r3, [r0, #16]
 800cebc:	690c      	ldr	r4, [r1, #16]
 800cebe:	42a3      	cmp	r3, r4
 800cec0:	4607      	mov	r7, r0
 800cec2:	f2c0 8081 	blt.w	800cfc8 <quorem+0x112>
 800cec6:	3c01      	subs	r4, #1
 800cec8:	f101 0814 	add.w	r8, r1, #20
 800cecc:	f100 0514 	add.w	r5, r0, #20
 800ced0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ced4:	9301      	str	r3, [sp, #4]
 800ced6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ceda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cede:	3301      	adds	r3, #1
 800cee0:	429a      	cmp	r2, r3
 800cee2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cee6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ceea:	fbb2 f6f3 	udiv	r6, r2, r3
 800ceee:	d331      	bcc.n	800cf54 <quorem+0x9e>
 800cef0:	f04f 0e00 	mov.w	lr, #0
 800cef4:	4640      	mov	r0, r8
 800cef6:	46ac      	mov	ip, r5
 800cef8:	46f2      	mov	sl, lr
 800cefa:	f850 2b04 	ldr.w	r2, [r0], #4
 800cefe:	b293      	uxth	r3, r2
 800cf00:	fb06 e303 	mla	r3, r6, r3, lr
 800cf04:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	ebaa 0303 	sub.w	r3, sl, r3
 800cf0e:	0c12      	lsrs	r2, r2, #16
 800cf10:	f8dc a000 	ldr.w	sl, [ip]
 800cf14:	fb06 e202 	mla	r2, r6, r2, lr
 800cf18:	fa13 f38a 	uxtah	r3, r3, sl
 800cf1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf20:	fa1f fa82 	uxth.w	sl, r2
 800cf24:	f8dc 2000 	ldr.w	r2, [ip]
 800cf28:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cf2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf36:	4581      	cmp	r9, r0
 800cf38:	f84c 3b04 	str.w	r3, [ip], #4
 800cf3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf40:	d2db      	bcs.n	800cefa <quorem+0x44>
 800cf42:	f855 300b 	ldr.w	r3, [r5, fp]
 800cf46:	b92b      	cbnz	r3, 800cf54 <quorem+0x9e>
 800cf48:	9b01      	ldr	r3, [sp, #4]
 800cf4a:	3b04      	subs	r3, #4
 800cf4c:	429d      	cmp	r5, r3
 800cf4e:	461a      	mov	r2, r3
 800cf50:	d32e      	bcc.n	800cfb0 <quorem+0xfa>
 800cf52:	613c      	str	r4, [r7, #16]
 800cf54:	4638      	mov	r0, r7
 800cf56:	f001 faef 	bl	800e538 <__mcmp>
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	db24      	blt.n	800cfa8 <quorem+0xf2>
 800cf5e:	3601      	adds	r6, #1
 800cf60:	4628      	mov	r0, r5
 800cf62:	f04f 0c00 	mov.w	ip, #0
 800cf66:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf6a:	f8d0 e000 	ldr.w	lr, [r0]
 800cf6e:	b293      	uxth	r3, r2
 800cf70:	ebac 0303 	sub.w	r3, ip, r3
 800cf74:	0c12      	lsrs	r2, r2, #16
 800cf76:	fa13 f38e 	uxtah	r3, r3, lr
 800cf7a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cf7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf88:	45c1      	cmp	r9, r8
 800cf8a:	f840 3b04 	str.w	r3, [r0], #4
 800cf8e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cf92:	d2e8      	bcs.n	800cf66 <quorem+0xb0>
 800cf94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf9c:	b922      	cbnz	r2, 800cfa8 <quorem+0xf2>
 800cf9e:	3b04      	subs	r3, #4
 800cfa0:	429d      	cmp	r5, r3
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	d30a      	bcc.n	800cfbc <quorem+0x106>
 800cfa6:	613c      	str	r4, [r7, #16]
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	b003      	add	sp, #12
 800cfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb0:	6812      	ldr	r2, [r2, #0]
 800cfb2:	3b04      	subs	r3, #4
 800cfb4:	2a00      	cmp	r2, #0
 800cfb6:	d1cc      	bne.n	800cf52 <quorem+0x9c>
 800cfb8:	3c01      	subs	r4, #1
 800cfba:	e7c7      	b.n	800cf4c <quorem+0x96>
 800cfbc:	6812      	ldr	r2, [r2, #0]
 800cfbe:	3b04      	subs	r3, #4
 800cfc0:	2a00      	cmp	r2, #0
 800cfc2:	d1f0      	bne.n	800cfa6 <quorem+0xf0>
 800cfc4:	3c01      	subs	r4, #1
 800cfc6:	e7eb      	b.n	800cfa0 <quorem+0xea>
 800cfc8:	2000      	movs	r0, #0
 800cfca:	e7ee      	b.n	800cfaa <quorem+0xf4>
 800cfcc:	0000      	movs	r0, r0
	...

0800cfd0 <_dtoa_r>:
 800cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd4:	ed2d 8b02 	vpush	{d8}
 800cfd8:	ec57 6b10 	vmov	r6, r7, d0
 800cfdc:	b095      	sub	sp, #84	; 0x54
 800cfde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cfe0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cfe4:	9105      	str	r1, [sp, #20]
 800cfe6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cfea:	4604      	mov	r4, r0
 800cfec:	9209      	str	r2, [sp, #36]	; 0x24
 800cfee:	930f      	str	r3, [sp, #60]	; 0x3c
 800cff0:	b975      	cbnz	r5, 800d010 <_dtoa_r+0x40>
 800cff2:	2010      	movs	r0, #16
 800cff4:	f7fe ff22 	bl	800be3c <malloc>
 800cff8:	4602      	mov	r2, r0
 800cffa:	6260      	str	r0, [r4, #36]	; 0x24
 800cffc:	b920      	cbnz	r0, 800d008 <_dtoa_r+0x38>
 800cffe:	4bb2      	ldr	r3, [pc, #712]	; (800d2c8 <_dtoa_r+0x2f8>)
 800d000:	21ea      	movs	r1, #234	; 0xea
 800d002:	48b2      	ldr	r0, [pc, #712]	; (800d2cc <_dtoa_r+0x2fc>)
 800d004:	f7fe febc 	bl	800bd80 <__assert_func>
 800d008:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d00c:	6005      	str	r5, [r0, #0]
 800d00e:	60c5      	str	r5, [r0, #12]
 800d010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d012:	6819      	ldr	r1, [r3, #0]
 800d014:	b151      	cbz	r1, 800d02c <_dtoa_r+0x5c>
 800d016:	685a      	ldr	r2, [r3, #4]
 800d018:	604a      	str	r2, [r1, #4]
 800d01a:	2301      	movs	r3, #1
 800d01c:	4093      	lsls	r3, r2
 800d01e:	608b      	str	r3, [r1, #8]
 800d020:	4620      	mov	r0, r4
 800d022:	f001 f84b 	bl	800e0bc <_Bfree>
 800d026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d028:	2200      	movs	r2, #0
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	1e3b      	subs	r3, r7, #0
 800d02e:	bfb9      	ittee	lt
 800d030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d034:	9303      	strlt	r3, [sp, #12]
 800d036:	2300      	movge	r3, #0
 800d038:	f8c8 3000 	strge.w	r3, [r8]
 800d03c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d040:	4ba3      	ldr	r3, [pc, #652]	; (800d2d0 <_dtoa_r+0x300>)
 800d042:	bfbc      	itt	lt
 800d044:	2201      	movlt	r2, #1
 800d046:	f8c8 2000 	strlt.w	r2, [r8]
 800d04a:	ea33 0309 	bics.w	r3, r3, r9
 800d04e:	d11b      	bne.n	800d088 <_dtoa_r+0xb8>
 800d050:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d052:	f242 730f 	movw	r3, #9999	; 0x270f
 800d056:	6013      	str	r3, [r2, #0]
 800d058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d05c:	4333      	orrs	r3, r6
 800d05e:	f000 857a 	beq.w	800db56 <_dtoa_r+0xb86>
 800d062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d064:	b963      	cbnz	r3, 800d080 <_dtoa_r+0xb0>
 800d066:	4b9b      	ldr	r3, [pc, #620]	; (800d2d4 <_dtoa_r+0x304>)
 800d068:	e024      	b.n	800d0b4 <_dtoa_r+0xe4>
 800d06a:	4b9b      	ldr	r3, [pc, #620]	; (800d2d8 <_dtoa_r+0x308>)
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	3308      	adds	r3, #8
 800d070:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d072:	6013      	str	r3, [r2, #0]
 800d074:	9800      	ldr	r0, [sp, #0]
 800d076:	b015      	add	sp, #84	; 0x54
 800d078:	ecbd 8b02 	vpop	{d8}
 800d07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d080:	4b94      	ldr	r3, [pc, #592]	; (800d2d4 <_dtoa_r+0x304>)
 800d082:	9300      	str	r3, [sp, #0]
 800d084:	3303      	adds	r3, #3
 800d086:	e7f3      	b.n	800d070 <_dtoa_r+0xa0>
 800d088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d08c:	2200      	movs	r2, #0
 800d08e:	ec51 0b17 	vmov	r0, r1, d7
 800d092:	2300      	movs	r3, #0
 800d094:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d098:	f7f3 fd2e 	bl	8000af8 <__aeabi_dcmpeq>
 800d09c:	4680      	mov	r8, r0
 800d09e:	b158      	cbz	r0, 800d0b8 <_dtoa_r+0xe8>
 800d0a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	6013      	str	r3, [r2, #0]
 800d0a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f000 8551 	beq.w	800db50 <_dtoa_r+0xb80>
 800d0ae:	488b      	ldr	r0, [pc, #556]	; (800d2dc <_dtoa_r+0x30c>)
 800d0b0:	6018      	str	r0, [r3, #0]
 800d0b2:	1e43      	subs	r3, r0, #1
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	e7dd      	b.n	800d074 <_dtoa_r+0xa4>
 800d0b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d0bc:	aa12      	add	r2, sp, #72	; 0x48
 800d0be:	a913      	add	r1, sp, #76	; 0x4c
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f001 fadd 	bl	800e680 <__d2b>
 800d0c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0ca:	4683      	mov	fp, r0
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	d07c      	beq.n	800d1ca <_dtoa_r+0x1fa>
 800d0d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d0d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d0de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d0e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d0e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d0ea:	4b7d      	ldr	r3, [pc, #500]	; (800d2e0 <_dtoa_r+0x310>)
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	f7f3 f8e1 	bl	80002b8 <__aeabi_dsub>
 800d0f6:	a36e      	add	r3, pc, #440	; (adr r3, 800d2b0 <_dtoa_r+0x2e0>)
 800d0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fc:	f7f3 fa94 	bl	8000628 <__aeabi_dmul>
 800d100:	a36d      	add	r3, pc, #436	; (adr r3, 800d2b8 <_dtoa_r+0x2e8>)
 800d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d106:	f7f3 f8d9 	bl	80002bc <__adddf3>
 800d10a:	4606      	mov	r6, r0
 800d10c:	4628      	mov	r0, r5
 800d10e:	460f      	mov	r7, r1
 800d110:	f7f3 fa20 	bl	8000554 <__aeabi_i2d>
 800d114:	a36a      	add	r3, pc, #424	; (adr r3, 800d2c0 <_dtoa_r+0x2f0>)
 800d116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11a:	f7f3 fa85 	bl	8000628 <__aeabi_dmul>
 800d11e:	4602      	mov	r2, r0
 800d120:	460b      	mov	r3, r1
 800d122:	4630      	mov	r0, r6
 800d124:	4639      	mov	r1, r7
 800d126:	f7f3 f8c9 	bl	80002bc <__adddf3>
 800d12a:	4606      	mov	r6, r0
 800d12c:	460f      	mov	r7, r1
 800d12e:	f7f3 fd2b 	bl	8000b88 <__aeabi_d2iz>
 800d132:	2200      	movs	r2, #0
 800d134:	4682      	mov	sl, r0
 800d136:	2300      	movs	r3, #0
 800d138:	4630      	mov	r0, r6
 800d13a:	4639      	mov	r1, r7
 800d13c:	f7f3 fce6 	bl	8000b0c <__aeabi_dcmplt>
 800d140:	b148      	cbz	r0, 800d156 <_dtoa_r+0x186>
 800d142:	4650      	mov	r0, sl
 800d144:	f7f3 fa06 	bl	8000554 <__aeabi_i2d>
 800d148:	4632      	mov	r2, r6
 800d14a:	463b      	mov	r3, r7
 800d14c:	f7f3 fcd4 	bl	8000af8 <__aeabi_dcmpeq>
 800d150:	b908      	cbnz	r0, 800d156 <_dtoa_r+0x186>
 800d152:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d156:	f1ba 0f16 	cmp.w	sl, #22
 800d15a:	d854      	bhi.n	800d206 <_dtoa_r+0x236>
 800d15c:	4b61      	ldr	r3, [pc, #388]	; (800d2e4 <_dtoa_r+0x314>)
 800d15e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d16a:	f7f3 fccf 	bl	8000b0c <__aeabi_dcmplt>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d04b      	beq.n	800d20a <_dtoa_r+0x23a>
 800d172:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d176:	2300      	movs	r3, #0
 800d178:	930e      	str	r3, [sp, #56]	; 0x38
 800d17a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d17c:	1b5d      	subs	r5, r3, r5
 800d17e:	1e6b      	subs	r3, r5, #1
 800d180:	9304      	str	r3, [sp, #16]
 800d182:	bf43      	ittte	mi
 800d184:	2300      	movmi	r3, #0
 800d186:	f1c5 0801 	rsbmi	r8, r5, #1
 800d18a:	9304      	strmi	r3, [sp, #16]
 800d18c:	f04f 0800 	movpl.w	r8, #0
 800d190:	f1ba 0f00 	cmp.w	sl, #0
 800d194:	db3b      	blt.n	800d20e <_dtoa_r+0x23e>
 800d196:	9b04      	ldr	r3, [sp, #16]
 800d198:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d19c:	4453      	add	r3, sl
 800d19e:	9304      	str	r3, [sp, #16]
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	9306      	str	r3, [sp, #24]
 800d1a4:	9b05      	ldr	r3, [sp, #20]
 800d1a6:	2b09      	cmp	r3, #9
 800d1a8:	d869      	bhi.n	800d27e <_dtoa_r+0x2ae>
 800d1aa:	2b05      	cmp	r3, #5
 800d1ac:	bfc4      	itt	gt
 800d1ae:	3b04      	subgt	r3, #4
 800d1b0:	9305      	strgt	r3, [sp, #20]
 800d1b2:	9b05      	ldr	r3, [sp, #20]
 800d1b4:	f1a3 0302 	sub.w	r3, r3, #2
 800d1b8:	bfcc      	ite	gt
 800d1ba:	2500      	movgt	r5, #0
 800d1bc:	2501      	movle	r5, #1
 800d1be:	2b03      	cmp	r3, #3
 800d1c0:	d869      	bhi.n	800d296 <_dtoa_r+0x2c6>
 800d1c2:	e8df f003 	tbb	[pc, r3]
 800d1c6:	4e2c      	.short	0x4e2c
 800d1c8:	5a4c      	.short	0x5a4c
 800d1ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d1ce:	441d      	add	r5, r3
 800d1d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d1d4:	2b20      	cmp	r3, #32
 800d1d6:	bfc1      	itttt	gt
 800d1d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d1dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d1e0:	fa09 f303 	lslgt.w	r3, r9, r3
 800d1e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d1e8:	bfda      	itte	le
 800d1ea:	f1c3 0320 	rsble	r3, r3, #32
 800d1ee:	fa06 f003 	lslle.w	r0, r6, r3
 800d1f2:	4318      	orrgt	r0, r3
 800d1f4:	f7f3 f99e 	bl	8000534 <__aeabi_ui2d>
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d200:	3d01      	subs	r5, #1
 800d202:	9310      	str	r3, [sp, #64]	; 0x40
 800d204:	e771      	b.n	800d0ea <_dtoa_r+0x11a>
 800d206:	2301      	movs	r3, #1
 800d208:	e7b6      	b.n	800d178 <_dtoa_r+0x1a8>
 800d20a:	900e      	str	r0, [sp, #56]	; 0x38
 800d20c:	e7b5      	b.n	800d17a <_dtoa_r+0x1aa>
 800d20e:	f1ca 0300 	rsb	r3, sl, #0
 800d212:	9306      	str	r3, [sp, #24]
 800d214:	2300      	movs	r3, #0
 800d216:	eba8 080a 	sub.w	r8, r8, sl
 800d21a:	930d      	str	r3, [sp, #52]	; 0x34
 800d21c:	e7c2      	b.n	800d1a4 <_dtoa_r+0x1d4>
 800d21e:	2300      	movs	r3, #0
 800d220:	9308      	str	r3, [sp, #32]
 800d222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d224:	2b00      	cmp	r3, #0
 800d226:	dc39      	bgt.n	800d29c <_dtoa_r+0x2cc>
 800d228:	f04f 0901 	mov.w	r9, #1
 800d22c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d230:	464b      	mov	r3, r9
 800d232:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d236:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d238:	2200      	movs	r2, #0
 800d23a:	6042      	str	r2, [r0, #4]
 800d23c:	2204      	movs	r2, #4
 800d23e:	f102 0614 	add.w	r6, r2, #20
 800d242:	429e      	cmp	r6, r3
 800d244:	6841      	ldr	r1, [r0, #4]
 800d246:	d92f      	bls.n	800d2a8 <_dtoa_r+0x2d8>
 800d248:	4620      	mov	r0, r4
 800d24a:	f000 fef7 	bl	800e03c <_Balloc>
 800d24e:	9000      	str	r0, [sp, #0]
 800d250:	2800      	cmp	r0, #0
 800d252:	d14b      	bne.n	800d2ec <_dtoa_r+0x31c>
 800d254:	4b24      	ldr	r3, [pc, #144]	; (800d2e8 <_dtoa_r+0x318>)
 800d256:	4602      	mov	r2, r0
 800d258:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d25c:	e6d1      	b.n	800d002 <_dtoa_r+0x32>
 800d25e:	2301      	movs	r3, #1
 800d260:	e7de      	b.n	800d220 <_dtoa_r+0x250>
 800d262:	2300      	movs	r3, #0
 800d264:	9308      	str	r3, [sp, #32]
 800d266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d268:	eb0a 0903 	add.w	r9, sl, r3
 800d26c:	f109 0301 	add.w	r3, r9, #1
 800d270:	2b01      	cmp	r3, #1
 800d272:	9301      	str	r3, [sp, #4]
 800d274:	bfb8      	it	lt
 800d276:	2301      	movlt	r3, #1
 800d278:	e7dd      	b.n	800d236 <_dtoa_r+0x266>
 800d27a:	2301      	movs	r3, #1
 800d27c:	e7f2      	b.n	800d264 <_dtoa_r+0x294>
 800d27e:	2501      	movs	r5, #1
 800d280:	2300      	movs	r3, #0
 800d282:	9305      	str	r3, [sp, #20]
 800d284:	9508      	str	r5, [sp, #32]
 800d286:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800d28a:	2200      	movs	r2, #0
 800d28c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d290:	2312      	movs	r3, #18
 800d292:	9209      	str	r2, [sp, #36]	; 0x24
 800d294:	e7cf      	b.n	800d236 <_dtoa_r+0x266>
 800d296:	2301      	movs	r3, #1
 800d298:	9308      	str	r3, [sp, #32]
 800d29a:	e7f4      	b.n	800d286 <_dtoa_r+0x2b6>
 800d29c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d2a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d2a4:	464b      	mov	r3, r9
 800d2a6:	e7c6      	b.n	800d236 <_dtoa_r+0x266>
 800d2a8:	3101      	adds	r1, #1
 800d2aa:	6041      	str	r1, [r0, #4]
 800d2ac:	0052      	lsls	r2, r2, #1
 800d2ae:	e7c6      	b.n	800d23e <_dtoa_r+0x26e>
 800d2b0:	636f4361 	.word	0x636f4361
 800d2b4:	3fd287a7 	.word	0x3fd287a7
 800d2b8:	8b60c8b3 	.word	0x8b60c8b3
 800d2bc:	3fc68a28 	.word	0x3fc68a28
 800d2c0:	509f79fb 	.word	0x509f79fb
 800d2c4:	3fd34413 	.word	0x3fd34413
 800d2c8:	0800f166 	.word	0x0800f166
 800d2cc:	0800f17d 	.word	0x0800f17d
 800d2d0:	7ff00000 	.word	0x7ff00000
 800d2d4:	0800f162 	.word	0x0800f162
 800d2d8:	0800f159 	.word	0x0800f159
 800d2dc:	0800f136 	.word	0x0800f136
 800d2e0:	3ff80000 	.word	0x3ff80000
 800d2e4:	0800f2d8 	.word	0x0800f2d8
 800d2e8:	0800f1dc 	.word	0x0800f1dc
 800d2ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2ee:	9a00      	ldr	r2, [sp, #0]
 800d2f0:	601a      	str	r2, [r3, #0]
 800d2f2:	9b01      	ldr	r3, [sp, #4]
 800d2f4:	2b0e      	cmp	r3, #14
 800d2f6:	f200 80ad 	bhi.w	800d454 <_dtoa_r+0x484>
 800d2fa:	2d00      	cmp	r5, #0
 800d2fc:	f000 80aa 	beq.w	800d454 <_dtoa_r+0x484>
 800d300:	f1ba 0f00 	cmp.w	sl, #0
 800d304:	dd36      	ble.n	800d374 <_dtoa_r+0x3a4>
 800d306:	4ac3      	ldr	r2, [pc, #780]	; (800d614 <_dtoa_r+0x644>)
 800d308:	f00a 030f 	and.w	r3, sl, #15
 800d30c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d310:	ed93 7b00 	vldr	d7, [r3]
 800d314:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d318:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d31c:	eeb0 8a47 	vmov.f32	s16, s14
 800d320:	eef0 8a67 	vmov.f32	s17, s15
 800d324:	d016      	beq.n	800d354 <_dtoa_r+0x384>
 800d326:	4bbc      	ldr	r3, [pc, #752]	; (800d618 <_dtoa_r+0x648>)
 800d328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d32c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d330:	f7f3 faa4 	bl	800087c <__aeabi_ddiv>
 800d334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d338:	f007 070f 	and.w	r7, r7, #15
 800d33c:	2503      	movs	r5, #3
 800d33e:	4eb6      	ldr	r6, [pc, #728]	; (800d618 <_dtoa_r+0x648>)
 800d340:	b957      	cbnz	r7, 800d358 <_dtoa_r+0x388>
 800d342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d346:	ec53 2b18 	vmov	r2, r3, d8
 800d34a:	f7f3 fa97 	bl	800087c <__aeabi_ddiv>
 800d34e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d352:	e029      	b.n	800d3a8 <_dtoa_r+0x3d8>
 800d354:	2502      	movs	r5, #2
 800d356:	e7f2      	b.n	800d33e <_dtoa_r+0x36e>
 800d358:	07f9      	lsls	r1, r7, #31
 800d35a:	d508      	bpl.n	800d36e <_dtoa_r+0x39e>
 800d35c:	ec51 0b18 	vmov	r0, r1, d8
 800d360:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d364:	f7f3 f960 	bl	8000628 <__aeabi_dmul>
 800d368:	ec41 0b18 	vmov	d8, r0, r1
 800d36c:	3501      	adds	r5, #1
 800d36e:	107f      	asrs	r7, r7, #1
 800d370:	3608      	adds	r6, #8
 800d372:	e7e5      	b.n	800d340 <_dtoa_r+0x370>
 800d374:	f000 80a6 	beq.w	800d4c4 <_dtoa_r+0x4f4>
 800d378:	f1ca 0600 	rsb	r6, sl, #0
 800d37c:	4ba5      	ldr	r3, [pc, #660]	; (800d614 <_dtoa_r+0x644>)
 800d37e:	4fa6      	ldr	r7, [pc, #664]	; (800d618 <_dtoa_r+0x648>)
 800d380:	f006 020f 	and.w	r2, r6, #15
 800d384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d390:	f7f3 f94a 	bl	8000628 <__aeabi_dmul>
 800d394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d398:	1136      	asrs	r6, r6, #4
 800d39a:	2300      	movs	r3, #0
 800d39c:	2502      	movs	r5, #2
 800d39e:	2e00      	cmp	r6, #0
 800d3a0:	f040 8085 	bne.w	800d4ae <_dtoa_r+0x4de>
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1d2      	bne.n	800d34e <_dtoa_r+0x37e>
 800d3a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f000 808c 	beq.w	800d4c8 <_dtoa_r+0x4f8>
 800d3b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d3b4:	4b99      	ldr	r3, [pc, #612]	; (800d61c <_dtoa_r+0x64c>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	f7f3 fba6 	bl	8000b0c <__aeabi_dcmplt>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	f000 8081 	beq.w	800d4c8 <_dtoa_r+0x4f8>
 800d3c6:	9b01      	ldr	r3, [sp, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d07d      	beq.n	800d4c8 <_dtoa_r+0x4f8>
 800d3cc:	f1b9 0f00 	cmp.w	r9, #0
 800d3d0:	dd3c      	ble.n	800d44c <_dtoa_r+0x47c>
 800d3d2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d3d6:	9307      	str	r3, [sp, #28]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	4b91      	ldr	r3, [pc, #580]	; (800d620 <_dtoa_r+0x650>)
 800d3dc:	4630      	mov	r0, r6
 800d3de:	4639      	mov	r1, r7
 800d3e0:	f7f3 f922 	bl	8000628 <__aeabi_dmul>
 800d3e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3e8:	3501      	adds	r5, #1
 800d3ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d3ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f7f3 f8ae 	bl	8000554 <__aeabi_i2d>
 800d3f8:	4632      	mov	r2, r6
 800d3fa:	463b      	mov	r3, r7
 800d3fc:	f7f3 f914 	bl	8000628 <__aeabi_dmul>
 800d400:	4b88      	ldr	r3, [pc, #544]	; (800d624 <_dtoa_r+0x654>)
 800d402:	2200      	movs	r2, #0
 800d404:	f7f2 ff5a 	bl	80002bc <__adddf3>
 800d408:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d40c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d410:	9303      	str	r3, [sp, #12]
 800d412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d414:	2b00      	cmp	r3, #0
 800d416:	d15c      	bne.n	800d4d2 <_dtoa_r+0x502>
 800d418:	4b83      	ldr	r3, [pc, #524]	; (800d628 <_dtoa_r+0x658>)
 800d41a:	2200      	movs	r2, #0
 800d41c:	4630      	mov	r0, r6
 800d41e:	4639      	mov	r1, r7
 800d420:	f7f2 ff4a 	bl	80002b8 <__aeabi_dsub>
 800d424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d428:	4606      	mov	r6, r0
 800d42a:	460f      	mov	r7, r1
 800d42c:	f7f3 fb8c 	bl	8000b48 <__aeabi_dcmpgt>
 800d430:	2800      	cmp	r0, #0
 800d432:	f040 8296 	bne.w	800d962 <_dtoa_r+0x992>
 800d436:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d43a:	4630      	mov	r0, r6
 800d43c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d440:	4639      	mov	r1, r7
 800d442:	f7f3 fb63 	bl	8000b0c <__aeabi_dcmplt>
 800d446:	2800      	cmp	r0, #0
 800d448:	f040 8288 	bne.w	800d95c <_dtoa_r+0x98c>
 800d44c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d450:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d456:	2b00      	cmp	r3, #0
 800d458:	f2c0 8158 	blt.w	800d70c <_dtoa_r+0x73c>
 800d45c:	f1ba 0f0e 	cmp.w	sl, #14
 800d460:	f300 8154 	bgt.w	800d70c <_dtoa_r+0x73c>
 800d464:	4b6b      	ldr	r3, [pc, #428]	; (800d614 <_dtoa_r+0x644>)
 800d466:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d46a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d470:	2b00      	cmp	r3, #0
 800d472:	f280 80e3 	bge.w	800d63c <_dtoa_r+0x66c>
 800d476:	9b01      	ldr	r3, [sp, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f300 80df 	bgt.w	800d63c <_dtoa_r+0x66c>
 800d47e:	f040 826d 	bne.w	800d95c <_dtoa_r+0x98c>
 800d482:	4b69      	ldr	r3, [pc, #420]	; (800d628 <_dtoa_r+0x658>)
 800d484:	2200      	movs	r2, #0
 800d486:	4640      	mov	r0, r8
 800d488:	4649      	mov	r1, r9
 800d48a:	f7f3 f8cd 	bl	8000628 <__aeabi_dmul>
 800d48e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d492:	f7f3 fb4f 	bl	8000b34 <__aeabi_dcmpge>
 800d496:	9e01      	ldr	r6, [sp, #4]
 800d498:	4637      	mov	r7, r6
 800d49a:	2800      	cmp	r0, #0
 800d49c:	f040 8243 	bne.w	800d926 <_dtoa_r+0x956>
 800d4a0:	9d00      	ldr	r5, [sp, #0]
 800d4a2:	2331      	movs	r3, #49	; 0x31
 800d4a4:	f805 3b01 	strb.w	r3, [r5], #1
 800d4a8:	f10a 0a01 	add.w	sl, sl, #1
 800d4ac:	e23f      	b.n	800d92e <_dtoa_r+0x95e>
 800d4ae:	07f2      	lsls	r2, r6, #31
 800d4b0:	d505      	bpl.n	800d4be <_dtoa_r+0x4ee>
 800d4b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4b6:	f7f3 f8b7 	bl	8000628 <__aeabi_dmul>
 800d4ba:	3501      	adds	r5, #1
 800d4bc:	2301      	movs	r3, #1
 800d4be:	1076      	asrs	r6, r6, #1
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	e76c      	b.n	800d39e <_dtoa_r+0x3ce>
 800d4c4:	2502      	movs	r5, #2
 800d4c6:	e76f      	b.n	800d3a8 <_dtoa_r+0x3d8>
 800d4c8:	9b01      	ldr	r3, [sp, #4]
 800d4ca:	f8cd a01c 	str.w	sl, [sp, #28]
 800d4ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d4d0:	e78d      	b.n	800d3ee <_dtoa_r+0x41e>
 800d4d2:	9900      	ldr	r1, [sp, #0]
 800d4d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d4d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4d8:	4b4e      	ldr	r3, [pc, #312]	; (800d614 <_dtoa_r+0x644>)
 800d4da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4de:	4401      	add	r1, r0
 800d4e0:	9102      	str	r1, [sp, #8]
 800d4e2:	9908      	ldr	r1, [sp, #32]
 800d4e4:	eeb0 8a47 	vmov.f32	s16, s14
 800d4e8:	eef0 8a67 	vmov.f32	s17, s15
 800d4ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d4f4:	2900      	cmp	r1, #0
 800d4f6:	d045      	beq.n	800d584 <_dtoa_r+0x5b4>
 800d4f8:	494c      	ldr	r1, [pc, #304]	; (800d62c <_dtoa_r+0x65c>)
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	f7f3 f9be 	bl	800087c <__aeabi_ddiv>
 800d500:	ec53 2b18 	vmov	r2, r3, d8
 800d504:	f7f2 fed8 	bl	80002b8 <__aeabi_dsub>
 800d508:	9d00      	ldr	r5, [sp, #0]
 800d50a:	ec41 0b18 	vmov	d8, r0, r1
 800d50e:	4639      	mov	r1, r7
 800d510:	4630      	mov	r0, r6
 800d512:	f7f3 fb39 	bl	8000b88 <__aeabi_d2iz>
 800d516:	900c      	str	r0, [sp, #48]	; 0x30
 800d518:	f7f3 f81c 	bl	8000554 <__aeabi_i2d>
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	4630      	mov	r0, r6
 800d522:	4639      	mov	r1, r7
 800d524:	f7f2 fec8 	bl	80002b8 <__aeabi_dsub>
 800d528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d52a:	3330      	adds	r3, #48	; 0x30
 800d52c:	f805 3b01 	strb.w	r3, [r5], #1
 800d530:	ec53 2b18 	vmov	r2, r3, d8
 800d534:	4606      	mov	r6, r0
 800d536:	460f      	mov	r7, r1
 800d538:	f7f3 fae8 	bl	8000b0c <__aeabi_dcmplt>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d165      	bne.n	800d60c <_dtoa_r+0x63c>
 800d540:	4632      	mov	r2, r6
 800d542:	463b      	mov	r3, r7
 800d544:	4935      	ldr	r1, [pc, #212]	; (800d61c <_dtoa_r+0x64c>)
 800d546:	2000      	movs	r0, #0
 800d548:	f7f2 feb6 	bl	80002b8 <__aeabi_dsub>
 800d54c:	ec53 2b18 	vmov	r2, r3, d8
 800d550:	f7f3 fadc 	bl	8000b0c <__aeabi_dcmplt>
 800d554:	2800      	cmp	r0, #0
 800d556:	f040 80b9 	bne.w	800d6cc <_dtoa_r+0x6fc>
 800d55a:	9b02      	ldr	r3, [sp, #8]
 800d55c:	429d      	cmp	r5, r3
 800d55e:	f43f af75 	beq.w	800d44c <_dtoa_r+0x47c>
 800d562:	4b2f      	ldr	r3, [pc, #188]	; (800d620 <_dtoa_r+0x650>)
 800d564:	ec51 0b18 	vmov	r0, r1, d8
 800d568:	2200      	movs	r2, #0
 800d56a:	f7f3 f85d 	bl	8000628 <__aeabi_dmul>
 800d56e:	4b2c      	ldr	r3, [pc, #176]	; (800d620 <_dtoa_r+0x650>)
 800d570:	ec41 0b18 	vmov	d8, r0, r1
 800d574:	2200      	movs	r2, #0
 800d576:	4630      	mov	r0, r6
 800d578:	4639      	mov	r1, r7
 800d57a:	f7f3 f855 	bl	8000628 <__aeabi_dmul>
 800d57e:	4606      	mov	r6, r0
 800d580:	460f      	mov	r7, r1
 800d582:	e7c4      	b.n	800d50e <_dtoa_r+0x53e>
 800d584:	ec51 0b17 	vmov	r0, r1, d7
 800d588:	f7f3 f84e 	bl	8000628 <__aeabi_dmul>
 800d58c:	9b02      	ldr	r3, [sp, #8]
 800d58e:	9d00      	ldr	r5, [sp, #0]
 800d590:	930c      	str	r3, [sp, #48]	; 0x30
 800d592:	ec41 0b18 	vmov	d8, r0, r1
 800d596:	4639      	mov	r1, r7
 800d598:	4630      	mov	r0, r6
 800d59a:	f7f3 faf5 	bl	8000b88 <__aeabi_d2iz>
 800d59e:	9011      	str	r0, [sp, #68]	; 0x44
 800d5a0:	f7f2 ffd8 	bl	8000554 <__aeabi_i2d>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	4639      	mov	r1, r7
 800d5ac:	f7f2 fe84 	bl	80002b8 <__aeabi_dsub>
 800d5b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5b2:	3330      	adds	r3, #48	; 0x30
 800d5b4:	f805 3b01 	strb.w	r3, [r5], #1
 800d5b8:	9b02      	ldr	r3, [sp, #8]
 800d5ba:	429d      	cmp	r5, r3
 800d5bc:	4606      	mov	r6, r0
 800d5be:	460f      	mov	r7, r1
 800d5c0:	f04f 0200 	mov.w	r2, #0
 800d5c4:	d134      	bne.n	800d630 <_dtoa_r+0x660>
 800d5c6:	4b19      	ldr	r3, [pc, #100]	; (800d62c <_dtoa_r+0x65c>)
 800d5c8:	ec51 0b18 	vmov	r0, r1, d8
 800d5cc:	f7f2 fe76 	bl	80002bc <__adddf3>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	f7f3 fab6 	bl	8000b48 <__aeabi_dcmpgt>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d175      	bne.n	800d6cc <_dtoa_r+0x6fc>
 800d5e0:	ec53 2b18 	vmov	r2, r3, d8
 800d5e4:	4911      	ldr	r1, [pc, #68]	; (800d62c <_dtoa_r+0x65c>)
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	f7f2 fe66 	bl	80002b8 <__aeabi_dsub>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	4639      	mov	r1, r7
 800d5f4:	f7f3 fa8a 	bl	8000b0c <__aeabi_dcmplt>
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	f43f af27 	beq.w	800d44c <_dtoa_r+0x47c>
 800d5fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d600:	1e6b      	subs	r3, r5, #1
 800d602:	930c      	str	r3, [sp, #48]	; 0x30
 800d604:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d608:	2b30      	cmp	r3, #48	; 0x30
 800d60a:	d0f8      	beq.n	800d5fe <_dtoa_r+0x62e>
 800d60c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d610:	e04a      	b.n	800d6a8 <_dtoa_r+0x6d8>
 800d612:	bf00      	nop
 800d614:	0800f2d8 	.word	0x0800f2d8
 800d618:	0800f2b0 	.word	0x0800f2b0
 800d61c:	3ff00000 	.word	0x3ff00000
 800d620:	40240000 	.word	0x40240000
 800d624:	401c0000 	.word	0x401c0000
 800d628:	40140000 	.word	0x40140000
 800d62c:	3fe00000 	.word	0x3fe00000
 800d630:	4baf      	ldr	r3, [pc, #700]	; (800d8f0 <_dtoa_r+0x920>)
 800d632:	f7f2 fff9 	bl	8000628 <__aeabi_dmul>
 800d636:	4606      	mov	r6, r0
 800d638:	460f      	mov	r7, r1
 800d63a:	e7ac      	b.n	800d596 <_dtoa_r+0x5c6>
 800d63c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d640:	9d00      	ldr	r5, [sp, #0]
 800d642:	4642      	mov	r2, r8
 800d644:	464b      	mov	r3, r9
 800d646:	4630      	mov	r0, r6
 800d648:	4639      	mov	r1, r7
 800d64a:	f7f3 f917 	bl	800087c <__aeabi_ddiv>
 800d64e:	f7f3 fa9b 	bl	8000b88 <__aeabi_d2iz>
 800d652:	9002      	str	r0, [sp, #8]
 800d654:	f7f2 ff7e 	bl	8000554 <__aeabi_i2d>
 800d658:	4642      	mov	r2, r8
 800d65a:	464b      	mov	r3, r9
 800d65c:	f7f2 ffe4 	bl	8000628 <__aeabi_dmul>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	4630      	mov	r0, r6
 800d666:	4639      	mov	r1, r7
 800d668:	f7f2 fe26 	bl	80002b8 <__aeabi_dsub>
 800d66c:	9e02      	ldr	r6, [sp, #8]
 800d66e:	9f01      	ldr	r7, [sp, #4]
 800d670:	3630      	adds	r6, #48	; 0x30
 800d672:	f805 6b01 	strb.w	r6, [r5], #1
 800d676:	9e00      	ldr	r6, [sp, #0]
 800d678:	1bae      	subs	r6, r5, r6
 800d67a:	42b7      	cmp	r7, r6
 800d67c:	4602      	mov	r2, r0
 800d67e:	460b      	mov	r3, r1
 800d680:	d137      	bne.n	800d6f2 <_dtoa_r+0x722>
 800d682:	f7f2 fe1b 	bl	80002bc <__adddf3>
 800d686:	4642      	mov	r2, r8
 800d688:	464b      	mov	r3, r9
 800d68a:	4606      	mov	r6, r0
 800d68c:	460f      	mov	r7, r1
 800d68e:	f7f3 fa5b 	bl	8000b48 <__aeabi_dcmpgt>
 800d692:	b9c8      	cbnz	r0, 800d6c8 <_dtoa_r+0x6f8>
 800d694:	4642      	mov	r2, r8
 800d696:	464b      	mov	r3, r9
 800d698:	4630      	mov	r0, r6
 800d69a:	4639      	mov	r1, r7
 800d69c:	f7f3 fa2c 	bl	8000af8 <__aeabi_dcmpeq>
 800d6a0:	b110      	cbz	r0, 800d6a8 <_dtoa_r+0x6d8>
 800d6a2:	9b02      	ldr	r3, [sp, #8]
 800d6a4:	07d9      	lsls	r1, r3, #31
 800d6a6:	d40f      	bmi.n	800d6c8 <_dtoa_r+0x6f8>
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	4659      	mov	r1, fp
 800d6ac:	f000 fd06 	bl	800e0bc <_Bfree>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	702b      	strb	r3, [r5, #0]
 800d6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6b6:	f10a 0001 	add.w	r0, sl, #1
 800d6ba:	6018      	str	r0, [r3, #0]
 800d6bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f43f acd8 	beq.w	800d074 <_dtoa_r+0xa4>
 800d6c4:	601d      	str	r5, [r3, #0]
 800d6c6:	e4d5      	b.n	800d074 <_dtoa_r+0xa4>
 800d6c8:	f8cd a01c 	str.w	sl, [sp, #28]
 800d6cc:	462b      	mov	r3, r5
 800d6ce:	461d      	mov	r5, r3
 800d6d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6d4:	2a39      	cmp	r2, #57	; 0x39
 800d6d6:	d108      	bne.n	800d6ea <_dtoa_r+0x71a>
 800d6d8:	9a00      	ldr	r2, [sp, #0]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d1f7      	bne.n	800d6ce <_dtoa_r+0x6fe>
 800d6de:	9a07      	ldr	r2, [sp, #28]
 800d6e0:	9900      	ldr	r1, [sp, #0]
 800d6e2:	3201      	adds	r2, #1
 800d6e4:	9207      	str	r2, [sp, #28]
 800d6e6:	2230      	movs	r2, #48	; 0x30
 800d6e8:	700a      	strb	r2, [r1, #0]
 800d6ea:	781a      	ldrb	r2, [r3, #0]
 800d6ec:	3201      	adds	r2, #1
 800d6ee:	701a      	strb	r2, [r3, #0]
 800d6f0:	e78c      	b.n	800d60c <_dtoa_r+0x63c>
 800d6f2:	4b7f      	ldr	r3, [pc, #508]	; (800d8f0 <_dtoa_r+0x920>)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f7f2 ff97 	bl	8000628 <__aeabi_dmul>
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	4606      	mov	r6, r0
 800d700:	460f      	mov	r7, r1
 800d702:	f7f3 f9f9 	bl	8000af8 <__aeabi_dcmpeq>
 800d706:	2800      	cmp	r0, #0
 800d708:	d09b      	beq.n	800d642 <_dtoa_r+0x672>
 800d70a:	e7cd      	b.n	800d6a8 <_dtoa_r+0x6d8>
 800d70c:	9a08      	ldr	r2, [sp, #32]
 800d70e:	2a00      	cmp	r2, #0
 800d710:	f000 80c4 	beq.w	800d89c <_dtoa_r+0x8cc>
 800d714:	9a05      	ldr	r2, [sp, #20]
 800d716:	2a01      	cmp	r2, #1
 800d718:	f300 80a8 	bgt.w	800d86c <_dtoa_r+0x89c>
 800d71c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d71e:	2a00      	cmp	r2, #0
 800d720:	f000 80a0 	beq.w	800d864 <_dtoa_r+0x894>
 800d724:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d728:	9e06      	ldr	r6, [sp, #24]
 800d72a:	4645      	mov	r5, r8
 800d72c:	9a04      	ldr	r2, [sp, #16]
 800d72e:	2101      	movs	r1, #1
 800d730:	441a      	add	r2, r3
 800d732:	4620      	mov	r0, r4
 800d734:	4498      	add	r8, r3
 800d736:	9204      	str	r2, [sp, #16]
 800d738:	f000 fd7c 	bl	800e234 <__i2b>
 800d73c:	4607      	mov	r7, r0
 800d73e:	2d00      	cmp	r5, #0
 800d740:	dd0b      	ble.n	800d75a <_dtoa_r+0x78a>
 800d742:	9b04      	ldr	r3, [sp, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	dd08      	ble.n	800d75a <_dtoa_r+0x78a>
 800d748:	42ab      	cmp	r3, r5
 800d74a:	9a04      	ldr	r2, [sp, #16]
 800d74c:	bfa8      	it	ge
 800d74e:	462b      	movge	r3, r5
 800d750:	eba8 0803 	sub.w	r8, r8, r3
 800d754:	1aed      	subs	r5, r5, r3
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	9304      	str	r3, [sp, #16]
 800d75a:	9b06      	ldr	r3, [sp, #24]
 800d75c:	b1fb      	cbz	r3, 800d79e <_dtoa_r+0x7ce>
 800d75e:	9b08      	ldr	r3, [sp, #32]
 800d760:	2b00      	cmp	r3, #0
 800d762:	f000 809f 	beq.w	800d8a4 <_dtoa_r+0x8d4>
 800d766:	2e00      	cmp	r6, #0
 800d768:	dd11      	ble.n	800d78e <_dtoa_r+0x7be>
 800d76a:	4639      	mov	r1, r7
 800d76c:	4632      	mov	r2, r6
 800d76e:	4620      	mov	r0, r4
 800d770:	f000 fe1c 	bl	800e3ac <__pow5mult>
 800d774:	465a      	mov	r2, fp
 800d776:	4601      	mov	r1, r0
 800d778:	4607      	mov	r7, r0
 800d77a:	4620      	mov	r0, r4
 800d77c:	f000 fd70 	bl	800e260 <__multiply>
 800d780:	4659      	mov	r1, fp
 800d782:	9007      	str	r0, [sp, #28]
 800d784:	4620      	mov	r0, r4
 800d786:	f000 fc99 	bl	800e0bc <_Bfree>
 800d78a:	9b07      	ldr	r3, [sp, #28]
 800d78c:	469b      	mov	fp, r3
 800d78e:	9b06      	ldr	r3, [sp, #24]
 800d790:	1b9a      	subs	r2, r3, r6
 800d792:	d004      	beq.n	800d79e <_dtoa_r+0x7ce>
 800d794:	4659      	mov	r1, fp
 800d796:	4620      	mov	r0, r4
 800d798:	f000 fe08 	bl	800e3ac <__pow5mult>
 800d79c:	4683      	mov	fp, r0
 800d79e:	2101      	movs	r1, #1
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	f000 fd47 	bl	800e234 <__i2b>
 800d7a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	dd7c      	ble.n	800d8a8 <_dtoa_r+0x8d8>
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	4601      	mov	r1, r0
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f000 fdfa 	bl	800e3ac <__pow5mult>
 800d7b8:	9b05      	ldr	r3, [sp, #20]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	4606      	mov	r6, r0
 800d7be:	dd76      	ble.n	800d8ae <_dtoa_r+0x8de>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	9306      	str	r3, [sp, #24]
 800d7c4:	6933      	ldr	r3, [r6, #16]
 800d7c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d7ca:	6918      	ldr	r0, [r3, #16]
 800d7cc:	f000 fce2 	bl	800e194 <__hi0bits>
 800d7d0:	f1c0 0020 	rsb	r0, r0, #32
 800d7d4:	9b04      	ldr	r3, [sp, #16]
 800d7d6:	4418      	add	r0, r3
 800d7d8:	f010 001f 	ands.w	r0, r0, #31
 800d7dc:	f000 8086 	beq.w	800d8ec <_dtoa_r+0x91c>
 800d7e0:	f1c0 0320 	rsb	r3, r0, #32
 800d7e4:	2b04      	cmp	r3, #4
 800d7e6:	dd7f      	ble.n	800d8e8 <_dtoa_r+0x918>
 800d7e8:	f1c0 001c 	rsb	r0, r0, #28
 800d7ec:	9b04      	ldr	r3, [sp, #16]
 800d7ee:	4403      	add	r3, r0
 800d7f0:	4480      	add	r8, r0
 800d7f2:	4405      	add	r5, r0
 800d7f4:	9304      	str	r3, [sp, #16]
 800d7f6:	f1b8 0f00 	cmp.w	r8, #0
 800d7fa:	dd05      	ble.n	800d808 <_dtoa_r+0x838>
 800d7fc:	4659      	mov	r1, fp
 800d7fe:	4642      	mov	r2, r8
 800d800:	4620      	mov	r0, r4
 800d802:	f000 fe2d 	bl	800e460 <__lshift>
 800d806:	4683      	mov	fp, r0
 800d808:	9b04      	ldr	r3, [sp, #16]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	dd05      	ble.n	800d81a <_dtoa_r+0x84a>
 800d80e:	4631      	mov	r1, r6
 800d810:	461a      	mov	r2, r3
 800d812:	4620      	mov	r0, r4
 800d814:	f000 fe24 	bl	800e460 <__lshift>
 800d818:	4606      	mov	r6, r0
 800d81a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d069      	beq.n	800d8f4 <_dtoa_r+0x924>
 800d820:	4631      	mov	r1, r6
 800d822:	4658      	mov	r0, fp
 800d824:	f000 fe88 	bl	800e538 <__mcmp>
 800d828:	2800      	cmp	r0, #0
 800d82a:	da63      	bge.n	800d8f4 <_dtoa_r+0x924>
 800d82c:	2300      	movs	r3, #0
 800d82e:	4659      	mov	r1, fp
 800d830:	220a      	movs	r2, #10
 800d832:	4620      	mov	r0, r4
 800d834:	f000 fc64 	bl	800e100 <__multadd>
 800d838:	9b08      	ldr	r3, [sp, #32]
 800d83a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d83e:	4683      	mov	fp, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	f000 818f 	beq.w	800db64 <_dtoa_r+0xb94>
 800d846:	4639      	mov	r1, r7
 800d848:	2300      	movs	r3, #0
 800d84a:	220a      	movs	r2, #10
 800d84c:	4620      	mov	r0, r4
 800d84e:	f000 fc57 	bl	800e100 <__multadd>
 800d852:	f1b9 0f00 	cmp.w	r9, #0
 800d856:	4607      	mov	r7, r0
 800d858:	f300 808e 	bgt.w	800d978 <_dtoa_r+0x9a8>
 800d85c:	9b05      	ldr	r3, [sp, #20]
 800d85e:	2b02      	cmp	r3, #2
 800d860:	dc50      	bgt.n	800d904 <_dtoa_r+0x934>
 800d862:	e089      	b.n	800d978 <_dtoa_r+0x9a8>
 800d864:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d86a:	e75d      	b.n	800d728 <_dtoa_r+0x758>
 800d86c:	9b01      	ldr	r3, [sp, #4]
 800d86e:	1e5e      	subs	r6, r3, #1
 800d870:	9b06      	ldr	r3, [sp, #24]
 800d872:	42b3      	cmp	r3, r6
 800d874:	bfbf      	itttt	lt
 800d876:	9b06      	ldrlt	r3, [sp, #24]
 800d878:	9606      	strlt	r6, [sp, #24]
 800d87a:	1af2      	sublt	r2, r6, r3
 800d87c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d87e:	bfb6      	itet	lt
 800d880:	189b      	addlt	r3, r3, r2
 800d882:	1b9e      	subge	r6, r3, r6
 800d884:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	bfb8      	it	lt
 800d88a:	2600      	movlt	r6, #0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	bfb5      	itete	lt
 800d890:	eba8 0503 	sublt.w	r5, r8, r3
 800d894:	9b01      	ldrge	r3, [sp, #4]
 800d896:	2300      	movlt	r3, #0
 800d898:	4645      	movge	r5, r8
 800d89a:	e747      	b.n	800d72c <_dtoa_r+0x75c>
 800d89c:	9e06      	ldr	r6, [sp, #24]
 800d89e:	9f08      	ldr	r7, [sp, #32]
 800d8a0:	4645      	mov	r5, r8
 800d8a2:	e74c      	b.n	800d73e <_dtoa_r+0x76e>
 800d8a4:	9a06      	ldr	r2, [sp, #24]
 800d8a6:	e775      	b.n	800d794 <_dtoa_r+0x7c4>
 800d8a8:	9b05      	ldr	r3, [sp, #20]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	dc18      	bgt.n	800d8e0 <_dtoa_r+0x910>
 800d8ae:	9b02      	ldr	r3, [sp, #8]
 800d8b0:	b9b3      	cbnz	r3, 800d8e0 <_dtoa_r+0x910>
 800d8b2:	9b03      	ldr	r3, [sp, #12]
 800d8b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8b8:	b9a3      	cbnz	r3, 800d8e4 <_dtoa_r+0x914>
 800d8ba:	9b03      	ldr	r3, [sp, #12]
 800d8bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8c0:	0d1b      	lsrs	r3, r3, #20
 800d8c2:	051b      	lsls	r3, r3, #20
 800d8c4:	b12b      	cbz	r3, 800d8d2 <_dtoa_r+0x902>
 800d8c6:	9b04      	ldr	r3, [sp, #16]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	9304      	str	r3, [sp, #16]
 800d8cc:	f108 0801 	add.w	r8, r8, #1
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	9306      	str	r3, [sp, #24]
 800d8d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f47f af74 	bne.w	800d7c4 <_dtoa_r+0x7f4>
 800d8dc:	2001      	movs	r0, #1
 800d8de:	e779      	b.n	800d7d4 <_dtoa_r+0x804>
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	e7f6      	b.n	800d8d2 <_dtoa_r+0x902>
 800d8e4:	9b02      	ldr	r3, [sp, #8]
 800d8e6:	e7f4      	b.n	800d8d2 <_dtoa_r+0x902>
 800d8e8:	d085      	beq.n	800d7f6 <_dtoa_r+0x826>
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	301c      	adds	r0, #28
 800d8ee:	e77d      	b.n	800d7ec <_dtoa_r+0x81c>
 800d8f0:	40240000 	.word	0x40240000
 800d8f4:	9b01      	ldr	r3, [sp, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	dc38      	bgt.n	800d96c <_dtoa_r+0x99c>
 800d8fa:	9b05      	ldr	r3, [sp, #20]
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	dd35      	ble.n	800d96c <_dtoa_r+0x99c>
 800d900:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d904:	f1b9 0f00 	cmp.w	r9, #0
 800d908:	d10d      	bne.n	800d926 <_dtoa_r+0x956>
 800d90a:	4631      	mov	r1, r6
 800d90c:	464b      	mov	r3, r9
 800d90e:	2205      	movs	r2, #5
 800d910:	4620      	mov	r0, r4
 800d912:	f000 fbf5 	bl	800e100 <__multadd>
 800d916:	4601      	mov	r1, r0
 800d918:	4606      	mov	r6, r0
 800d91a:	4658      	mov	r0, fp
 800d91c:	f000 fe0c 	bl	800e538 <__mcmp>
 800d920:	2800      	cmp	r0, #0
 800d922:	f73f adbd 	bgt.w	800d4a0 <_dtoa_r+0x4d0>
 800d926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d928:	9d00      	ldr	r5, [sp, #0]
 800d92a:	ea6f 0a03 	mvn.w	sl, r3
 800d92e:	f04f 0800 	mov.w	r8, #0
 800d932:	4631      	mov	r1, r6
 800d934:	4620      	mov	r0, r4
 800d936:	f000 fbc1 	bl	800e0bc <_Bfree>
 800d93a:	2f00      	cmp	r7, #0
 800d93c:	f43f aeb4 	beq.w	800d6a8 <_dtoa_r+0x6d8>
 800d940:	f1b8 0f00 	cmp.w	r8, #0
 800d944:	d005      	beq.n	800d952 <_dtoa_r+0x982>
 800d946:	45b8      	cmp	r8, r7
 800d948:	d003      	beq.n	800d952 <_dtoa_r+0x982>
 800d94a:	4641      	mov	r1, r8
 800d94c:	4620      	mov	r0, r4
 800d94e:	f000 fbb5 	bl	800e0bc <_Bfree>
 800d952:	4639      	mov	r1, r7
 800d954:	4620      	mov	r0, r4
 800d956:	f000 fbb1 	bl	800e0bc <_Bfree>
 800d95a:	e6a5      	b.n	800d6a8 <_dtoa_r+0x6d8>
 800d95c:	2600      	movs	r6, #0
 800d95e:	4637      	mov	r7, r6
 800d960:	e7e1      	b.n	800d926 <_dtoa_r+0x956>
 800d962:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d964:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d968:	4637      	mov	r7, r6
 800d96a:	e599      	b.n	800d4a0 <_dtoa_r+0x4d0>
 800d96c:	9b08      	ldr	r3, [sp, #32]
 800d96e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	f000 80fd 	beq.w	800db72 <_dtoa_r+0xba2>
 800d978:	2d00      	cmp	r5, #0
 800d97a:	dd05      	ble.n	800d988 <_dtoa_r+0x9b8>
 800d97c:	4639      	mov	r1, r7
 800d97e:	462a      	mov	r2, r5
 800d980:	4620      	mov	r0, r4
 800d982:	f000 fd6d 	bl	800e460 <__lshift>
 800d986:	4607      	mov	r7, r0
 800d988:	9b06      	ldr	r3, [sp, #24]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d05c      	beq.n	800da48 <_dtoa_r+0xa78>
 800d98e:	6879      	ldr	r1, [r7, #4]
 800d990:	4620      	mov	r0, r4
 800d992:	f000 fb53 	bl	800e03c <_Balloc>
 800d996:	4605      	mov	r5, r0
 800d998:	b928      	cbnz	r0, 800d9a6 <_dtoa_r+0x9d6>
 800d99a:	4b80      	ldr	r3, [pc, #512]	; (800db9c <_dtoa_r+0xbcc>)
 800d99c:	4602      	mov	r2, r0
 800d99e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d9a2:	f7ff bb2e 	b.w	800d002 <_dtoa_r+0x32>
 800d9a6:	693a      	ldr	r2, [r7, #16]
 800d9a8:	3202      	adds	r2, #2
 800d9aa:	0092      	lsls	r2, r2, #2
 800d9ac:	f107 010c 	add.w	r1, r7, #12
 800d9b0:	300c      	adds	r0, #12
 800d9b2:	f7fe fa4b 	bl	800be4c <memcpy>
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	f000 fd50 	bl	800e460 <__lshift>
 800d9c0:	9b00      	ldr	r3, [sp, #0]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	9301      	str	r3, [sp, #4]
 800d9c6:	9b00      	ldr	r3, [sp, #0]
 800d9c8:	444b      	add	r3, r9
 800d9ca:	9307      	str	r3, [sp, #28]
 800d9cc:	9b02      	ldr	r3, [sp, #8]
 800d9ce:	f003 0301 	and.w	r3, r3, #1
 800d9d2:	46b8      	mov	r8, r7
 800d9d4:	9306      	str	r3, [sp, #24]
 800d9d6:	4607      	mov	r7, r0
 800d9d8:	9b01      	ldr	r3, [sp, #4]
 800d9da:	4631      	mov	r1, r6
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	4658      	mov	r0, fp
 800d9e0:	9302      	str	r3, [sp, #8]
 800d9e2:	f7ff fa68 	bl	800ceb6 <quorem>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	3330      	adds	r3, #48	; 0x30
 800d9ea:	9004      	str	r0, [sp, #16]
 800d9ec:	4641      	mov	r1, r8
 800d9ee:	4658      	mov	r0, fp
 800d9f0:	9308      	str	r3, [sp, #32]
 800d9f2:	f000 fda1 	bl	800e538 <__mcmp>
 800d9f6:	463a      	mov	r2, r7
 800d9f8:	4681      	mov	r9, r0
 800d9fa:	4631      	mov	r1, r6
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f000 fdb7 	bl	800e570 <__mdiff>
 800da02:	68c2      	ldr	r2, [r0, #12]
 800da04:	9b08      	ldr	r3, [sp, #32]
 800da06:	4605      	mov	r5, r0
 800da08:	bb02      	cbnz	r2, 800da4c <_dtoa_r+0xa7c>
 800da0a:	4601      	mov	r1, r0
 800da0c:	4658      	mov	r0, fp
 800da0e:	f000 fd93 	bl	800e538 <__mcmp>
 800da12:	9b08      	ldr	r3, [sp, #32]
 800da14:	4602      	mov	r2, r0
 800da16:	4629      	mov	r1, r5
 800da18:	4620      	mov	r0, r4
 800da1a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800da1e:	f000 fb4d 	bl	800e0bc <_Bfree>
 800da22:	9b05      	ldr	r3, [sp, #20]
 800da24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da26:	9d01      	ldr	r5, [sp, #4]
 800da28:	ea43 0102 	orr.w	r1, r3, r2
 800da2c:	9b06      	ldr	r3, [sp, #24]
 800da2e:	430b      	orrs	r3, r1
 800da30:	9b08      	ldr	r3, [sp, #32]
 800da32:	d10d      	bne.n	800da50 <_dtoa_r+0xa80>
 800da34:	2b39      	cmp	r3, #57	; 0x39
 800da36:	d029      	beq.n	800da8c <_dtoa_r+0xabc>
 800da38:	f1b9 0f00 	cmp.w	r9, #0
 800da3c:	dd01      	ble.n	800da42 <_dtoa_r+0xa72>
 800da3e:	9b04      	ldr	r3, [sp, #16]
 800da40:	3331      	adds	r3, #49	; 0x31
 800da42:	9a02      	ldr	r2, [sp, #8]
 800da44:	7013      	strb	r3, [r2, #0]
 800da46:	e774      	b.n	800d932 <_dtoa_r+0x962>
 800da48:	4638      	mov	r0, r7
 800da4a:	e7b9      	b.n	800d9c0 <_dtoa_r+0x9f0>
 800da4c:	2201      	movs	r2, #1
 800da4e:	e7e2      	b.n	800da16 <_dtoa_r+0xa46>
 800da50:	f1b9 0f00 	cmp.w	r9, #0
 800da54:	db06      	blt.n	800da64 <_dtoa_r+0xa94>
 800da56:	9905      	ldr	r1, [sp, #20]
 800da58:	ea41 0909 	orr.w	r9, r1, r9
 800da5c:	9906      	ldr	r1, [sp, #24]
 800da5e:	ea59 0101 	orrs.w	r1, r9, r1
 800da62:	d120      	bne.n	800daa6 <_dtoa_r+0xad6>
 800da64:	2a00      	cmp	r2, #0
 800da66:	ddec      	ble.n	800da42 <_dtoa_r+0xa72>
 800da68:	4659      	mov	r1, fp
 800da6a:	2201      	movs	r2, #1
 800da6c:	4620      	mov	r0, r4
 800da6e:	9301      	str	r3, [sp, #4]
 800da70:	f000 fcf6 	bl	800e460 <__lshift>
 800da74:	4631      	mov	r1, r6
 800da76:	4683      	mov	fp, r0
 800da78:	f000 fd5e 	bl	800e538 <__mcmp>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	9b01      	ldr	r3, [sp, #4]
 800da80:	dc02      	bgt.n	800da88 <_dtoa_r+0xab8>
 800da82:	d1de      	bne.n	800da42 <_dtoa_r+0xa72>
 800da84:	07da      	lsls	r2, r3, #31
 800da86:	d5dc      	bpl.n	800da42 <_dtoa_r+0xa72>
 800da88:	2b39      	cmp	r3, #57	; 0x39
 800da8a:	d1d8      	bne.n	800da3e <_dtoa_r+0xa6e>
 800da8c:	9a02      	ldr	r2, [sp, #8]
 800da8e:	2339      	movs	r3, #57	; 0x39
 800da90:	7013      	strb	r3, [r2, #0]
 800da92:	462b      	mov	r3, r5
 800da94:	461d      	mov	r5, r3
 800da96:	3b01      	subs	r3, #1
 800da98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800da9c:	2a39      	cmp	r2, #57	; 0x39
 800da9e:	d050      	beq.n	800db42 <_dtoa_r+0xb72>
 800daa0:	3201      	adds	r2, #1
 800daa2:	701a      	strb	r2, [r3, #0]
 800daa4:	e745      	b.n	800d932 <_dtoa_r+0x962>
 800daa6:	2a00      	cmp	r2, #0
 800daa8:	dd03      	ble.n	800dab2 <_dtoa_r+0xae2>
 800daaa:	2b39      	cmp	r3, #57	; 0x39
 800daac:	d0ee      	beq.n	800da8c <_dtoa_r+0xabc>
 800daae:	3301      	adds	r3, #1
 800dab0:	e7c7      	b.n	800da42 <_dtoa_r+0xa72>
 800dab2:	9a01      	ldr	r2, [sp, #4]
 800dab4:	9907      	ldr	r1, [sp, #28]
 800dab6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800daba:	428a      	cmp	r2, r1
 800dabc:	d02a      	beq.n	800db14 <_dtoa_r+0xb44>
 800dabe:	4659      	mov	r1, fp
 800dac0:	2300      	movs	r3, #0
 800dac2:	220a      	movs	r2, #10
 800dac4:	4620      	mov	r0, r4
 800dac6:	f000 fb1b 	bl	800e100 <__multadd>
 800daca:	45b8      	cmp	r8, r7
 800dacc:	4683      	mov	fp, r0
 800dace:	f04f 0300 	mov.w	r3, #0
 800dad2:	f04f 020a 	mov.w	r2, #10
 800dad6:	4641      	mov	r1, r8
 800dad8:	4620      	mov	r0, r4
 800dada:	d107      	bne.n	800daec <_dtoa_r+0xb1c>
 800dadc:	f000 fb10 	bl	800e100 <__multadd>
 800dae0:	4680      	mov	r8, r0
 800dae2:	4607      	mov	r7, r0
 800dae4:	9b01      	ldr	r3, [sp, #4]
 800dae6:	3301      	adds	r3, #1
 800dae8:	9301      	str	r3, [sp, #4]
 800daea:	e775      	b.n	800d9d8 <_dtoa_r+0xa08>
 800daec:	f000 fb08 	bl	800e100 <__multadd>
 800daf0:	4639      	mov	r1, r7
 800daf2:	4680      	mov	r8, r0
 800daf4:	2300      	movs	r3, #0
 800daf6:	220a      	movs	r2, #10
 800daf8:	4620      	mov	r0, r4
 800dafa:	f000 fb01 	bl	800e100 <__multadd>
 800dafe:	4607      	mov	r7, r0
 800db00:	e7f0      	b.n	800dae4 <_dtoa_r+0xb14>
 800db02:	f1b9 0f00 	cmp.w	r9, #0
 800db06:	9a00      	ldr	r2, [sp, #0]
 800db08:	bfcc      	ite	gt
 800db0a:	464d      	movgt	r5, r9
 800db0c:	2501      	movle	r5, #1
 800db0e:	4415      	add	r5, r2
 800db10:	f04f 0800 	mov.w	r8, #0
 800db14:	4659      	mov	r1, fp
 800db16:	2201      	movs	r2, #1
 800db18:	4620      	mov	r0, r4
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	f000 fca0 	bl	800e460 <__lshift>
 800db20:	4631      	mov	r1, r6
 800db22:	4683      	mov	fp, r0
 800db24:	f000 fd08 	bl	800e538 <__mcmp>
 800db28:	2800      	cmp	r0, #0
 800db2a:	dcb2      	bgt.n	800da92 <_dtoa_r+0xac2>
 800db2c:	d102      	bne.n	800db34 <_dtoa_r+0xb64>
 800db2e:	9b01      	ldr	r3, [sp, #4]
 800db30:	07db      	lsls	r3, r3, #31
 800db32:	d4ae      	bmi.n	800da92 <_dtoa_r+0xac2>
 800db34:	462b      	mov	r3, r5
 800db36:	461d      	mov	r5, r3
 800db38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db3c:	2a30      	cmp	r2, #48	; 0x30
 800db3e:	d0fa      	beq.n	800db36 <_dtoa_r+0xb66>
 800db40:	e6f7      	b.n	800d932 <_dtoa_r+0x962>
 800db42:	9a00      	ldr	r2, [sp, #0]
 800db44:	429a      	cmp	r2, r3
 800db46:	d1a5      	bne.n	800da94 <_dtoa_r+0xac4>
 800db48:	f10a 0a01 	add.w	sl, sl, #1
 800db4c:	2331      	movs	r3, #49	; 0x31
 800db4e:	e779      	b.n	800da44 <_dtoa_r+0xa74>
 800db50:	4b13      	ldr	r3, [pc, #76]	; (800dba0 <_dtoa_r+0xbd0>)
 800db52:	f7ff baaf 	b.w	800d0b4 <_dtoa_r+0xe4>
 800db56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f47f aa86 	bne.w	800d06a <_dtoa_r+0x9a>
 800db5e:	4b11      	ldr	r3, [pc, #68]	; (800dba4 <_dtoa_r+0xbd4>)
 800db60:	f7ff baa8 	b.w	800d0b4 <_dtoa_r+0xe4>
 800db64:	f1b9 0f00 	cmp.w	r9, #0
 800db68:	dc03      	bgt.n	800db72 <_dtoa_r+0xba2>
 800db6a:	9b05      	ldr	r3, [sp, #20]
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	f73f aec9 	bgt.w	800d904 <_dtoa_r+0x934>
 800db72:	9d00      	ldr	r5, [sp, #0]
 800db74:	4631      	mov	r1, r6
 800db76:	4658      	mov	r0, fp
 800db78:	f7ff f99d 	bl	800ceb6 <quorem>
 800db7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800db80:	f805 3b01 	strb.w	r3, [r5], #1
 800db84:	9a00      	ldr	r2, [sp, #0]
 800db86:	1aaa      	subs	r2, r5, r2
 800db88:	4591      	cmp	r9, r2
 800db8a:	ddba      	ble.n	800db02 <_dtoa_r+0xb32>
 800db8c:	4659      	mov	r1, fp
 800db8e:	2300      	movs	r3, #0
 800db90:	220a      	movs	r2, #10
 800db92:	4620      	mov	r0, r4
 800db94:	f000 fab4 	bl	800e100 <__multadd>
 800db98:	4683      	mov	fp, r0
 800db9a:	e7eb      	b.n	800db74 <_dtoa_r+0xba4>
 800db9c:	0800f1dc 	.word	0x0800f1dc
 800dba0:	0800f135 	.word	0x0800f135
 800dba4:	0800f159 	.word	0x0800f159

0800dba8 <__sflush_r>:
 800dba8:	898a      	ldrh	r2, [r1, #12]
 800dbaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbae:	4605      	mov	r5, r0
 800dbb0:	0710      	lsls	r0, r2, #28
 800dbb2:	460c      	mov	r4, r1
 800dbb4:	d458      	bmi.n	800dc68 <__sflush_r+0xc0>
 800dbb6:	684b      	ldr	r3, [r1, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	dc05      	bgt.n	800dbc8 <__sflush_r+0x20>
 800dbbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	dc02      	bgt.n	800dbc8 <__sflush_r+0x20>
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbca:	2e00      	cmp	r6, #0
 800dbcc:	d0f9      	beq.n	800dbc2 <__sflush_r+0x1a>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbd4:	682f      	ldr	r7, [r5, #0]
 800dbd6:	602b      	str	r3, [r5, #0]
 800dbd8:	d032      	beq.n	800dc40 <__sflush_r+0x98>
 800dbda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbdc:	89a3      	ldrh	r3, [r4, #12]
 800dbde:	075a      	lsls	r2, r3, #29
 800dbe0:	d505      	bpl.n	800dbee <__sflush_r+0x46>
 800dbe2:	6863      	ldr	r3, [r4, #4]
 800dbe4:	1ac0      	subs	r0, r0, r3
 800dbe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbe8:	b10b      	cbz	r3, 800dbee <__sflush_r+0x46>
 800dbea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dbec:	1ac0      	subs	r0, r0, r3
 800dbee:	2300      	movs	r3, #0
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbf4:	6a21      	ldr	r1, [r4, #32]
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	47b0      	blx	r6
 800dbfa:	1c43      	adds	r3, r0, #1
 800dbfc:	89a3      	ldrh	r3, [r4, #12]
 800dbfe:	d106      	bne.n	800dc0e <__sflush_r+0x66>
 800dc00:	6829      	ldr	r1, [r5, #0]
 800dc02:	291d      	cmp	r1, #29
 800dc04:	d82c      	bhi.n	800dc60 <__sflush_r+0xb8>
 800dc06:	4a2a      	ldr	r2, [pc, #168]	; (800dcb0 <__sflush_r+0x108>)
 800dc08:	40ca      	lsrs	r2, r1
 800dc0a:	07d6      	lsls	r6, r2, #31
 800dc0c:	d528      	bpl.n	800dc60 <__sflush_r+0xb8>
 800dc0e:	2200      	movs	r2, #0
 800dc10:	6062      	str	r2, [r4, #4]
 800dc12:	04d9      	lsls	r1, r3, #19
 800dc14:	6922      	ldr	r2, [r4, #16]
 800dc16:	6022      	str	r2, [r4, #0]
 800dc18:	d504      	bpl.n	800dc24 <__sflush_r+0x7c>
 800dc1a:	1c42      	adds	r2, r0, #1
 800dc1c:	d101      	bne.n	800dc22 <__sflush_r+0x7a>
 800dc1e:	682b      	ldr	r3, [r5, #0]
 800dc20:	b903      	cbnz	r3, 800dc24 <__sflush_r+0x7c>
 800dc22:	6560      	str	r0, [r4, #84]	; 0x54
 800dc24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc26:	602f      	str	r7, [r5, #0]
 800dc28:	2900      	cmp	r1, #0
 800dc2a:	d0ca      	beq.n	800dbc2 <__sflush_r+0x1a>
 800dc2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc30:	4299      	cmp	r1, r3
 800dc32:	d002      	beq.n	800dc3a <__sflush_r+0x92>
 800dc34:	4628      	mov	r0, r5
 800dc36:	f7fe f91f 	bl	800be78 <_free_r>
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	6360      	str	r0, [r4, #52]	; 0x34
 800dc3e:	e7c1      	b.n	800dbc4 <__sflush_r+0x1c>
 800dc40:	6a21      	ldr	r1, [r4, #32]
 800dc42:	2301      	movs	r3, #1
 800dc44:	4628      	mov	r0, r5
 800dc46:	47b0      	blx	r6
 800dc48:	1c41      	adds	r1, r0, #1
 800dc4a:	d1c7      	bne.n	800dbdc <__sflush_r+0x34>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d0c4      	beq.n	800dbdc <__sflush_r+0x34>
 800dc52:	2b1d      	cmp	r3, #29
 800dc54:	d001      	beq.n	800dc5a <__sflush_r+0xb2>
 800dc56:	2b16      	cmp	r3, #22
 800dc58:	d101      	bne.n	800dc5e <__sflush_r+0xb6>
 800dc5a:	602f      	str	r7, [r5, #0]
 800dc5c:	e7b1      	b.n	800dbc2 <__sflush_r+0x1a>
 800dc5e:	89a3      	ldrh	r3, [r4, #12]
 800dc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc64:	81a3      	strh	r3, [r4, #12]
 800dc66:	e7ad      	b.n	800dbc4 <__sflush_r+0x1c>
 800dc68:	690f      	ldr	r7, [r1, #16]
 800dc6a:	2f00      	cmp	r7, #0
 800dc6c:	d0a9      	beq.n	800dbc2 <__sflush_r+0x1a>
 800dc6e:	0793      	lsls	r3, r2, #30
 800dc70:	680e      	ldr	r6, [r1, #0]
 800dc72:	bf08      	it	eq
 800dc74:	694b      	ldreq	r3, [r1, #20]
 800dc76:	600f      	str	r7, [r1, #0]
 800dc78:	bf18      	it	ne
 800dc7a:	2300      	movne	r3, #0
 800dc7c:	eba6 0807 	sub.w	r8, r6, r7
 800dc80:	608b      	str	r3, [r1, #8]
 800dc82:	f1b8 0f00 	cmp.w	r8, #0
 800dc86:	dd9c      	ble.n	800dbc2 <__sflush_r+0x1a>
 800dc88:	6a21      	ldr	r1, [r4, #32]
 800dc8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc8c:	4643      	mov	r3, r8
 800dc8e:	463a      	mov	r2, r7
 800dc90:	4628      	mov	r0, r5
 800dc92:	47b0      	blx	r6
 800dc94:	2800      	cmp	r0, #0
 800dc96:	dc06      	bgt.n	800dca6 <__sflush_r+0xfe>
 800dc98:	89a3      	ldrh	r3, [r4, #12]
 800dc9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc9e:	81a3      	strh	r3, [r4, #12]
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dca4:	e78e      	b.n	800dbc4 <__sflush_r+0x1c>
 800dca6:	4407      	add	r7, r0
 800dca8:	eba8 0800 	sub.w	r8, r8, r0
 800dcac:	e7e9      	b.n	800dc82 <__sflush_r+0xda>
 800dcae:	bf00      	nop
 800dcb0:	20400001 	.word	0x20400001

0800dcb4 <_fflush_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	690b      	ldr	r3, [r1, #16]
 800dcb8:	4605      	mov	r5, r0
 800dcba:	460c      	mov	r4, r1
 800dcbc:	b913      	cbnz	r3, 800dcc4 <_fflush_r+0x10>
 800dcbe:	2500      	movs	r5, #0
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}
 800dcc4:	b118      	cbz	r0, 800dcce <_fflush_r+0x1a>
 800dcc6:	6983      	ldr	r3, [r0, #24]
 800dcc8:	b90b      	cbnz	r3, 800dcce <_fflush_r+0x1a>
 800dcca:	f000 f887 	bl	800dddc <__sinit>
 800dcce:	4b14      	ldr	r3, [pc, #80]	; (800dd20 <_fflush_r+0x6c>)
 800dcd0:	429c      	cmp	r4, r3
 800dcd2:	d11b      	bne.n	800dd0c <_fflush_r+0x58>
 800dcd4:	686c      	ldr	r4, [r5, #4]
 800dcd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d0ef      	beq.n	800dcbe <_fflush_r+0xa>
 800dcde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dce0:	07d0      	lsls	r0, r2, #31
 800dce2:	d404      	bmi.n	800dcee <_fflush_r+0x3a>
 800dce4:	0599      	lsls	r1, r3, #22
 800dce6:	d402      	bmi.n	800dcee <_fflush_r+0x3a>
 800dce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcea:	f000 f91a 	bl	800df22 <__retarget_lock_acquire_recursive>
 800dcee:	4628      	mov	r0, r5
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	f7ff ff59 	bl	800dba8 <__sflush_r>
 800dcf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcf8:	07da      	lsls	r2, r3, #31
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	d4e0      	bmi.n	800dcc0 <_fflush_r+0xc>
 800dcfe:	89a3      	ldrh	r3, [r4, #12]
 800dd00:	059b      	lsls	r3, r3, #22
 800dd02:	d4dd      	bmi.n	800dcc0 <_fflush_r+0xc>
 800dd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd06:	f000 f90d 	bl	800df24 <__retarget_lock_release_recursive>
 800dd0a:	e7d9      	b.n	800dcc0 <_fflush_r+0xc>
 800dd0c:	4b05      	ldr	r3, [pc, #20]	; (800dd24 <_fflush_r+0x70>)
 800dd0e:	429c      	cmp	r4, r3
 800dd10:	d101      	bne.n	800dd16 <_fflush_r+0x62>
 800dd12:	68ac      	ldr	r4, [r5, #8]
 800dd14:	e7df      	b.n	800dcd6 <_fflush_r+0x22>
 800dd16:	4b04      	ldr	r3, [pc, #16]	; (800dd28 <_fflush_r+0x74>)
 800dd18:	429c      	cmp	r4, r3
 800dd1a:	bf08      	it	eq
 800dd1c:	68ec      	ldreq	r4, [r5, #12]
 800dd1e:	e7da      	b.n	800dcd6 <_fflush_r+0x22>
 800dd20:	0800f210 	.word	0x0800f210
 800dd24:	0800f230 	.word	0x0800f230
 800dd28:	0800f1f0 	.word	0x0800f1f0

0800dd2c <std>:
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	b510      	push	{r4, lr}
 800dd30:	4604      	mov	r4, r0
 800dd32:	e9c0 3300 	strd	r3, r3, [r0]
 800dd36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd3a:	6083      	str	r3, [r0, #8]
 800dd3c:	8181      	strh	r1, [r0, #12]
 800dd3e:	6643      	str	r3, [r0, #100]	; 0x64
 800dd40:	81c2      	strh	r2, [r0, #14]
 800dd42:	6183      	str	r3, [r0, #24]
 800dd44:	4619      	mov	r1, r3
 800dd46:	2208      	movs	r2, #8
 800dd48:	305c      	adds	r0, #92	; 0x5c
 800dd4a:	f7fe f88d 	bl	800be68 <memset>
 800dd4e:	4b05      	ldr	r3, [pc, #20]	; (800dd64 <std+0x38>)
 800dd50:	6263      	str	r3, [r4, #36]	; 0x24
 800dd52:	4b05      	ldr	r3, [pc, #20]	; (800dd68 <std+0x3c>)
 800dd54:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd56:	4b05      	ldr	r3, [pc, #20]	; (800dd6c <std+0x40>)
 800dd58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd5a:	4b05      	ldr	r3, [pc, #20]	; (800dd70 <std+0x44>)
 800dd5c:	6224      	str	r4, [r4, #32]
 800dd5e:	6323      	str	r3, [r4, #48]	; 0x30
 800dd60:	bd10      	pop	{r4, pc}
 800dd62:	bf00      	nop
 800dd64:	0800eae1 	.word	0x0800eae1
 800dd68:	0800eb03 	.word	0x0800eb03
 800dd6c:	0800eb3b 	.word	0x0800eb3b
 800dd70:	0800eb5f 	.word	0x0800eb5f

0800dd74 <_cleanup_r>:
 800dd74:	4901      	ldr	r1, [pc, #4]	; (800dd7c <_cleanup_r+0x8>)
 800dd76:	f000 b8af 	b.w	800ded8 <_fwalk_reent>
 800dd7a:	bf00      	nop
 800dd7c:	0800dcb5 	.word	0x0800dcb5

0800dd80 <__sfmoreglue>:
 800dd80:	b570      	push	{r4, r5, r6, lr}
 800dd82:	1e4a      	subs	r2, r1, #1
 800dd84:	2568      	movs	r5, #104	; 0x68
 800dd86:	4355      	muls	r5, r2
 800dd88:	460e      	mov	r6, r1
 800dd8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd8e:	f7fe f8c3 	bl	800bf18 <_malloc_r>
 800dd92:	4604      	mov	r4, r0
 800dd94:	b140      	cbz	r0, 800dda8 <__sfmoreglue+0x28>
 800dd96:	2100      	movs	r1, #0
 800dd98:	e9c0 1600 	strd	r1, r6, [r0]
 800dd9c:	300c      	adds	r0, #12
 800dd9e:	60a0      	str	r0, [r4, #8]
 800dda0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dda4:	f7fe f860 	bl	800be68 <memset>
 800dda8:	4620      	mov	r0, r4
 800ddaa:	bd70      	pop	{r4, r5, r6, pc}

0800ddac <__sfp_lock_acquire>:
 800ddac:	4801      	ldr	r0, [pc, #4]	; (800ddb4 <__sfp_lock_acquire+0x8>)
 800ddae:	f000 b8b8 	b.w	800df22 <__retarget_lock_acquire_recursive>
 800ddb2:	bf00      	nop
 800ddb4:	20002594 	.word	0x20002594

0800ddb8 <__sfp_lock_release>:
 800ddb8:	4801      	ldr	r0, [pc, #4]	; (800ddc0 <__sfp_lock_release+0x8>)
 800ddba:	f000 b8b3 	b.w	800df24 <__retarget_lock_release_recursive>
 800ddbe:	bf00      	nop
 800ddc0:	20002594 	.word	0x20002594

0800ddc4 <__sinit_lock_acquire>:
 800ddc4:	4801      	ldr	r0, [pc, #4]	; (800ddcc <__sinit_lock_acquire+0x8>)
 800ddc6:	f000 b8ac 	b.w	800df22 <__retarget_lock_acquire_recursive>
 800ddca:	bf00      	nop
 800ddcc:	2000258f 	.word	0x2000258f

0800ddd0 <__sinit_lock_release>:
 800ddd0:	4801      	ldr	r0, [pc, #4]	; (800ddd8 <__sinit_lock_release+0x8>)
 800ddd2:	f000 b8a7 	b.w	800df24 <__retarget_lock_release_recursive>
 800ddd6:	bf00      	nop
 800ddd8:	2000258f 	.word	0x2000258f

0800dddc <__sinit>:
 800dddc:	b510      	push	{r4, lr}
 800ddde:	4604      	mov	r4, r0
 800dde0:	f7ff fff0 	bl	800ddc4 <__sinit_lock_acquire>
 800dde4:	69a3      	ldr	r3, [r4, #24]
 800dde6:	b11b      	cbz	r3, 800ddf0 <__sinit+0x14>
 800dde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddec:	f7ff bff0 	b.w	800ddd0 <__sinit_lock_release>
 800ddf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ddf4:	6523      	str	r3, [r4, #80]	; 0x50
 800ddf6:	4b13      	ldr	r3, [pc, #76]	; (800de44 <__sinit+0x68>)
 800ddf8:	4a13      	ldr	r2, [pc, #76]	; (800de48 <__sinit+0x6c>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	62a2      	str	r2, [r4, #40]	; 0x28
 800ddfe:	42a3      	cmp	r3, r4
 800de00:	bf04      	itt	eq
 800de02:	2301      	moveq	r3, #1
 800de04:	61a3      	streq	r3, [r4, #24]
 800de06:	4620      	mov	r0, r4
 800de08:	f000 f820 	bl	800de4c <__sfp>
 800de0c:	6060      	str	r0, [r4, #4]
 800de0e:	4620      	mov	r0, r4
 800de10:	f000 f81c 	bl	800de4c <__sfp>
 800de14:	60a0      	str	r0, [r4, #8]
 800de16:	4620      	mov	r0, r4
 800de18:	f000 f818 	bl	800de4c <__sfp>
 800de1c:	2200      	movs	r2, #0
 800de1e:	60e0      	str	r0, [r4, #12]
 800de20:	2104      	movs	r1, #4
 800de22:	6860      	ldr	r0, [r4, #4]
 800de24:	f7ff ff82 	bl	800dd2c <std>
 800de28:	68a0      	ldr	r0, [r4, #8]
 800de2a:	2201      	movs	r2, #1
 800de2c:	2109      	movs	r1, #9
 800de2e:	f7ff ff7d 	bl	800dd2c <std>
 800de32:	68e0      	ldr	r0, [r4, #12]
 800de34:	2202      	movs	r2, #2
 800de36:	2112      	movs	r1, #18
 800de38:	f7ff ff78 	bl	800dd2c <std>
 800de3c:	2301      	movs	r3, #1
 800de3e:	61a3      	str	r3, [r4, #24]
 800de40:	e7d2      	b.n	800dde8 <__sinit+0xc>
 800de42:	bf00      	nop
 800de44:	0800f110 	.word	0x0800f110
 800de48:	0800dd75 	.word	0x0800dd75

0800de4c <__sfp>:
 800de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4e:	4607      	mov	r7, r0
 800de50:	f7ff ffac 	bl	800ddac <__sfp_lock_acquire>
 800de54:	4b1e      	ldr	r3, [pc, #120]	; (800ded0 <__sfp+0x84>)
 800de56:	681e      	ldr	r6, [r3, #0]
 800de58:	69b3      	ldr	r3, [r6, #24]
 800de5a:	b913      	cbnz	r3, 800de62 <__sfp+0x16>
 800de5c:	4630      	mov	r0, r6
 800de5e:	f7ff ffbd 	bl	800dddc <__sinit>
 800de62:	3648      	adds	r6, #72	; 0x48
 800de64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de68:	3b01      	subs	r3, #1
 800de6a:	d503      	bpl.n	800de74 <__sfp+0x28>
 800de6c:	6833      	ldr	r3, [r6, #0]
 800de6e:	b30b      	cbz	r3, 800deb4 <__sfp+0x68>
 800de70:	6836      	ldr	r6, [r6, #0]
 800de72:	e7f7      	b.n	800de64 <__sfp+0x18>
 800de74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de78:	b9d5      	cbnz	r5, 800deb0 <__sfp+0x64>
 800de7a:	4b16      	ldr	r3, [pc, #88]	; (800ded4 <__sfp+0x88>)
 800de7c:	60e3      	str	r3, [r4, #12]
 800de7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de82:	6665      	str	r5, [r4, #100]	; 0x64
 800de84:	f000 f84c 	bl	800df20 <__retarget_lock_init_recursive>
 800de88:	f7ff ff96 	bl	800ddb8 <__sfp_lock_release>
 800de8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de94:	6025      	str	r5, [r4, #0]
 800de96:	61a5      	str	r5, [r4, #24]
 800de98:	2208      	movs	r2, #8
 800de9a:	4629      	mov	r1, r5
 800de9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dea0:	f7fd ffe2 	bl	800be68 <memset>
 800dea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800deac:	4620      	mov	r0, r4
 800deae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deb0:	3468      	adds	r4, #104	; 0x68
 800deb2:	e7d9      	b.n	800de68 <__sfp+0x1c>
 800deb4:	2104      	movs	r1, #4
 800deb6:	4638      	mov	r0, r7
 800deb8:	f7ff ff62 	bl	800dd80 <__sfmoreglue>
 800debc:	4604      	mov	r4, r0
 800debe:	6030      	str	r0, [r6, #0]
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d1d5      	bne.n	800de70 <__sfp+0x24>
 800dec4:	f7ff ff78 	bl	800ddb8 <__sfp_lock_release>
 800dec8:	230c      	movs	r3, #12
 800deca:	603b      	str	r3, [r7, #0]
 800decc:	e7ee      	b.n	800deac <__sfp+0x60>
 800dece:	bf00      	nop
 800ded0:	0800f110 	.word	0x0800f110
 800ded4:	ffff0001 	.word	0xffff0001

0800ded8 <_fwalk_reent>:
 800ded8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dedc:	4606      	mov	r6, r0
 800dede:	4688      	mov	r8, r1
 800dee0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dee4:	2700      	movs	r7, #0
 800dee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800deea:	f1b9 0901 	subs.w	r9, r9, #1
 800deee:	d505      	bpl.n	800defc <_fwalk_reent+0x24>
 800def0:	6824      	ldr	r4, [r4, #0]
 800def2:	2c00      	cmp	r4, #0
 800def4:	d1f7      	bne.n	800dee6 <_fwalk_reent+0xe>
 800def6:	4638      	mov	r0, r7
 800def8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800defc:	89ab      	ldrh	r3, [r5, #12]
 800defe:	2b01      	cmp	r3, #1
 800df00:	d907      	bls.n	800df12 <_fwalk_reent+0x3a>
 800df02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df06:	3301      	adds	r3, #1
 800df08:	d003      	beq.n	800df12 <_fwalk_reent+0x3a>
 800df0a:	4629      	mov	r1, r5
 800df0c:	4630      	mov	r0, r6
 800df0e:	47c0      	blx	r8
 800df10:	4307      	orrs	r7, r0
 800df12:	3568      	adds	r5, #104	; 0x68
 800df14:	e7e9      	b.n	800deea <_fwalk_reent+0x12>
	...

0800df18 <_localeconv_r>:
 800df18:	4800      	ldr	r0, [pc, #0]	; (800df1c <_localeconv_r+0x4>)
 800df1a:	4770      	bx	lr
 800df1c:	20000340 	.word	0x20000340

0800df20 <__retarget_lock_init_recursive>:
 800df20:	4770      	bx	lr

0800df22 <__retarget_lock_acquire_recursive>:
 800df22:	4770      	bx	lr

0800df24 <__retarget_lock_release_recursive>:
 800df24:	4770      	bx	lr

0800df26 <__swhatbuf_r>:
 800df26:	b570      	push	{r4, r5, r6, lr}
 800df28:	460e      	mov	r6, r1
 800df2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df2e:	2900      	cmp	r1, #0
 800df30:	b096      	sub	sp, #88	; 0x58
 800df32:	4614      	mov	r4, r2
 800df34:	461d      	mov	r5, r3
 800df36:	da07      	bge.n	800df48 <__swhatbuf_r+0x22>
 800df38:	2300      	movs	r3, #0
 800df3a:	602b      	str	r3, [r5, #0]
 800df3c:	89b3      	ldrh	r3, [r6, #12]
 800df3e:	061a      	lsls	r2, r3, #24
 800df40:	d410      	bmi.n	800df64 <__swhatbuf_r+0x3e>
 800df42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df46:	e00e      	b.n	800df66 <__swhatbuf_r+0x40>
 800df48:	466a      	mov	r2, sp
 800df4a:	f000 fe2f 	bl	800ebac <_fstat_r>
 800df4e:	2800      	cmp	r0, #0
 800df50:	dbf2      	blt.n	800df38 <__swhatbuf_r+0x12>
 800df52:	9a01      	ldr	r2, [sp, #4]
 800df54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df5c:	425a      	negs	r2, r3
 800df5e:	415a      	adcs	r2, r3
 800df60:	602a      	str	r2, [r5, #0]
 800df62:	e7ee      	b.n	800df42 <__swhatbuf_r+0x1c>
 800df64:	2340      	movs	r3, #64	; 0x40
 800df66:	2000      	movs	r0, #0
 800df68:	6023      	str	r3, [r4, #0]
 800df6a:	b016      	add	sp, #88	; 0x58
 800df6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800df70 <__smakebuf_r>:
 800df70:	898b      	ldrh	r3, [r1, #12]
 800df72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df74:	079d      	lsls	r5, r3, #30
 800df76:	4606      	mov	r6, r0
 800df78:	460c      	mov	r4, r1
 800df7a:	d507      	bpl.n	800df8c <__smakebuf_r+0x1c>
 800df7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df80:	6023      	str	r3, [r4, #0]
 800df82:	6123      	str	r3, [r4, #16]
 800df84:	2301      	movs	r3, #1
 800df86:	6163      	str	r3, [r4, #20]
 800df88:	b002      	add	sp, #8
 800df8a:	bd70      	pop	{r4, r5, r6, pc}
 800df8c:	ab01      	add	r3, sp, #4
 800df8e:	466a      	mov	r2, sp
 800df90:	f7ff ffc9 	bl	800df26 <__swhatbuf_r>
 800df94:	9900      	ldr	r1, [sp, #0]
 800df96:	4605      	mov	r5, r0
 800df98:	4630      	mov	r0, r6
 800df9a:	f7fd ffbd 	bl	800bf18 <_malloc_r>
 800df9e:	b948      	cbnz	r0, 800dfb4 <__smakebuf_r+0x44>
 800dfa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfa4:	059a      	lsls	r2, r3, #22
 800dfa6:	d4ef      	bmi.n	800df88 <__smakebuf_r+0x18>
 800dfa8:	f023 0303 	bic.w	r3, r3, #3
 800dfac:	f043 0302 	orr.w	r3, r3, #2
 800dfb0:	81a3      	strh	r3, [r4, #12]
 800dfb2:	e7e3      	b.n	800df7c <__smakebuf_r+0xc>
 800dfb4:	4b0d      	ldr	r3, [pc, #52]	; (800dfec <__smakebuf_r+0x7c>)
 800dfb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800dfb8:	89a3      	ldrh	r3, [r4, #12]
 800dfba:	6020      	str	r0, [r4, #0]
 800dfbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfc0:	81a3      	strh	r3, [r4, #12]
 800dfc2:	9b00      	ldr	r3, [sp, #0]
 800dfc4:	6163      	str	r3, [r4, #20]
 800dfc6:	9b01      	ldr	r3, [sp, #4]
 800dfc8:	6120      	str	r0, [r4, #16]
 800dfca:	b15b      	cbz	r3, 800dfe4 <__smakebuf_r+0x74>
 800dfcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	f000 fdfd 	bl	800ebd0 <_isatty_r>
 800dfd6:	b128      	cbz	r0, 800dfe4 <__smakebuf_r+0x74>
 800dfd8:	89a3      	ldrh	r3, [r4, #12]
 800dfda:	f023 0303 	bic.w	r3, r3, #3
 800dfde:	f043 0301 	orr.w	r3, r3, #1
 800dfe2:	81a3      	strh	r3, [r4, #12]
 800dfe4:	89a0      	ldrh	r0, [r4, #12]
 800dfe6:	4305      	orrs	r5, r0
 800dfe8:	81a5      	strh	r5, [r4, #12]
 800dfea:	e7cd      	b.n	800df88 <__smakebuf_r+0x18>
 800dfec:	0800dd75 	.word	0x0800dd75

0800dff0 <memmove>:
 800dff0:	4288      	cmp	r0, r1
 800dff2:	b510      	push	{r4, lr}
 800dff4:	eb01 0402 	add.w	r4, r1, r2
 800dff8:	d902      	bls.n	800e000 <memmove+0x10>
 800dffa:	4284      	cmp	r4, r0
 800dffc:	4623      	mov	r3, r4
 800dffe:	d807      	bhi.n	800e010 <memmove+0x20>
 800e000:	1e43      	subs	r3, r0, #1
 800e002:	42a1      	cmp	r1, r4
 800e004:	d008      	beq.n	800e018 <memmove+0x28>
 800e006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e00a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e00e:	e7f8      	b.n	800e002 <memmove+0x12>
 800e010:	4402      	add	r2, r0
 800e012:	4601      	mov	r1, r0
 800e014:	428a      	cmp	r2, r1
 800e016:	d100      	bne.n	800e01a <memmove+0x2a>
 800e018:	bd10      	pop	{r4, pc}
 800e01a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e01e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e022:	e7f7      	b.n	800e014 <memmove+0x24>

0800e024 <__malloc_lock>:
 800e024:	4801      	ldr	r0, [pc, #4]	; (800e02c <__malloc_lock+0x8>)
 800e026:	f7ff bf7c 	b.w	800df22 <__retarget_lock_acquire_recursive>
 800e02a:	bf00      	nop
 800e02c:	20002590 	.word	0x20002590

0800e030 <__malloc_unlock>:
 800e030:	4801      	ldr	r0, [pc, #4]	; (800e038 <__malloc_unlock+0x8>)
 800e032:	f7ff bf77 	b.w	800df24 <__retarget_lock_release_recursive>
 800e036:	bf00      	nop
 800e038:	20002590 	.word	0x20002590

0800e03c <_Balloc>:
 800e03c:	b570      	push	{r4, r5, r6, lr}
 800e03e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e040:	4604      	mov	r4, r0
 800e042:	460d      	mov	r5, r1
 800e044:	b976      	cbnz	r6, 800e064 <_Balloc+0x28>
 800e046:	2010      	movs	r0, #16
 800e048:	f7fd fef8 	bl	800be3c <malloc>
 800e04c:	4602      	mov	r2, r0
 800e04e:	6260      	str	r0, [r4, #36]	; 0x24
 800e050:	b920      	cbnz	r0, 800e05c <_Balloc+0x20>
 800e052:	4b18      	ldr	r3, [pc, #96]	; (800e0b4 <_Balloc+0x78>)
 800e054:	4818      	ldr	r0, [pc, #96]	; (800e0b8 <_Balloc+0x7c>)
 800e056:	2166      	movs	r1, #102	; 0x66
 800e058:	f7fd fe92 	bl	800bd80 <__assert_func>
 800e05c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e060:	6006      	str	r6, [r0, #0]
 800e062:	60c6      	str	r6, [r0, #12]
 800e064:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e066:	68f3      	ldr	r3, [r6, #12]
 800e068:	b183      	cbz	r3, 800e08c <_Balloc+0x50>
 800e06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e072:	b9b8      	cbnz	r0, 800e0a4 <_Balloc+0x68>
 800e074:	2101      	movs	r1, #1
 800e076:	fa01 f605 	lsl.w	r6, r1, r5
 800e07a:	1d72      	adds	r2, r6, #5
 800e07c:	0092      	lsls	r2, r2, #2
 800e07e:	4620      	mov	r0, r4
 800e080:	f000 fb5a 	bl	800e738 <_calloc_r>
 800e084:	b160      	cbz	r0, 800e0a0 <_Balloc+0x64>
 800e086:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e08a:	e00e      	b.n	800e0aa <_Balloc+0x6e>
 800e08c:	2221      	movs	r2, #33	; 0x21
 800e08e:	2104      	movs	r1, #4
 800e090:	4620      	mov	r0, r4
 800e092:	f000 fb51 	bl	800e738 <_calloc_r>
 800e096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e098:	60f0      	str	r0, [r6, #12]
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1e4      	bne.n	800e06a <_Balloc+0x2e>
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	bd70      	pop	{r4, r5, r6, pc}
 800e0a4:	6802      	ldr	r2, [r0, #0]
 800e0a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0b0:	e7f7      	b.n	800e0a2 <_Balloc+0x66>
 800e0b2:	bf00      	nop
 800e0b4:	0800f166 	.word	0x0800f166
 800e0b8:	0800f250 	.word	0x0800f250

0800e0bc <_Bfree>:
 800e0bc:	b570      	push	{r4, r5, r6, lr}
 800e0be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0c0:	4605      	mov	r5, r0
 800e0c2:	460c      	mov	r4, r1
 800e0c4:	b976      	cbnz	r6, 800e0e4 <_Bfree+0x28>
 800e0c6:	2010      	movs	r0, #16
 800e0c8:	f7fd feb8 	bl	800be3c <malloc>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	6268      	str	r0, [r5, #36]	; 0x24
 800e0d0:	b920      	cbnz	r0, 800e0dc <_Bfree+0x20>
 800e0d2:	4b09      	ldr	r3, [pc, #36]	; (800e0f8 <_Bfree+0x3c>)
 800e0d4:	4809      	ldr	r0, [pc, #36]	; (800e0fc <_Bfree+0x40>)
 800e0d6:	218a      	movs	r1, #138	; 0x8a
 800e0d8:	f7fd fe52 	bl	800bd80 <__assert_func>
 800e0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0e0:	6006      	str	r6, [r0, #0]
 800e0e2:	60c6      	str	r6, [r0, #12]
 800e0e4:	b13c      	cbz	r4, 800e0f6 <_Bfree+0x3a>
 800e0e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e0e8:	6862      	ldr	r2, [r4, #4]
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0f0:	6021      	str	r1, [r4, #0]
 800e0f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0f6:	bd70      	pop	{r4, r5, r6, pc}
 800e0f8:	0800f166 	.word	0x0800f166
 800e0fc:	0800f250 	.word	0x0800f250

0800e100 <__multadd>:
 800e100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e104:	690e      	ldr	r6, [r1, #16]
 800e106:	4607      	mov	r7, r0
 800e108:	4698      	mov	r8, r3
 800e10a:	460c      	mov	r4, r1
 800e10c:	f101 0014 	add.w	r0, r1, #20
 800e110:	2300      	movs	r3, #0
 800e112:	6805      	ldr	r5, [r0, #0]
 800e114:	b2a9      	uxth	r1, r5
 800e116:	fb02 8101 	mla	r1, r2, r1, r8
 800e11a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e11e:	0c2d      	lsrs	r5, r5, #16
 800e120:	fb02 c505 	mla	r5, r2, r5, ip
 800e124:	b289      	uxth	r1, r1
 800e126:	3301      	adds	r3, #1
 800e128:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e12c:	429e      	cmp	r6, r3
 800e12e:	f840 1b04 	str.w	r1, [r0], #4
 800e132:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e136:	dcec      	bgt.n	800e112 <__multadd+0x12>
 800e138:	f1b8 0f00 	cmp.w	r8, #0
 800e13c:	d022      	beq.n	800e184 <__multadd+0x84>
 800e13e:	68a3      	ldr	r3, [r4, #8]
 800e140:	42b3      	cmp	r3, r6
 800e142:	dc19      	bgt.n	800e178 <__multadd+0x78>
 800e144:	6861      	ldr	r1, [r4, #4]
 800e146:	4638      	mov	r0, r7
 800e148:	3101      	adds	r1, #1
 800e14a:	f7ff ff77 	bl	800e03c <_Balloc>
 800e14e:	4605      	mov	r5, r0
 800e150:	b928      	cbnz	r0, 800e15e <__multadd+0x5e>
 800e152:	4602      	mov	r2, r0
 800e154:	4b0d      	ldr	r3, [pc, #52]	; (800e18c <__multadd+0x8c>)
 800e156:	480e      	ldr	r0, [pc, #56]	; (800e190 <__multadd+0x90>)
 800e158:	21b5      	movs	r1, #181	; 0xb5
 800e15a:	f7fd fe11 	bl	800bd80 <__assert_func>
 800e15e:	6922      	ldr	r2, [r4, #16]
 800e160:	3202      	adds	r2, #2
 800e162:	f104 010c 	add.w	r1, r4, #12
 800e166:	0092      	lsls	r2, r2, #2
 800e168:	300c      	adds	r0, #12
 800e16a:	f7fd fe6f 	bl	800be4c <memcpy>
 800e16e:	4621      	mov	r1, r4
 800e170:	4638      	mov	r0, r7
 800e172:	f7ff ffa3 	bl	800e0bc <_Bfree>
 800e176:	462c      	mov	r4, r5
 800e178:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e17c:	3601      	adds	r6, #1
 800e17e:	f8c3 8014 	str.w	r8, [r3, #20]
 800e182:	6126      	str	r6, [r4, #16]
 800e184:	4620      	mov	r0, r4
 800e186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e18a:	bf00      	nop
 800e18c:	0800f1dc 	.word	0x0800f1dc
 800e190:	0800f250 	.word	0x0800f250

0800e194 <__hi0bits>:
 800e194:	0c03      	lsrs	r3, r0, #16
 800e196:	041b      	lsls	r3, r3, #16
 800e198:	b9d3      	cbnz	r3, 800e1d0 <__hi0bits+0x3c>
 800e19a:	0400      	lsls	r0, r0, #16
 800e19c:	2310      	movs	r3, #16
 800e19e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e1a2:	bf04      	itt	eq
 800e1a4:	0200      	lsleq	r0, r0, #8
 800e1a6:	3308      	addeq	r3, #8
 800e1a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e1ac:	bf04      	itt	eq
 800e1ae:	0100      	lsleq	r0, r0, #4
 800e1b0:	3304      	addeq	r3, #4
 800e1b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e1b6:	bf04      	itt	eq
 800e1b8:	0080      	lsleq	r0, r0, #2
 800e1ba:	3302      	addeq	r3, #2
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	db05      	blt.n	800e1cc <__hi0bits+0x38>
 800e1c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e1c4:	f103 0301 	add.w	r3, r3, #1
 800e1c8:	bf08      	it	eq
 800e1ca:	2320      	moveq	r3, #32
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	4770      	bx	lr
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	e7e4      	b.n	800e19e <__hi0bits+0xa>

0800e1d4 <__lo0bits>:
 800e1d4:	6803      	ldr	r3, [r0, #0]
 800e1d6:	f013 0207 	ands.w	r2, r3, #7
 800e1da:	4601      	mov	r1, r0
 800e1dc:	d00b      	beq.n	800e1f6 <__lo0bits+0x22>
 800e1de:	07da      	lsls	r2, r3, #31
 800e1e0:	d424      	bmi.n	800e22c <__lo0bits+0x58>
 800e1e2:	0798      	lsls	r0, r3, #30
 800e1e4:	bf49      	itett	mi
 800e1e6:	085b      	lsrmi	r3, r3, #1
 800e1e8:	089b      	lsrpl	r3, r3, #2
 800e1ea:	2001      	movmi	r0, #1
 800e1ec:	600b      	strmi	r3, [r1, #0]
 800e1ee:	bf5c      	itt	pl
 800e1f0:	600b      	strpl	r3, [r1, #0]
 800e1f2:	2002      	movpl	r0, #2
 800e1f4:	4770      	bx	lr
 800e1f6:	b298      	uxth	r0, r3
 800e1f8:	b9b0      	cbnz	r0, 800e228 <__lo0bits+0x54>
 800e1fa:	0c1b      	lsrs	r3, r3, #16
 800e1fc:	2010      	movs	r0, #16
 800e1fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e202:	bf04      	itt	eq
 800e204:	0a1b      	lsreq	r3, r3, #8
 800e206:	3008      	addeq	r0, #8
 800e208:	071a      	lsls	r2, r3, #28
 800e20a:	bf04      	itt	eq
 800e20c:	091b      	lsreq	r3, r3, #4
 800e20e:	3004      	addeq	r0, #4
 800e210:	079a      	lsls	r2, r3, #30
 800e212:	bf04      	itt	eq
 800e214:	089b      	lsreq	r3, r3, #2
 800e216:	3002      	addeq	r0, #2
 800e218:	07da      	lsls	r2, r3, #31
 800e21a:	d403      	bmi.n	800e224 <__lo0bits+0x50>
 800e21c:	085b      	lsrs	r3, r3, #1
 800e21e:	f100 0001 	add.w	r0, r0, #1
 800e222:	d005      	beq.n	800e230 <__lo0bits+0x5c>
 800e224:	600b      	str	r3, [r1, #0]
 800e226:	4770      	bx	lr
 800e228:	4610      	mov	r0, r2
 800e22a:	e7e8      	b.n	800e1fe <__lo0bits+0x2a>
 800e22c:	2000      	movs	r0, #0
 800e22e:	4770      	bx	lr
 800e230:	2020      	movs	r0, #32
 800e232:	4770      	bx	lr

0800e234 <__i2b>:
 800e234:	b510      	push	{r4, lr}
 800e236:	460c      	mov	r4, r1
 800e238:	2101      	movs	r1, #1
 800e23a:	f7ff feff 	bl	800e03c <_Balloc>
 800e23e:	4602      	mov	r2, r0
 800e240:	b928      	cbnz	r0, 800e24e <__i2b+0x1a>
 800e242:	4b05      	ldr	r3, [pc, #20]	; (800e258 <__i2b+0x24>)
 800e244:	4805      	ldr	r0, [pc, #20]	; (800e25c <__i2b+0x28>)
 800e246:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e24a:	f7fd fd99 	bl	800bd80 <__assert_func>
 800e24e:	2301      	movs	r3, #1
 800e250:	6144      	str	r4, [r0, #20]
 800e252:	6103      	str	r3, [r0, #16]
 800e254:	bd10      	pop	{r4, pc}
 800e256:	bf00      	nop
 800e258:	0800f1dc 	.word	0x0800f1dc
 800e25c:	0800f250 	.word	0x0800f250

0800e260 <__multiply>:
 800e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e264:	4614      	mov	r4, r2
 800e266:	690a      	ldr	r2, [r1, #16]
 800e268:	6923      	ldr	r3, [r4, #16]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	bfb8      	it	lt
 800e26e:	460b      	movlt	r3, r1
 800e270:	460d      	mov	r5, r1
 800e272:	bfbc      	itt	lt
 800e274:	4625      	movlt	r5, r4
 800e276:	461c      	movlt	r4, r3
 800e278:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e27c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e280:	68ab      	ldr	r3, [r5, #8]
 800e282:	6869      	ldr	r1, [r5, #4]
 800e284:	eb0a 0709 	add.w	r7, sl, r9
 800e288:	42bb      	cmp	r3, r7
 800e28a:	b085      	sub	sp, #20
 800e28c:	bfb8      	it	lt
 800e28e:	3101      	addlt	r1, #1
 800e290:	f7ff fed4 	bl	800e03c <_Balloc>
 800e294:	b930      	cbnz	r0, 800e2a4 <__multiply+0x44>
 800e296:	4602      	mov	r2, r0
 800e298:	4b42      	ldr	r3, [pc, #264]	; (800e3a4 <__multiply+0x144>)
 800e29a:	4843      	ldr	r0, [pc, #268]	; (800e3a8 <__multiply+0x148>)
 800e29c:	f240 115d 	movw	r1, #349	; 0x15d
 800e2a0:	f7fd fd6e 	bl	800bd80 <__assert_func>
 800e2a4:	f100 0614 	add.w	r6, r0, #20
 800e2a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e2ac:	4633      	mov	r3, r6
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	4543      	cmp	r3, r8
 800e2b2:	d31e      	bcc.n	800e2f2 <__multiply+0x92>
 800e2b4:	f105 0c14 	add.w	ip, r5, #20
 800e2b8:	f104 0314 	add.w	r3, r4, #20
 800e2bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e2c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e2c4:	9202      	str	r2, [sp, #8]
 800e2c6:	ebac 0205 	sub.w	r2, ip, r5
 800e2ca:	3a15      	subs	r2, #21
 800e2cc:	f022 0203 	bic.w	r2, r2, #3
 800e2d0:	3204      	adds	r2, #4
 800e2d2:	f105 0115 	add.w	r1, r5, #21
 800e2d6:	458c      	cmp	ip, r1
 800e2d8:	bf38      	it	cc
 800e2da:	2204      	movcc	r2, #4
 800e2dc:	9201      	str	r2, [sp, #4]
 800e2de:	9a02      	ldr	r2, [sp, #8]
 800e2e0:	9303      	str	r3, [sp, #12]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d808      	bhi.n	800e2f8 <__multiply+0x98>
 800e2e6:	2f00      	cmp	r7, #0
 800e2e8:	dc55      	bgt.n	800e396 <__multiply+0x136>
 800e2ea:	6107      	str	r7, [r0, #16]
 800e2ec:	b005      	add	sp, #20
 800e2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f2:	f843 2b04 	str.w	r2, [r3], #4
 800e2f6:	e7db      	b.n	800e2b0 <__multiply+0x50>
 800e2f8:	f8b3 a000 	ldrh.w	sl, [r3]
 800e2fc:	f1ba 0f00 	cmp.w	sl, #0
 800e300:	d020      	beq.n	800e344 <__multiply+0xe4>
 800e302:	f105 0e14 	add.w	lr, r5, #20
 800e306:	46b1      	mov	r9, r6
 800e308:	2200      	movs	r2, #0
 800e30a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e30e:	f8d9 b000 	ldr.w	fp, [r9]
 800e312:	b2a1      	uxth	r1, r4
 800e314:	fa1f fb8b 	uxth.w	fp, fp
 800e318:	fb0a b101 	mla	r1, sl, r1, fp
 800e31c:	4411      	add	r1, r2
 800e31e:	f8d9 2000 	ldr.w	r2, [r9]
 800e322:	0c24      	lsrs	r4, r4, #16
 800e324:	0c12      	lsrs	r2, r2, #16
 800e326:	fb0a 2404 	mla	r4, sl, r4, r2
 800e32a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e32e:	b289      	uxth	r1, r1
 800e330:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e334:	45f4      	cmp	ip, lr
 800e336:	f849 1b04 	str.w	r1, [r9], #4
 800e33a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e33e:	d8e4      	bhi.n	800e30a <__multiply+0xaa>
 800e340:	9901      	ldr	r1, [sp, #4]
 800e342:	5072      	str	r2, [r6, r1]
 800e344:	9a03      	ldr	r2, [sp, #12]
 800e346:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e34a:	3304      	adds	r3, #4
 800e34c:	f1b9 0f00 	cmp.w	r9, #0
 800e350:	d01f      	beq.n	800e392 <__multiply+0x132>
 800e352:	6834      	ldr	r4, [r6, #0]
 800e354:	f105 0114 	add.w	r1, r5, #20
 800e358:	46b6      	mov	lr, r6
 800e35a:	f04f 0a00 	mov.w	sl, #0
 800e35e:	880a      	ldrh	r2, [r1, #0]
 800e360:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e364:	fb09 b202 	mla	r2, r9, r2, fp
 800e368:	4492      	add	sl, r2
 800e36a:	b2a4      	uxth	r4, r4
 800e36c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e370:	f84e 4b04 	str.w	r4, [lr], #4
 800e374:	f851 4b04 	ldr.w	r4, [r1], #4
 800e378:	f8be 2000 	ldrh.w	r2, [lr]
 800e37c:	0c24      	lsrs	r4, r4, #16
 800e37e:	fb09 2404 	mla	r4, r9, r4, r2
 800e382:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e386:	458c      	cmp	ip, r1
 800e388:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e38c:	d8e7      	bhi.n	800e35e <__multiply+0xfe>
 800e38e:	9a01      	ldr	r2, [sp, #4]
 800e390:	50b4      	str	r4, [r6, r2]
 800e392:	3604      	adds	r6, #4
 800e394:	e7a3      	b.n	800e2de <__multiply+0x7e>
 800e396:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1a5      	bne.n	800e2ea <__multiply+0x8a>
 800e39e:	3f01      	subs	r7, #1
 800e3a0:	e7a1      	b.n	800e2e6 <__multiply+0x86>
 800e3a2:	bf00      	nop
 800e3a4:	0800f1dc 	.word	0x0800f1dc
 800e3a8:	0800f250 	.word	0x0800f250

0800e3ac <__pow5mult>:
 800e3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3b0:	4615      	mov	r5, r2
 800e3b2:	f012 0203 	ands.w	r2, r2, #3
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	460f      	mov	r7, r1
 800e3ba:	d007      	beq.n	800e3cc <__pow5mult+0x20>
 800e3bc:	4c25      	ldr	r4, [pc, #148]	; (800e454 <__pow5mult+0xa8>)
 800e3be:	3a01      	subs	r2, #1
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e3c6:	f7ff fe9b 	bl	800e100 <__multadd>
 800e3ca:	4607      	mov	r7, r0
 800e3cc:	10ad      	asrs	r5, r5, #2
 800e3ce:	d03d      	beq.n	800e44c <__pow5mult+0xa0>
 800e3d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e3d2:	b97c      	cbnz	r4, 800e3f4 <__pow5mult+0x48>
 800e3d4:	2010      	movs	r0, #16
 800e3d6:	f7fd fd31 	bl	800be3c <malloc>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	6270      	str	r0, [r6, #36]	; 0x24
 800e3de:	b928      	cbnz	r0, 800e3ec <__pow5mult+0x40>
 800e3e0:	4b1d      	ldr	r3, [pc, #116]	; (800e458 <__pow5mult+0xac>)
 800e3e2:	481e      	ldr	r0, [pc, #120]	; (800e45c <__pow5mult+0xb0>)
 800e3e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e3e8:	f7fd fcca 	bl	800bd80 <__assert_func>
 800e3ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e3f0:	6004      	str	r4, [r0, #0]
 800e3f2:	60c4      	str	r4, [r0, #12]
 800e3f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e3f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e3fc:	b94c      	cbnz	r4, 800e412 <__pow5mult+0x66>
 800e3fe:	f240 2171 	movw	r1, #625	; 0x271
 800e402:	4630      	mov	r0, r6
 800e404:	f7ff ff16 	bl	800e234 <__i2b>
 800e408:	2300      	movs	r3, #0
 800e40a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e40e:	4604      	mov	r4, r0
 800e410:	6003      	str	r3, [r0, #0]
 800e412:	f04f 0900 	mov.w	r9, #0
 800e416:	07eb      	lsls	r3, r5, #31
 800e418:	d50a      	bpl.n	800e430 <__pow5mult+0x84>
 800e41a:	4639      	mov	r1, r7
 800e41c:	4622      	mov	r2, r4
 800e41e:	4630      	mov	r0, r6
 800e420:	f7ff ff1e 	bl	800e260 <__multiply>
 800e424:	4639      	mov	r1, r7
 800e426:	4680      	mov	r8, r0
 800e428:	4630      	mov	r0, r6
 800e42a:	f7ff fe47 	bl	800e0bc <_Bfree>
 800e42e:	4647      	mov	r7, r8
 800e430:	106d      	asrs	r5, r5, #1
 800e432:	d00b      	beq.n	800e44c <__pow5mult+0xa0>
 800e434:	6820      	ldr	r0, [r4, #0]
 800e436:	b938      	cbnz	r0, 800e448 <__pow5mult+0x9c>
 800e438:	4622      	mov	r2, r4
 800e43a:	4621      	mov	r1, r4
 800e43c:	4630      	mov	r0, r6
 800e43e:	f7ff ff0f 	bl	800e260 <__multiply>
 800e442:	6020      	str	r0, [r4, #0]
 800e444:	f8c0 9000 	str.w	r9, [r0]
 800e448:	4604      	mov	r4, r0
 800e44a:	e7e4      	b.n	800e416 <__pow5mult+0x6a>
 800e44c:	4638      	mov	r0, r7
 800e44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e452:	bf00      	nop
 800e454:	0800f3a0 	.word	0x0800f3a0
 800e458:	0800f166 	.word	0x0800f166
 800e45c:	0800f250 	.word	0x0800f250

0800e460 <__lshift>:
 800e460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e464:	460c      	mov	r4, r1
 800e466:	6849      	ldr	r1, [r1, #4]
 800e468:	6923      	ldr	r3, [r4, #16]
 800e46a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e46e:	68a3      	ldr	r3, [r4, #8]
 800e470:	4607      	mov	r7, r0
 800e472:	4691      	mov	r9, r2
 800e474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e478:	f108 0601 	add.w	r6, r8, #1
 800e47c:	42b3      	cmp	r3, r6
 800e47e:	db0b      	blt.n	800e498 <__lshift+0x38>
 800e480:	4638      	mov	r0, r7
 800e482:	f7ff fddb 	bl	800e03c <_Balloc>
 800e486:	4605      	mov	r5, r0
 800e488:	b948      	cbnz	r0, 800e49e <__lshift+0x3e>
 800e48a:	4602      	mov	r2, r0
 800e48c:	4b28      	ldr	r3, [pc, #160]	; (800e530 <__lshift+0xd0>)
 800e48e:	4829      	ldr	r0, [pc, #164]	; (800e534 <__lshift+0xd4>)
 800e490:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e494:	f7fd fc74 	bl	800bd80 <__assert_func>
 800e498:	3101      	adds	r1, #1
 800e49a:	005b      	lsls	r3, r3, #1
 800e49c:	e7ee      	b.n	800e47c <__lshift+0x1c>
 800e49e:	2300      	movs	r3, #0
 800e4a0:	f100 0114 	add.w	r1, r0, #20
 800e4a4:	f100 0210 	add.w	r2, r0, #16
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	4553      	cmp	r3, sl
 800e4ac:	db33      	blt.n	800e516 <__lshift+0xb6>
 800e4ae:	6920      	ldr	r0, [r4, #16]
 800e4b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4b4:	f104 0314 	add.w	r3, r4, #20
 800e4b8:	f019 091f 	ands.w	r9, r9, #31
 800e4bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e4c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e4c4:	d02b      	beq.n	800e51e <__lshift+0xbe>
 800e4c6:	f1c9 0e20 	rsb	lr, r9, #32
 800e4ca:	468a      	mov	sl, r1
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	6818      	ldr	r0, [r3, #0]
 800e4d0:	fa00 f009 	lsl.w	r0, r0, r9
 800e4d4:	4302      	orrs	r2, r0
 800e4d6:	f84a 2b04 	str.w	r2, [sl], #4
 800e4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4de:	459c      	cmp	ip, r3
 800e4e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e4e4:	d8f3      	bhi.n	800e4ce <__lshift+0x6e>
 800e4e6:	ebac 0304 	sub.w	r3, ip, r4
 800e4ea:	3b15      	subs	r3, #21
 800e4ec:	f023 0303 	bic.w	r3, r3, #3
 800e4f0:	3304      	adds	r3, #4
 800e4f2:	f104 0015 	add.w	r0, r4, #21
 800e4f6:	4584      	cmp	ip, r0
 800e4f8:	bf38      	it	cc
 800e4fa:	2304      	movcc	r3, #4
 800e4fc:	50ca      	str	r2, [r1, r3]
 800e4fe:	b10a      	cbz	r2, 800e504 <__lshift+0xa4>
 800e500:	f108 0602 	add.w	r6, r8, #2
 800e504:	3e01      	subs	r6, #1
 800e506:	4638      	mov	r0, r7
 800e508:	612e      	str	r6, [r5, #16]
 800e50a:	4621      	mov	r1, r4
 800e50c:	f7ff fdd6 	bl	800e0bc <_Bfree>
 800e510:	4628      	mov	r0, r5
 800e512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e516:	f842 0f04 	str.w	r0, [r2, #4]!
 800e51a:	3301      	adds	r3, #1
 800e51c:	e7c5      	b.n	800e4aa <__lshift+0x4a>
 800e51e:	3904      	subs	r1, #4
 800e520:	f853 2b04 	ldr.w	r2, [r3], #4
 800e524:	f841 2f04 	str.w	r2, [r1, #4]!
 800e528:	459c      	cmp	ip, r3
 800e52a:	d8f9      	bhi.n	800e520 <__lshift+0xc0>
 800e52c:	e7ea      	b.n	800e504 <__lshift+0xa4>
 800e52e:	bf00      	nop
 800e530:	0800f1dc 	.word	0x0800f1dc
 800e534:	0800f250 	.word	0x0800f250

0800e538 <__mcmp>:
 800e538:	b530      	push	{r4, r5, lr}
 800e53a:	6902      	ldr	r2, [r0, #16]
 800e53c:	690c      	ldr	r4, [r1, #16]
 800e53e:	1b12      	subs	r2, r2, r4
 800e540:	d10e      	bne.n	800e560 <__mcmp+0x28>
 800e542:	f100 0314 	add.w	r3, r0, #20
 800e546:	3114      	adds	r1, #20
 800e548:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e54c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e550:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e554:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e558:	42a5      	cmp	r5, r4
 800e55a:	d003      	beq.n	800e564 <__mcmp+0x2c>
 800e55c:	d305      	bcc.n	800e56a <__mcmp+0x32>
 800e55e:	2201      	movs	r2, #1
 800e560:	4610      	mov	r0, r2
 800e562:	bd30      	pop	{r4, r5, pc}
 800e564:	4283      	cmp	r3, r0
 800e566:	d3f3      	bcc.n	800e550 <__mcmp+0x18>
 800e568:	e7fa      	b.n	800e560 <__mcmp+0x28>
 800e56a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e56e:	e7f7      	b.n	800e560 <__mcmp+0x28>

0800e570 <__mdiff>:
 800e570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e574:	460c      	mov	r4, r1
 800e576:	4606      	mov	r6, r0
 800e578:	4611      	mov	r1, r2
 800e57a:	4620      	mov	r0, r4
 800e57c:	4617      	mov	r7, r2
 800e57e:	f7ff ffdb 	bl	800e538 <__mcmp>
 800e582:	1e05      	subs	r5, r0, #0
 800e584:	d110      	bne.n	800e5a8 <__mdiff+0x38>
 800e586:	4629      	mov	r1, r5
 800e588:	4630      	mov	r0, r6
 800e58a:	f7ff fd57 	bl	800e03c <_Balloc>
 800e58e:	b930      	cbnz	r0, 800e59e <__mdiff+0x2e>
 800e590:	4b39      	ldr	r3, [pc, #228]	; (800e678 <__mdiff+0x108>)
 800e592:	4602      	mov	r2, r0
 800e594:	f240 2132 	movw	r1, #562	; 0x232
 800e598:	4838      	ldr	r0, [pc, #224]	; (800e67c <__mdiff+0x10c>)
 800e59a:	f7fd fbf1 	bl	800bd80 <__assert_func>
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e5a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a8:	bfa4      	itt	ge
 800e5aa:	463b      	movge	r3, r7
 800e5ac:	4627      	movge	r7, r4
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	6879      	ldr	r1, [r7, #4]
 800e5b2:	bfa6      	itte	ge
 800e5b4:	461c      	movge	r4, r3
 800e5b6:	2500      	movge	r5, #0
 800e5b8:	2501      	movlt	r5, #1
 800e5ba:	f7ff fd3f 	bl	800e03c <_Balloc>
 800e5be:	b920      	cbnz	r0, 800e5ca <__mdiff+0x5a>
 800e5c0:	4b2d      	ldr	r3, [pc, #180]	; (800e678 <__mdiff+0x108>)
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e5c8:	e7e6      	b.n	800e598 <__mdiff+0x28>
 800e5ca:	693e      	ldr	r6, [r7, #16]
 800e5cc:	60c5      	str	r5, [r0, #12]
 800e5ce:	6925      	ldr	r5, [r4, #16]
 800e5d0:	f107 0114 	add.w	r1, r7, #20
 800e5d4:	f104 0914 	add.w	r9, r4, #20
 800e5d8:	f100 0e14 	add.w	lr, r0, #20
 800e5dc:	f107 0210 	add.w	r2, r7, #16
 800e5e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e5e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e5e8:	46f2      	mov	sl, lr
 800e5ea:	2700      	movs	r7, #0
 800e5ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800e5f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e5f4:	fa1f f883 	uxth.w	r8, r3
 800e5f8:	fa17 f78b 	uxtah	r7, r7, fp
 800e5fc:	0c1b      	lsrs	r3, r3, #16
 800e5fe:	eba7 0808 	sub.w	r8, r7, r8
 800e602:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e606:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e60a:	fa1f f888 	uxth.w	r8, r8
 800e60e:	141f      	asrs	r7, r3, #16
 800e610:	454d      	cmp	r5, r9
 800e612:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e616:	f84a 3b04 	str.w	r3, [sl], #4
 800e61a:	d8e7      	bhi.n	800e5ec <__mdiff+0x7c>
 800e61c:	1b2b      	subs	r3, r5, r4
 800e61e:	3b15      	subs	r3, #21
 800e620:	f023 0303 	bic.w	r3, r3, #3
 800e624:	3304      	adds	r3, #4
 800e626:	3415      	adds	r4, #21
 800e628:	42a5      	cmp	r5, r4
 800e62a:	bf38      	it	cc
 800e62c:	2304      	movcc	r3, #4
 800e62e:	4419      	add	r1, r3
 800e630:	4473      	add	r3, lr
 800e632:	469e      	mov	lr, r3
 800e634:	460d      	mov	r5, r1
 800e636:	4565      	cmp	r5, ip
 800e638:	d30e      	bcc.n	800e658 <__mdiff+0xe8>
 800e63a:	f10c 0203 	add.w	r2, ip, #3
 800e63e:	1a52      	subs	r2, r2, r1
 800e640:	f022 0203 	bic.w	r2, r2, #3
 800e644:	3903      	subs	r1, #3
 800e646:	458c      	cmp	ip, r1
 800e648:	bf38      	it	cc
 800e64a:	2200      	movcc	r2, #0
 800e64c:	441a      	add	r2, r3
 800e64e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e652:	b17b      	cbz	r3, 800e674 <__mdiff+0x104>
 800e654:	6106      	str	r6, [r0, #16]
 800e656:	e7a5      	b.n	800e5a4 <__mdiff+0x34>
 800e658:	f855 8b04 	ldr.w	r8, [r5], #4
 800e65c:	fa17 f488 	uxtah	r4, r7, r8
 800e660:	1422      	asrs	r2, r4, #16
 800e662:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e666:	b2a4      	uxth	r4, r4
 800e668:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e66c:	f84e 4b04 	str.w	r4, [lr], #4
 800e670:	1417      	asrs	r7, r2, #16
 800e672:	e7e0      	b.n	800e636 <__mdiff+0xc6>
 800e674:	3e01      	subs	r6, #1
 800e676:	e7ea      	b.n	800e64e <__mdiff+0xde>
 800e678:	0800f1dc 	.word	0x0800f1dc
 800e67c:	0800f250 	.word	0x0800f250

0800e680 <__d2b>:
 800e680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e684:	4689      	mov	r9, r1
 800e686:	2101      	movs	r1, #1
 800e688:	ec57 6b10 	vmov	r6, r7, d0
 800e68c:	4690      	mov	r8, r2
 800e68e:	f7ff fcd5 	bl	800e03c <_Balloc>
 800e692:	4604      	mov	r4, r0
 800e694:	b930      	cbnz	r0, 800e6a4 <__d2b+0x24>
 800e696:	4602      	mov	r2, r0
 800e698:	4b25      	ldr	r3, [pc, #148]	; (800e730 <__d2b+0xb0>)
 800e69a:	4826      	ldr	r0, [pc, #152]	; (800e734 <__d2b+0xb4>)
 800e69c:	f240 310a 	movw	r1, #778	; 0x30a
 800e6a0:	f7fd fb6e 	bl	800bd80 <__assert_func>
 800e6a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e6a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e6ac:	bb35      	cbnz	r5, 800e6fc <__d2b+0x7c>
 800e6ae:	2e00      	cmp	r6, #0
 800e6b0:	9301      	str	r3, [sp, #4]
 800e6b2:	d028      	beq.n	800e706 <__d2b+0x86>
 800e6b4:	4668      	mov	r0, sp
 800e6b6:	9600      	str	r6, [sp, #0]
 800e6b8:	f7ff fd8c 	bl	800e1d4 <__lo0bits>
 800e6bc:	9900      	ldr	r1, [sp, #0]
 800e6be:	b300      	cbz	r0, 800e702 <__d2b+0x82>
 800e6c0:	9a01      	ldr	r2, [sp, #4]
 800e6c2:	f1c0 0320 	rsb	r3, r0, #32
 800e6c6:	fa02 f303 	lsl.w	r3, r2, r3
 800e6ca:	430b      	orrs	r3, r1
 800e6cc:	40c2      	lsrs	r2, r0
 800e6ce:	6163      	str	r3, [r4, #20]
 800e6d0:	9201      	str	r2, [sp, #4]
 800e6d2:	9b01      	ldr	r3, [sp, #4]
 800e6d4:	61a3      	str	r3, [r4, #24]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	bf14      	ite	ne
 800e6da:	2202      	movne	r2, #2
 800e6dc:	2201      	moveq	r2, #1
 800e6de:	6122      	str	r2, [r4, #16]
 800e6e0:	b1d5      	cbz	r5, 800e718 <__d2b+0x98>
 800e6e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e6e6:	4405      	add	r5, r0
 800e6e8:	f8c9 5000 	str.w	r5, [r9]
 800e6ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6f0:	f8c8 0000 	str.w	r0, [r8]
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	b003      	add	sp, #12
 800e6f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e700:	e7d5      	b.n	800e6ae <__d2b+0x2e>
 800e702:	6161      	str	r1, [r4, #20]
 800e704:	e7e5      	b.n	800e6d2 <__d2b+0x52>
 800e706:	a801      	add	r0, sp, #4
 800e708:	f7ff fd64 	bl	800e1d4 <__lo0bits>
 800e70c:	9b01      	ldr	r3, [sp, #4]
 800e70e:	6163      	str	r3, [r4, #20]
 800e710:	2201      	movs	r2, #1
 800e712:	6122      	str	r2, [r4, #16]
 800e714:	3020      	adds	r0, #32
 800e716:	e7e3      	b.n	800e6e0 <__d2b+0x60>
 800e718:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e71c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e720:	f8c9 0000 	str.w	r0, [r9]
 800e724:	6918      	ldr	r0, [r3, #16]
 800e726:	f7ff fd35 	bl	800e194 <__hi0bits>
 800e72a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e72e:	e7df      	b.n	800e6f0 <__d2b+0x70>
 800e730:	0800f1dc 	.word	0x0800f1dc
 800e734:	0800f250 	.word	0x0800f250

0800e738 <_calloc_r>:
 800e738:	b513      	push	{r0, r1, r4, lr}
 800e73a:	434a      	muls	r2, r1
 800e73c:	4611      	mov	r1, r2
 800e73e:	9201      	str	r2, [sp, #4]
 800e740:	f7fd fbea 	bl	800bf18 <_malloc_r>
 800e744:	4604      	mov	r4, r0
 800e746:	b118      	cbz	r0, 800e750 <_calloc_r+0x18>
 800e748:	9a01      	ldr	r2, [sp, #4]
 800e74a:	2100      	movs	r1, #0
 800e74c:	f7fd fb8c 	bl	800be68 <memset>
 800e750:	4620      	mov	r0, r4
 800e752:	b002      	add	sp, #8
 800e754:	bd10      	pop	{r4, pc}

0800e756 <_realloc_r>:
 800e756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e758:	4607      	mov	r7, r0
 800e75a:	4614      	mov	r4, r2
 800e75c:	460e      	mov	r6, r1
 800e75e:	b921      	cbnz	r1, 800e76a <_realloc_r+0x14>
 800e760:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e764:	4611      	mov	r1, r2
 800e766:	f7fd bbd7 	b.w	800bf18 <_malloc_r>
 800e76a:	b922      	cbnz	r2, 800e776 <_realloc_r+0x20>
 800e76c:	f7fd fb84 	bl	800be78 <_free_r>
 800e770:	4625      	mov	r5, r4
 800e772:	4628      	mov	r0, r5
 800e774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e776:	f000 fa5f 	bl	800ec38 <_malloc_usable_size_r>
 800e77a:	42a0      	cmp	r0, r4
 800e77c:	d20f      	bcs.n	800e79e <_realloc_r+0x48>
 800e77e:	4621      	mov	r1, r4
 800e780:	4638      	mov	r0, r7
 800e782:	f7fd fbc9 	bl	800bf18 <_malloc_r>
 800e786:	4605      	mov	r5, r0
 800e788:	2800      	cmp	r0, #0
 800e78a:	d0f2      	beq.n	800e772 <_realloc_r+0x1c>
 800e78c:	4631      	mov	r1, r6
 800e78e:	4622      	mov	r2, r4
 800e790:	f7fd fb5c 	bl	800be4c <memcpy>
 800e794:	4631      	mov	r1, r6
 800e796:	4638      	mov	r0, r7
 800e798:	f7fd fb6e 	bl	800be78 <_free_r>
 800e79c:	e7e9      	b.n	800e772 <_realloc_r+0x1c>
 800e79e:	4635      	mov	r5, r6
 800e7a0:	e7e7      	b.n	800e772 <_realloc_r+0x1c>

0800e7a2 <__ssputs_r>:
 800e7a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7a6:	688e      	ldr	r6, [r1, #8]
 800e7a8:	429e      	cmp	r6, r3
 800e7aa:	4682      	mov	sl, r0
 800e7ac:	460c      	mov	r4, r1
 800e7ae:	4690      	mov	r8, r2
 800e7b0:	461f      	mov	r7, r3
 800e7b2:	d838      	bhi.n	800e826 <__ssputs_r+0x84>
 800e7b4:	898a      	ldrh	r2, [r1, #12]
 800e7b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e7ba:	d032      	beq.n	800e822 <__ssputs_r+0x80>
 800e7bc:	6825      	ldr	r5, [r4, #0]
 800e7be:	6909      	ldr	r1, [r1, #16]
 800e7c0:	eba5 0901 	sub.w	r9, r5, r1
 800e7c4:	6965      	ldr	r5, [r4, #20]
 800e7c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	444b      	add	r3, r9
 800e7d2:	106d      	asrs	r5, r5, #1
 800e7d4:	429d      	cmp	r5, r3
 800e7d6:	bf38      	it	cc
 800e7d8:	461d      	movcc	r5, r3
 800e7da:	0553      	lsls	r3, r2, #21
 800e7dc:	d531      	bpl.n	800e842 <__ssputs_r+0xa0>
 800e7de:	4629      	mov	r1, r5
 800e7e0:	f7fd fb9a 	bl	800bf18 <_malloc_r>
 800e7e4:	4606      	mov	r6, r0
 800e7e6:	b950      	cbnz	r0, 800e7fe <__ssputs_r+0x5c>
 800e7e8:	230c      	movs	r3, #12
 800e7ea:	f8ca 3000 	str.w	r3, [sl]
 800e7ee:	89a3      	ldrh	r3, [r4, #12]
 800e7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7f4:	81a3      	strh	r3, [r4, #12]
 800e7f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fe:	6921      	ldr	r1, [r4, #16]
 800e800:	464a      	mov	r2, r9
 800e802:	f7fd fb23 	bl	800be4c <memcpy>
 800e806:	89a3      	ldrh	r3, [r4, #12]
 800e808:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e810:	81a3      	strh	r3, [r4, #12]
 800e812:	6126      	str	r6, [r4, #16]
 800e814:	6165      	str	r5, [r4, #20]
 800e816:	444e      	add	r6, r9
 800e818:	eba5 0509 	sub.w	r5, r5, r9
 800e81c:	6026      	str	r6, [r4, #0]
 800e81e:	60a5      	str	r5, [r4, #8]
 800e820:	463e      	mov	r6, r7
 800e822:	42be      	cmp	r6, r7
 800e824:	d900      	bls.n	800e828 <__ssputs_r+0x86>
 800e826:	463e      	mov	r6, r7
 800e828:	4632      	mov	r2, r6
 800e82a:	6820      	ldr	r0, [r4, #0]
 800e82c:	4641      	mov	r1, r8
 800e82e:	f7ff fbdf 	bl	800dff0 <memmove>
 800e832:	68a3      	ldr	r3, [r4, #8]
 800e834:	6822      	ldr	r2, [r4, #0]
 800e836:	1b9b      	subs	r3, r3, r6
 800e838:	4432      	add	r2, r6
 800e83a:	60a3      	str	r3, [r4, #8]
 800e83c:	6022      	str	r2, [r4, #0]
 800e83e:	2000      	movs	r0, #0
 800e840:	e7db      	b.n	800e7fa <__ssputs_r+0x58>
 800e842:	462a      	mov	r2, r5
 800e844:	f7ff ff87 	bl	800e756 <_realloc_r>
 800e848:	4606      	mov	r6, r0
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d1e1      	bne.n	800e812 <__ssputs_r+0x70>
 800e84e:	6921      	ldr	r1, [r4, #16]
 800e850:	4650      	mov	r0, sl
 800e852:	f7fd fb11 	bl	800be78 <_free_r>
 800e856:	e7c7      	b.n	800e7e8 <__ssputs_r+0x46>

0800e858 <_svfiprintf_r>:
 800e858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	4698      	mov	r8, r3
 800e85e:	898b      	ldrh	r3, [r1, #12]
 800e860:	061b      	lsls	r3, r3, #24
 800e862:	b09d      	sub	sp, #116	; 0x74
 800e864:	4607      	mov	r7, r0
 800e866:	460d      	mov	r5, r1
 800e868:	4614      	mov	r4, r2
 800e86a:	d50e      	bpl.n	800e88a <_svfiprintf_r+0x32>
 800e86c:	690b      	ldr	r3, [r1, #16]
 800e86e:	b963      	cbnz	r3, 800e88a <_svfiprintf_r+0x32>
 800e870:	2140      	movs	r1, #64	; 0x40
 800e872:	f7fd fb51 	bl	800bf18 <_malloc_r>
 800e876:	6028      	str	r0, [r5, #0]
 800e878:	6128      	str	r0, [r5, #16]
 800e87a:	b920      	cbnz	r0, 800e886 <_svfiprintf_r+0x2e>
 800e87c:	230c      	movs	r3, #12
 800e87e:	603b      	str	r3, [r7, #0]
 800e880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e884:	e0d1      	b.n	800ea2a <_svfiprintf_r+0x1d2>
 800e886:	2340      	movs	r3, #64	; 0x40
 800e888:	616b      	str	r3, [r5, #20]
 800e88a:	2300      	movs	r3, #0
 800e88c:	9309      	str	r3, [sp, #36]	; 0x24
 800e88e:	2320      	movs	r3, #32
 800e890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e894:	f8cd 800c 	str.w	r8, [sp, #12]
 800e898:	2330      	movs	r3, #48	; 0x30
 800e89a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ea44 <_svfiprintf_r+0x1ec>
 800e89e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8a2:	f04f 0901 	mov.w	r9, #1
 800e8a6:	4623      	mov	r3, r4
 800e8a8:	469a      	mov	sl, r3
 800e8aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8ae:	b10a      	cbz	r2, 800e8b4 <_svfiprintf_r+0x5c>
 800e8b0:	2a25      	cmp	r2, #37	; 0x25
 800e8b2:	d1f9      	bne.n	800e8a8 <_svfiprintf_r+0x50>
 800e8b4:	ebba 0b04 	subs.w	fp, sl, r4
 800e8b8:	d00b      	beq.n	800e8d2 <_svfiprintf_r+0x7a>
 800e8ba:	465b      	mov	r3, fp
 800e8bc:	4622      	mov	r2, r4
 800e8be:	4629      	mov	r1, r5
 800e8c0:	4638      	mov	r0, r7
 800e8c2:	f7ff ff6e 	bl	800e7a2 <__ssputs_r>
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	f000 80aa 	beq.w	800ea20 <_svfiprintf_r+0x1c8>
 800e8cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8ce:	445a      	add	r2, fp
 800e8d0:	9209      	str	r2, [sp, #36]	; 0x24
 800e8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	f000 80a2 	beq.w	800ea20 <_svfiprintf_r+0x1c8>
 800e8dc:	2300      	movs	r3, #0
 800e8de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8e6:	f10a 0a01 	add.w	sl, sl, #1
 800e8ea:	9304      	str	r3, [sp, #16]
 800e8ec:	9307      	str	r3, [sp, #28]
 800e8ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8f2:	931a      	str	r3, [sp, #104]	; 0x68
 800e8f4:	4654      	mov	r4, sl
 800e8f6:	2205      	movs	r2, #5
 800e8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8fc:	4851      	ldr	r0, [pc, #324]	; (800ea44 <_svfiprintf_r+0x1ec>)
 800e8fe:	f7f1 fc87 	bl	8000210 <memchr>
 800e902:	9a04      	ldr	r2, [sp, #16]
 800e904:	b9d8      	cbnz	r0, 800e93e <_svfiprintf_r+0xe6>
 800e906:	06d0      	lsls	r0, r2, #27
 800e908:	bf44      	itt	mi
 800e90a:	2320      	movmi	r3, #32
 800e90c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e910:	0711      	lsls	r1, r2, #28
 800e912:	bf44      	itt	mi
 800e914:	232b      	movmi	r3, #43	; 0x2b
 800e916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e91a:	f89a 3000 	ldrb.w	r3, [sl]
 800e91e:	2b2a      	cmp	r3, #42	; 0x2a
 800e920:	d015      	beq.n	800e94e <_svfiprintf_r+0xf6>
 800e922:	9a07      	ldr	r2, [sp, #28]
 800e924:	4654      	mov	r4, sl
 800e926:	2000      	movs	r0, #0
 800e928:	f04f 0c0a 	mov.w	ip, #10
 800e92c:	4621      	mov	r1, r4
 800e92e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e932:	3b30      	subs	r3, #48	; 0x30
 800e934:	2b09      	cmp	r3, #9
 800e936:	d94e      	bls.n	800e9d6 <_svfiprintf_r+0x17e>
 800e938:	b1b0      	cbz	r0, 800e968 <_svfiprintf_r+0x110>
 800e93a:	9207      	str	r2, [sp, #28]
 800e93c:	e014      	b.n	800e968 <_svfiprintf_r+0x110>
 800e93e:	eba0 0308 	sub.w	r3, r0, r8
 800e942:	fa09 f303 	lsl.w	r3, r9, r3
 800e946:	4313      	orrs	r3, r2
 800e948:	9304      	str	r3, [sp, #16]
 800e94a:	46a2      	mov	sl, r4
 800e94c:	e7d2      	b.n	800e8f4 <_svfiprintf_r+0x9c>
 800e94e:	9b03      	ldr	r3, [sp, #12]
 800e950:	1d19      	adds	r1, r3, #4
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	9103      	str	r1, [sp, #12]
 800e956:	2b00      	cmp	r3, #0
 800e958:	bfbb      	ittet	lt
 800e95a:	425b      	neglt	r3, r3
 800e95c:	f042 0202 	orrlt.w	r2, r2, #2
 800e960:	9307      	strge	r3, [sp, #28]
 800e962:	9307      	strlt	r3, [sp, #28]
 800e964:	bfb8      	it	lt
 800e966:	9204      	strlt	r2, [sp, #16]
 800e968:	7823      	ldrb	r3, [r4, #0]
 800e96a:	2b2e      	cmp	r3, #46	; 0x2e
 800e96c:	d10c      	bne.n	800e988 <_svfiprintf_r+0x130>
 800e96e:	7863      	ldrb	r3, [r4, #1]
 800e970:	2b2a      	cmp	r3, #42	; 0x2a
 800e972:	d135      	bne.n	800e9e0 <_svfiprintf_r+0x188>
 800e974:	9b03      	ldr	r3, [sp, #12]
 800e976:	1d1a      	adds	r2, r3, #4
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	9203      	str	r2, [sp, #12]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	bfb8      	it	lt
 800e980:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e984:	3402      	adds	r4, #2
 800e986:	9305      	str	r3, [sp, #20]
 800e988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ea54 <_svfiprintf_r+0x1fc>
 800e98c:	7821      	ldrb	r1, [r4, #0]
 800e98e:	2203      	movs	r2, #3
 800e990:	4650      	mov	r0, sl
 800e992:	f7f1 fc3d 	bl	8000210 <memchr>
 800e996:	b140      	cbz	r0, 800e9aa <_svfiprintf_r+0x152>
 800e998:	2340      	movs	r3, #64	; 0x40
 800e99a:	eba0 000a 	sub.w	r0, r0, sl
 800e99e:	fa03 f000 	lsl.w	r0, r3, r0
 800e9a2:	9b04      	ldr	r3, [sp, #16]
 800e9a4:	4303      	orrs	r3, r0
 800e9a6:	3401      	adds	r4, #1
 800e9a8:	9304      	str	r3, [sp, #16]
 800e9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9ae:	4826      	ldr	r0, [pc, #152]	; (800ea48 <_svfiprintf_r+0x1f0>)
 800e9b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9b4:	2206      	movs	r2, #6
 800e9b6:	f7f1 fc2b 	bl	8000210 <memchr>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d038      	beq.n	800ea30 <_svfiprintf_r+0x1d8>
 800e9be:	4b23      	ldr	r3, [pc, #140]	; (800ea4c <_svfiprintf_r+0x1f4>)
 800e9c0:	bb1b      	cbnz	r3, 800ea0a <_svfiprintf_r+0x1b2>
 800e9c2:	9b03      	ldr	r3, [sp, #12]
 800e9c4:	3307      	adds	r3, #7
 800e9c6:	f023 0307 	bic.w	r3, r3, #7
 800e9ca:	3308      	adds	r3, #8
 800e9cc:	9303      	str	r3, [sp, #12]
 800e9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d0:	4433      	add	r3, r6
 800e9d2:	9309      	str	r3, [sp, #36]	; 0x24
 800e9d4:	e767      	b.n	800e8a6 <_svfiprintf_r+0x4e>
 800e9d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9da:	460c      	mov	r4, r1
 800e9dc:	2001      	movs	r0, #1
 800e9de:	e7a5      	b.n	800e92c <_svfiprintf_r+0xd4>
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	3401      	adds	r4, #1
 800e9e4:	9305      	str	r3, [sp, #20]
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	f04f 0c0a 	mov.w	ip, #10
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9f2:	3a30      	subs	r2, #48	; 0x30
 800e9f4:	2a09      	cmp	r2, #9
 800e9f6:	d903      	bls.n	800ea00 <_svfiprintf_r+0x1a8>
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d0c5      	beq.n	800e988 <_svfiprintf_r+0x130>
 800e9fc:	9105      	str	r1, [sp, #20]
 800e9fe:	e7c3      	b.n	800e988 <_svfiprintf_r+0x130>
 800ea00:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea04:	4604      	mov	r4, r0
 800ea06:	2301      	movs	r3, #1
 800ea08:	e7f0      	b.n	800e9ec <_svfiprintf_r+0x194>
 800ea0a:	ab03      	add	r3, sp, #12
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	462a      	mov	r2, r5
 800ea10:	4b0f      	ldr	r3, [pc, #60]	; (800ea50 <_svfiprintf_r+0x1f8>)
 800ea12:	a904      	add	r1, sp, #16
 800ea14:	4638      	mov	r0, r7
 800ea16:	f7fd fcd3 	bl	800c3c0 <_printf_float>
 800ea1a:	1c42      	adds	r2, r0, #1
 800ea1c:	4606      	mov	r6, r0
 800ea1e:	d1d6      	bne.n	800e9ce <_svfiprintf_r+0x176>
 800ea20:	89ab      	ldrh	r3, [r5, #12]
 800ea22:	065b      	lsls	r3, r3, #25
 800ea24:	f53f af2c 	bmi.w	800e880 <_svfiprintf_r+0x28>
 800ea28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea2a:	b01d      	add	sp, #116	; 0x74
 800ea2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea30:	ab03      	add	r3, sp, #12
 800ea32:	9300      	str	r3, [sp, #0]
 800ea34:	462a      	mov	r2, r5
 800ea36:	4b06      	ldr	r3, [pc, #24]	; (800ea50 <_svfiprintf_r+0x1f8>)
 800ea38:	a904      	add	r1, sp, #16
 800ea3a:	4638      	mov	r0, r7
 800ea3c:	f7fd ff64 	bl	800c908 <_printf_i>
 800ea40:	e7eb      	b.n	800ea1a <_svfiprintf_r+0x1c2>
 800ea42:	bf00      	nop
 800ea44:	0800f114 	.word	0x0800f114
 800ea48:	0800f11e 	.word	0x0800f11e
 800ea4c:	0800c3c1 	.word	0x0800c3c1
 800ea50:	0800e7a3 	.word	0x0800e7a3
 800ea54:	0800f11a 	.word	0x0800f11a

0800ea58 <_raise_r>:
 800ea58:	291f      	cmp	r1, #31
 800ea5a:	b538      	push	{r3, r4, r5, lr}
 800ea5c:	4604      	mov	r4, r0
 800ea5e:	460d      	mov	r5, r1
 800ea60:	d904      	bls.n	800ea6c <_raise_r+0x14>
 800ea62:	2316      	movs	r3, #22
 800ea64:	6003      	str	r3, [r0, #0]
 800ea66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea6a:	bd38      	pop	{r3, r4, r5, pc}
 800ea6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ea6e:	b112      	cbz	r2, 800ea76 <_raise_r+0x1e>
 800ea70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea74:	b94b      	cbnz	r3, 800ea8a <_raise_r+0x32>
 800ea76:	4620      	mov	r0, r4
 800ea78:	f000 f830 	bl	800eadc <_getpid_r>
 800ea7c:	462a      	mov	r2, r5
 800ea7e:	4601      	mov	r1, r0
 800ea80:	4620      	mov	r0, r4
 800ea82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea86:	f000 b817 	b.w	800eab8 <_kill_r>
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d00a      	beq.n	800eaa4 <_raise_r+0x4c>
 800ea8e:	1c59      	adds	r1, r3, #1
 800ea90:	d103      	bne.n	800ea9a <_raise_r+0x42>
 800ea92:	2316      	movs	r3, #22
 800ea94:	6003      	str	r3, [r0, #0]
 800ea96:	2001      	movs	r0, #1
 800ea98:	e7e7      	b.n	800ea6a <_raise_r+0x12>
 800ea9a:	2400      	movs	r4, #0
 800ea9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	4798      	blx	r3
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	e7e0      	b.n	800ea6a <_raise_r+0x12>

0800eaa8 <raise>:
 800eaa8:	4b02      	ldr	r3, [pc, #8]	; (800eab4 <raise+0xc>)
 800eaaa:	4601      	mov	r1, r0
 800eaac:	6818      	ldr	r0, [r3, #0]
 800eaae:	f7ff bfd3 	b.w	800ea58 <_raise_r>
 800eab2:	bf00      	nop
 800eab4:	200001ec 	.word	0x200001ec

0800eab8 <_kill_r>:
 800eab8:	b538      	push	{r3, r4, r5, lr}
 800eaba:	4d07      	ldr	r5, [pc, #28]	; (800ead8 <_kill_r+0x20>)
 800eabc:	2300      	movs	r3, #0
 800eabe:	4604      	mov	r4, r0
 800eac0:	4608      	mov	r0, r1
 800eac2:	4611      	mov	r1, r2
 800eac4:	602b      	str	r3, [r5, #0]
 800eac6:	f7f3 fb95 	bl	80021f4 <_kill>
 800eaca:	1c43      	adds	r3, r0, #1
 800eacc:	d102      	bne.n	800ead4 <_kill_r+0x1c>
 800eace:	682b      	ldr	r3, [r5, #0]
 800ead0:	b103      	cbz	r3, 800ead4 <_kill_r+0x1c>
 800ead2:	6023      	str	r3, [r4, #0]
 800ead4:	bd38      	pop	{r3, r4, r5, pc}
 800ead6:	bf00      	nop
 800ead8:	20002598 	.word	0x20002598

0800eadc <_getpid_r>:
 800eadc:	f7f3 bb82 	b.w	80021e4 <_getpid>

0800eae0 <__sread>:
 800eae0:	b510      	push	{r4, lr}
 800eae2:	460c      	mov	r4, r1
 800eae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eae8:	f000 f8ae 	bl	800ec48 <_read_r>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	bfab      	itete	ge
 800eaf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eaf2:	89a3      	ldrhlt	r3, [r4, #12]
 800eaf4:	181b      	addge	r3, r3, r0
 800eaf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eafa:	bfac      	ite	ge
 800eafc:	6563      	strge	r3, [r4, #84]	; 0x54
 800eafe:	81a3      	strhlt	r3, [r4, #12]
 800eb00:	bd10      	pop	{r4, pc}

0800eb02 <__swrite>:
 800eb02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb06:	461f      	mov	r7, r3
 800eb08:	898b      	ldrh	r3, [r1, #12]
 800eb0a:	05db      	lsls	r3, r3, #23
 800eb0c:	4605      	mov	r5, r0
 800eb0e:	460c      	mov	r4, r1
 800eb10:	4616      	mov	r6, r2
 800eb12:	d505      	bpl.n	800eb20 <__swrite+0x1e>
 800eb14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb18:	2302      	movs	r3, #2
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f000 f868 	bl	800ebf0 <_lseek_r>
 800eb20:	89a3      	ldrh	r3, [r4, #12]
 800eb22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb2a:	81a3      	strh	r3, [r4, #12]
 800eb2c:	4632      	mov	r2, r6
 800eb2e:	463b      	mov	r3, r7
 800eb30:	4628      	mov	r0, r5
 800eb32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb36:	f000 b817 	b.w	800eb68 <_write_r>

0800eb3a <__sseek>:
 800eb3a:	b510      	push	{r4, lr}
 800eb3c:	460c      	mov	r4, r1
 800eb3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb42:	f000 f855 	bl	800ebf0 <_lseek_r>
 800eb46:	1c43      	adds	r3, r0, #1
 800eb48:	89a3      	ldrh	r3, [r4, #12]
 800eb4a:	bf15      	itete	ne
 800eb4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb56:	81a3      	strheq	r3, [r4, #12]
 800eb58:	bf18      	it	ne
 800eb5a:	81a3      	strhne	r3, [r4, #12]
 800eb5c:	bd10      	pop	{r4, pc}

0800eb5e <__sclose>:
 800eb5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb62:	f000 b813 	b.w	800eb8c <_close_r>
	...

0800eb68 <_write_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	4d07      	ldr	r5, [pc, #28]	; (800eb88 <_write_r+0x20>)
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	4608      	mov	r0, r1
 800eb70:	4611      	mov	r1, r2
 800eb72:	2200      	movs	r2, #0
 800eb74:	602a      	str	r2, [r5, #0]
 800eb76:	461a      	mov	r2, r3
 800eb78:	f7f3 fb73 	bl	8002262 <_write>
 800eb7c:	1c43      	adds	r3, r0, #1
 800eb7e:	d102      	bne.n	800eb86 <_write_r+0x1e>
 800eb80:	682b      	ldr	r3, [r5, #0]
 800eb82:	b103      	cbz	r3, 800eb86 <_write_r+0x1e>
 800eb84:	6023      	str	r3, [r4, #0]
 800eb86:	bd38      	pop	{r3, r4, r5, pc}
 800eb88:	20002598 	.word	0x20002598

0800eb8c <_close_r>:
 800eb8c:	b538      	push	{r3, r4, r5, lr}
 800eb8e:	4d06      	ldr	r5, [pc, #24]	; (800eba8 <_close_r+0x1c>)
 800eb90:	2300      	movs	r3, #0
 800eb92:	4604      	mov	r4, r0
 800eb94:	4608      	mov	r0, r1
 800eb96:	602b      	str	r3, [r5, #0]
 800eb98:	f7f3 fb7f 	bl	800229a <_close>
 800eb9c:	1c43      	adds	r3, r0, #1
 800eb9e:	d102      	bne.n	800eba6 <_close_r+0x1a>
 800eba0:	682b      	ldr	r3, [r5, #0]
 800eba2:	b103      	cbz	r3, 800eba6 <_close_r+0x1a>
 800eba4:	6023      	str	r3, [r4, #0]
 800eba6:	bd38      	pop	{r3, r4, r5, pc}
 800eba8:	20002598 	.word	0x20002598

0800ebac <_fstat_r>:
 800ebac:	b538      	push	{r3, r4, r5, lr}
 800ebae:	4d07      	ldr	r5, [pc, #28]	; (800ebcc <_fstat_r+0x20>)
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	4604      	mov	r4, r0
 800ebb4:	4608      	mov	r0, r1
 800ebb6:	4611      	mov	r1, r2
 800ebb8:	602b      	str	r3, [r5, #0]
 800ebba:	f7f3 fb7a 	bl	80022b2 <_fstat>
 800ebbe:	1c43      	adds	r3, r0, #1
 800ebc0:	d102      	bne.n	800ebc8 <_fstat_r+0x1c>
 800ebc2:	682b      	ldr	r3, [r5, #0]
 800ebc4:	b103      	cbz	r3, 800ebc8 <_fstat_r+0x1c>
 800ebc6:	6023      	str	r3, [r4, #0]
 800ebc8:	bd38      	pop	{r3, r4, r5, pc}
 800ebca:	bf00      	nop
 800ebcc:	20002598 	.word	0x20002598

0800ebd0 <_isatty_r>:
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	4d06      	ldr	r5, [pc, #24]	; (800ebec <_isatty_r+0x1c>)
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	4608      	mov	r0, r1
 800ebda:	602b      	str	r3, [r5, #0]
 800ebdc:	f7f3 fb79 	bl	80022d2 <_isatty>
 800ebe0:	1c43      	adds	r3, r0, #1
 800ebe2:	d102      	bne.n	800ebea <_isatty_r+0x1a>
 800ebe4:	682b      	ldr	r3, [r5, #0]
 800ebe6:	b103      	cbz	r3, 800ebea <_isatty_r+0x1a>
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	20002598 	.word	0x20002598

0800ebf0 <_lseek_r>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	4d07      	ldr	r5, [pc, #28]	; (800ec10 <_lseek_r+0x20>)
 800ebf4:	4604      	mov	r4, r0
 800ebf6:	4608      	mov	r0, r1
 800ebf8:	4611      	mov	r1, r2
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	602a      	str	r2, [r5, #0]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	f7f3 fb72 	bl	80022e8 <_lseek>
 800ec04:	1c43      	adds	r3, r0, #1
 800ec06:	d102      	bne.n	800ec0e <_lseek_r+0x1e>
 800ec08:	682b      	ldr	r3, [r5, #0]
 800ec0a:	b103      	cbz	r3, 800ec0e <_lseek_r+0x1e>
 800ec0c:	6023      	str	r3, [r4, #0]
 800ec0e:	bd38      	pop	{r3, r4, r5, pc}
 800ec10:	20002598 	.word	0x20002598

0800ec14 <__ascii_mbtowc>:
 800ec14:	b082      	sub	sp, #8
 800ec16:	b901      	cbnz	r1, 800ec1a <__ascii_mbtowc+0x6>
 800ec18:	a901      	add	r1, sp, #4
 800ec1a:	b142      	cbz	r2, 800ec2e <__ascii_mbtowc+0x1a>
 800ec1c:	b14b      	cbz	r3, 800ec32 <__ascii_mbtowc+0x1e>
 800ec1e:	7813      	ldrb	r3, [r2, #0]
 800ec20:	600b      	str	r3, [r1, #0]
 800ec22:	7812      	ldrb	r2, [r2, #0]
 800ec24:	1e10      	subs	r0, r2, #0
 800ec26:	bf18      	it	ne
 800ec28:	2001      	movne	r0, #1
 800ec2a:	b002      	add	sp, #8
 800ec2c:	4770      	bx	lr
 800ec2e:	4610      	mov	r0, r2
 800ec30:	e7fb      	b.n	800ec2a <__ascii_mbtowc+0x16>
 800ec32:	f06f 0001 	mvn.w	r0, #1
 800ec36:	e7f8      	b.n	800ec2a <__ascii_mbtowc+0x16>

0800ec38 <_malloc_usable_size_r>:
 800ec38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec3c:	1f18      	subs	r0, r3, #4
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	bfbc      	itt	lt
 800ec42:	580b      	ldrlt	r3, [r1, r0]
 800ec44:	18c0      	addlt	r0, r0, r3
 800ec46:	4770      	bx	lr

0800ec48 <_read_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	4d07      	ldr	r5, [pc, #28]	; (800ec68 <_read_r+0x20>)
 800ec4c:	4604      	mov	r4, r0
 800ec4e:	4608      	mov	r0, r1
 800ec50:	4611      	mov	r1, r2
 800ec52:	2200      	movs	r2, #0
 800ec54:	602a      	str	r2, [r5, #0]
 800ec56:	461a      	mov	r2, r3
 800ec58:	f7f3 fae6 	bl	8002228 <_read>
 800ec5c:	1c43      	adds	r3, r0, #1
 800ec5e:	d102      	bne.n	800ec66 <_read_r+0x1e>
 800ec60:	682b      	ldr	r3, [r5, #0]
 800ec62:	b103      	cbz	r3, 800ec66 <_read_r+0x1e>
 800ec64:	6023      	str	r3, [r4, #0]
 800ec66:	bd38      	pop	{r3, r4, r5, pc}
 800ec68:	20002598 	.word	0x20002598

0800ec6c <__ascii_wctomb>:
 800ec6c:	b149      	cbz	r1, 800ec82 <__ascii_wctomb+0x16>
 800ec6e:	2aff      	cmp	r2, #255	; 0xff
 800ec70:	bf85      	ittet	hi
 800ec72:	238a      	movhi	r3, #138	; 0x8a
 800ec74:	6003      	strhi	r3, [r0, #0]
 800ec76:	700a      	strbls	r2, [r1, #0]
 800ec78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ec7c:	bf98      	it	ls
 800ec7e:	2001      	movls	r0, #1
 800ec80:	4770      	bx	lr
 800ec82:	4608      	mov	r0, r1
 800ec84:	4770      	bx	lr
	...

0800ec88 <_init>:
 800ec88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec8a:	bf00      	nop
 800ec8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec8e:	bc08      	pop	{r3}
 800ec90:	469e      	mov	lr, r3
 800ec92:	4770      	bx	lr

0800ec94 <_fini>:
 800ec94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec96:	bf00      	nop
 800ec98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec9a:	bc08      	pop	{r3}
 800ec9c:	469e      	mov	lr, r3
 800ec9e:	4770      	bx	lr
